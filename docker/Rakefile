require "thread"
require_relative "build_functions.rb"

Build = Struct.new(:dir, :opts)

ARTIFACTORY_HOST = ENV.fetch("ARTIFACTORY_HOST", "artifactory.dev.pardot.com")
DOCKER_HOST      = ENV.fetch("DOCKER_HOST", "docker.dev.pardot.com")
PUSH             = !ENV.fetch("PUSH", "").empty?

BUILDS = {
  # Officially supported CentOS-based base images
  "centos:6"                        => Build.new("centos/6", pull: true),
  "centos:7"                        => Build.new("centos/7", pull: true),

  # Ubuntu 16.04 only for ParDriver. We do not officially support Ubuntu base
  # images for production images.
  "ubuntu:16.04"                    => Build.new("ubuntu/16.04", pull: true),

  # Stable, reusable base images
  "php:7.0.8"                       => Build.new("php/7.0.8", common: true),
  "java:8u102-jdk"                  => Build.new("java/8u102-jdk", common: true),
  "percona-server:5.5"              => Build.new("percona-server/5.5"),
  "percona-server:5.7"              => Build.new("percona-server/5.7", common: true),
  "ruby:2.3.0"                      => Build.new("ruby/2.3.0", common: true),
  "ruby:2.3.0-centos6"              => Build.new("ruby/2.3.0-centos6", common: true),
  "ssh-forwarder"                   => Build.new("ssh-forwarder"),
  "chefdk:0.17.17"                  => Build.new("chefdk/0.17.17", common: true),
  "node:4"                          => Build.new("node/4"),
  "node:0.10.6"                     => Build.new("node/0.10.6"),

  # Application base images
  "pardot/app"                      => Build.new("pardot/app", common: true),
  "pardot/redis"                    => Build.new("pardot/redis", common: true),
  "pardot/rmux"                     => Build.new("pardot/rmux", common: true),
  "pardot/proxyout"                 => Build.new("pardot/proxyout", common: true),
  "pardot/kafka"                    => Build.new("pardot/kafka", common: true),
  "pardriver/pardriver"             => Build.new("pardriver/pardriver", common: true),
  "pardriver/webdriver-hub"         => Build.new("pardriver/webdriver-hub", common: true),
  "pardriver/webdriver-node-chrome" => Build.new("pardriver/webdriver-node-chrome", common: true),
  "engagement-studio/app"           => Build.new("engagement-studio/app", common: true),
  "salesforce-package/app"          => Build.new("salesforce-package/app"),
  "engagement-history-package/app"  => Build.new("engagement-history-package/app"),
  "realtime-frontend/app"           => Build.new("realtime-frontend/app"),
  "pithumbs/app"                    => Build.new("pithumbs/app"),
  "internal-api/app"                => Build.new("internal-api/app"),
  "mesh/app"                        => Build.new("mesh/app"),
  "repfix/app"                      => Build.new("repfix/app"),
  "bread/bread"                     => Build.new("bread/bread", common: true),
  "teampass:2.1.25.2"               => Build.new("teampass/2.1.25"),
  "teampass:2.1.26"                 => Build.new("teampass/2.1.26"),
  "teampass:2.1.26-unmodified"                 => Build.new("teampass/2.1.26-unmodified"),
  "pwm:1.7.1"                       => Build.new("pwm/1.7.1"),
}

BUILDS.each do |tag, build|
  desc "Builds #{tag}"
  task tag do
    docker_build tag, build.dir, build.opts
  end
end

desc "Builds all images"
task :default => BUILDS.map { |tag, _| tag }

desc "Pulls common images"
task :pull, [:mirror] do |t, args|
  args.with_defaults(mirror: DOCKER_HOST)

  queue = Queue.new
  BUILDS.select { |_, b| b.opts && b.opts[:common] }.each { |tag, _| queue << tag }

  threads = []
  4.times do
    threads << Thread.new do
      begin
        while tag = queue.pop(true)
          docker_pull(tag, args.mirror)
        end
      rescue ThreadError
        # queue empty
        next
      end
    end
  end

  threads.each(&:join)
end
