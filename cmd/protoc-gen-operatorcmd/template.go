package main

import "github.com/sr/operator/generator"

var mainTemplate = generator.NewTemplate("main-gen.go",
	`// Code generated by protoc-gen-operatorcmd
package main

import (
	"flag"
	"fmt"
	"io"
	"os"

	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"github.com/sr/operator"

	{{- range .Services}}
	{{.PackageName}} "{{.ImportPath}}"
	{{- end}}
)

const (
	programName = "{{.Options.BinaryName}}"
)

type config struct {
	Address string `+"`"+`env:"OPERATORD_ADDRESS,default={{.Options.DefaultAddress}}"`+"`"+`
}

var cmd = operator.NewCommand(
	programName,
	[]operator.ServiceCommand{
{{- range .Services}}
		{
{{- $serviceName := .Name }}
{{- $serviceFullName := .FullName }}
			Name:     "{{ $serviceName }}",
			Synopsis: `+"`"+`{{ .Description }}`+"`"+`,
			Methods: []operator.MethodCommand{
	{{- range .Methods}}
				{
					Name:	  "{{dasherize .Name}}",
					Synopsis: `+"`"+`{{.Description}}`+"`"+`,
					Run: func(args []string, flags *flag.FlagSet, address string) (string, error) {
			{{- range .Arguments}}
						{{.Name}} := flags.String("{{dasherize .Name}}", "", "")
			{{- end}}
						flags.Parse(os.Args[3:])
						conn, err := dial(address)
						if err != nil {
							return "", err
						}
						defer conn.Close()
						client := {{$serviceName}}.New{{$serviceFullName}}Client(conn)
						response, err := client.{{.Name}}(
							context.Background(),
							&{{$serviceName}}.{{.Input}}{
								{{- range .Arguments}}
								{{camelCase .Name}}: *{{.Name}},
								{{- end}}
							},
						)
						if err != nil {
							return "", err
						}
						return response.Output.PlainText, nil
					},
				},
	{{- end }}
			},
		},
{{end -}}
	},
)

func main() {
	status, output := cmd.Run(os.Args)
	if status != 0 {
		fmt.Fprintf(os.Stderr, "%s\n", output)
	} else {
		io.WriteString(os.Stdout, output)
	}
	os.Exit(status)
}

func dial(address string) (*grpc.ClientConn, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	return conn, nil
}`)
