package main

import "github.com/sr/operator/generator"

var (
	clientTemplate = generator.NewTemplate("serviceclient-gen.go",
		`// Code generated by protoc-gen-operatorlocal
package main

import (
	{{.PackageName}} "{{.ImportPath}}"
)

type local{{.FullName}}Client struct {
	server {{.PackageName}}.{{.FullName}}
}

func NewLocal{{.FullName}}Client(server {{.PackageName}}.{{.FullName}}) {{.FullName}}Client {
	return &local{{.FullName}}Client{server: server}
}

{{- $serviceName := .Name }}
{{- range .Methods }}
func (c *local{{$serviceName}}Client) {{camelCase .Name}}(
	ctx context.Context,
	in *{{.Input}},
	opts ...grpc.CallOption,
) (*{{.Output}}, error) {
	return c.{{.Name}}(ctx, in)
}
{{ end }}
`)
	serverTemplate = generator.NewTemplate("server-gen.go",
		`// Code generated by protoc-gen-operatorlocal
package main

import (
	"time"

	"github.com/sr/operator"
	"golang.org/x/net/context"

	servicepkg "{{.ImportPath}}"
)

type intercepted{{.PackageName}}{{.FullName}} struct {
	authorizer   operator.Authorizer
	instrumenter operator.Instrumenter
	server       servicepkg.{{.FullName}}Server
}

{{- range .Methods}}
// {{.Name}} intercepts the {{$.FullName}}.{{.Name}} method.
func (a *intercepted{{$.PackageName}}{{$.FullName}}) {{.Name}}(
	ctx context.Context,
	request *servicepkg.{{.Input}},
) (response *servicepkg.{{.Output}}, err error) {
	defer func(start time.Time) {
		a.instrumenter.Instrument(
			operator.NewRequest(
				request.Source,
				"{{$.PackageName}}",
				"{{.Name}}",
				"{{.Input}}",
				"{{.Output}}",
				err,
				start,
			),
		)
	}(time.Now())
	if err := a.authorizer.Authorize(request.Source); err != nil {
		return nil, err
	}
	return a.server.{{.Name}}(ctx, request)
}
{{ end }}`)
)
