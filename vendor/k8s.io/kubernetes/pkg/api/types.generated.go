/*
Copyright 2015 The Kubernetes Authors All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	pkg4_inf "speter.net/go/exp/math/dec/inf"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_runtime.Object
		var v3 pkg1_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 pkg4_inf.Dec
		var v6 time.Time
		_, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [12]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(12)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym43 := z.DecBinary()
	_ = yym43
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct44 := r.ContainerType()
		if yyct44 == codecSelferValueTypeMap1234 {
			yyl44 := r.ReadMapStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl44, d)
			}
		} else if yyct44 == codecSelferValueTypeArray1234 {
			yyl44 := r.ReadArrayStart()
			if yyl44 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl44, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys45Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys45Slc
	var yyhl45 bool = l >= 0
	for yyj45 := 0; ; yyj45++ {
		if yyhl45 {
			if yyj45 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys45Slc = r.DecodeBytes(yys45Slc, true, true)
		yys45 := string(yys45Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys45 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv53 := &x.CreationTimestamp
				yym54 := z.DecBinary()
				_ = yym54
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv53) {
				} else if yym54 {
					z.DecBinaryUnmarshal(yyv53)
				} else if !yym54 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv53)
				} else {
					z.DecFallback(yyv53, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym56 := z.DecBinary()
				_ = yym56
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym56 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym56 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv59 := &x.Labels
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					z.F.DecMapStringStringX(yyv59, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv61 := &x.Annotations
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else {
					z.F.DecMapStringStringX(yyv61, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys45)
		} // end switch yys45
	} // end for yyj45
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv71 := &x.CreationTimestamp
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv71) {
		} else if yym72 {
			z.DecBinaryUnmarshal(yyv71)
		} else if !yym72 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv71)
		} else {
			z.DecFallback(yyv71, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym74 := z.DecBinary()
		_ = yym74
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym74 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym74 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv77 := &x.Labels
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else {
			z.F.DecMapStringStringX(yyv77, false, d)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv79 := &x.Annotations
		yym80 := z.DecBinary()
		_ = yym80
		if false {
		} else {
			z.F.DecMapStringStringX(yyv79, false, d)
		}
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [17]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq82[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq82[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq82[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq82[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq82[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq82[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq82[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq82[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq82[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq82[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq82[12] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq82[13] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq82[14] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq82[15] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq82[16] = x.VolumeSource.FC != nil && x.FC != nil
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(17)
			} else {
				yynn82 = 1
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn86 bool
			if x.VolumeSource.HostPath == nil {
				yyn86 = true
				goto LABEL86
			}
		LABEL86:
			if yyr82 || yy2arr82 {
				if yyn86 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn86 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn87 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn87 = true
				goto LABEL87
			}
		LABEL87:
			if yyr82 || yy2arr82 {
				if yyn87 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn87 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn88 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn88 = true
				goto LABEL88
			}
		LABEL88:
			if yyr82 || yy2arr82 {
				if yyn88 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn88 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn89 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn89 = true
				goto LABEL89
			}
		LABEL89:
			if yyr82 || yy2arr82 {
				if yyn89 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn89 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn90 bool
			if x.VolumeSource.GitRepo == nil {
				yyn90 = true
				goto LABEL90
			}
		LABEL90:
			if yyr82 || yy2arr82 {
				if yyn90 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn90 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn91 bool
			if x.VolumeSource.Secret == nil {
				yyn91 = true
				goto LABEL91
			}
		LABEL91:
			if yyr82 || yy2arr82 {
				if yyn91 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn91 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn92 bool
			if x.VolumeSource.NFS == nil {
				yyn92 = true
				goto LABEL92
			}
		LABEL92:
			if yyr82 || yy2arr82 {
				if yyn92 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn92 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn93 bool
			if x.VolumeSource.ISCSI == nil {
				yyn93 = true
				goto LABEL93
			}
		LABEL93:
			if yyr82 || yy2arr82 {
				if yyn93 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn93 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn94 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn94 = true
				goto LABEL94
			}
		LABEL94:
			if yyr82 || yy2arr82 {
				if yyn94 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn94 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn95 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn95 = true
				goto LABEL95
			}
		LABEL95:
			if yyr82 || yy2arr82 {
				if yyn95 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn95 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn96 bool
			if x.VolumeSource.RBD == nil {
				yyn96 = true
				goto LABEL96
			}
		LABEL96:
			if yyr82 || yy2arr82 {
				if yyn96 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn96 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn97 bool
			if x.VolumeSource.Cinder == nil {
				yyn97 = true
				goto LABEL97
			}
		LABEL97:
			if yyr82 || yy2arr82 {
				if yyn97 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[12] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn97 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn98 bool
			if x.VolumeSource.CephFS == nil {
				yyn98 = true
				goto LABEL98
			}
		LABEL98:
			if yyr82 || yy2arr82 {
				if yyn98 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[13] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn98 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn99 bool
			if x.VolumeSource.Flocker == nil {
				yyn99 = true
				goto LABEL99
			}
		LABEL99:
			if yyr82 || yy2arr82 {
				if yyn99 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[14] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn99 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn100 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr82 || yy2arr82 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[15] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.FC == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr82 || yy2arr82 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq82[16] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq82[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym102 := z.DecBinary()
	_ = yym102
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct103 := r.ContainerType()
		if yyct103 == codecSelferValueTypeMap1234 {
			yyl103 := r.ReadMapStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl103, d)
			}
		} else if yyct103 == codecSelferValueTypeArray1234 {
			yyl103 := r.ReadArrayStart()
			if yyl103 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl103, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys104Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys104Slc
	var yyhl104 bool = l >= 0
	for yyj104 := 0; ; yyj104++ {
		if yyhl104 {
			if yyj104 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys104Slc = r.DecodeBytes(yys104Slc, true, true)
		yys104 := string(yys104Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys104 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys104)
		} // end switch yys104
	} // end for yyj104
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj122 int
	var yyb122 bool
	var yyhl122 bool = l >= 0
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj122++
	if yyhl122 {
		yyb122 = yyj122 > l
	} else {
		yyb122 = r.CheckBreak()
	}
	if yyb122 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj122++
		if yyhl122 {
			yyb122 = yyj122 > l
		} else {
			yyb122 = r.CheckBreak()
		}
		if yyb122 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj122-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym140 := z.EncBinary()
		_ = yym140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep141 := !z.EncBinary()
			yy2arr141 := z.EncBasicHandle().StructToArray
			var yyq141 [16]bool
			_, _, _ = yysep141, yyq141, yy2arr141
			const yyr141 bool = false
			yyq141[0] = x.HostPath != nil
			yyq141[1] = x.EmptyDir != nil
			yyq141[2] = x.GCEPersistentDisk != nil
			yyq141[3] = x.AWSElasticBlockStore != nil
			yyq141[4] = x.GitRepo != nil
			yyq141[5] = x.Secret != nil
			yyq141[6] = x.NFS != nil
			yyq141[7] = x.ISCSI != nil
			yyq141[8] = x.Glusterfs != nil
			yyq141[9] = x.PersistentVolumeClaim != nil
			yyq141[10] = x.RBD != nil
			yyq141[11] = x.Cinder != nil
			yyq141[12] = x.CephFS != nil
			yyq141[13] = x.Flocker != nil
			yyq141[14] = x.DownwardAPI != nil
			yyq141[15] = x.FC != nil
			var yynn141 int
			if yyr141 || yy2arr141 {
				r.EncodeArrayStart(16)
			} else {
				yynn141 = 0
				for _, b := range yyq141 {
					if b {
						yynn141++
					}
				}
				r.EncodeMapStart(yynn141)
				yynn141 = 0
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[11] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[12] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[13] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[14] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq141[15] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq141[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr141 || yy2arr141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym158 := z.DecBinary()
	_ = yym158
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct159 := r.ContainerType()
		if yyct159 == codecSelferValueTypeMap1234 {
			yyl159 := r.ReadMapStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl159, d)
			}
		} else if yyct159 == codecSelferValueTypeArray1234 {
			yyl159 := r.ReadArrayStart()
			if yyl159 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl159, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys160Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys160Slc
	var yyhl160 bool = l >= 0
	for yyj160 := 0; ; yyj160++ {
		if yyhl160 {
			if yyj160 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys160Slc = r.DecodeBytes(yys160Slc, true, true)
		yys160 := string(yys160Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys160 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys160)
		} // end switch yys160
	} // end for yyj160
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj177 int
	var yyb177 bool
	var yyhl177 bool = l >= 0
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj177++
	if yyhl177 {
		yyb177 = yyj177 > l
	} else {
		yyb177 = r.CheckBreak()
	}
	if yyb177 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	for {
		yyj177++
		if yyhl177 {
			yyb177 = yyj177 > l
		} else {
			yyb177 = r.CheckBreak()
		}
		if yyb177 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj177-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym194 := z.EncBinary()
		_ = yym194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep195 := !z.EncBinary()
			yy2arr195 := z.EncBasicHandle().StructToArray
			var yyq195 [11]bool
			_, _, _ = yysep195, yyq195, yy2arr195
			const yyr195 bool = false
			yyq195[0] = x.GCEPersistentDisk != nil
			yyq195[1] = x.AWSElasticBlockStore != nil
			yyq195[2] = x.HostPath != nil
			yyq195[3] = x.Glusterfs != nil
			yyq195[4] = x.NFS != nil
			yyq195[5] = x.RBD != nil
			yyq195[6] = x.ISCSI != nil
			yyq195[7] = x.Cinder != nil
			yyq195[8] = x.CephFS != nil
			yyq195[9] = x.FC != nil
			yyq195[10] = x.Flocker != nil
			var yynn195 int
			if yyr195 || yy2arr195 {
				r.EncodeArrayStart(11)
			} else {
				yynn195 = 0
				for _, b := range yyq195 {
					if b {
						yynn195++
					}
				}
				r.EncodeMapStart(yynn195)
				yynn195 = 0
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[6] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[7] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[8] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[9] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq195[10] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq195[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr195 || yy2arr195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym207 := z.DecBinary()
	_ = yym207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct208 := r.ContainerType()
		if yyct208 == codecSelferValueTypeMap1234 {
			yyl208 := r.ReadMapStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl208, d)
			}
		} else if yyct208 == codecSelferValueTypeArray1234 {
			yyl208 := r.ReadArrayStart()
			if yyl208 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl208, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys209Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys209Slc
	var yyhl209 bool = l >= 0
	for yyj209 := 0; ; yyj209++ {
		if yyhl209 {
			if yyj209 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys209Slc = r.DecodeBytes(yys209Slc, true, true)
		yys209 := string(yys209Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys209 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys209)
		} // end switch yys209
	} // end for yyj209
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj221 int
	var yyb221 bool
	var yyhl221 bool = l >= 0
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj221++
	if yyhl221 {
		yyb221 = yyj221 > l
	} else {
		yyb221 = r.CheckBreak()
	}
	if yyb221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	for {
		yyj221++
		if yyhl221 {
			yyb221 = yyj221 > l
		} else {
			yyb221 = r.CheckBreak()
		}
		if yyb221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym233 := z.EncBinary()
		_ = yym233
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep234 := !z.EncBinary()
			yy2arr234 := z.EncBasicHandle().StructToArray
			var yyq234 [2]bool
			_, _, _ = yysep234, yyq234, yy2arr234
			const yyr234 bool = false
			yyq234[1] = x.ReadOnly != false
			var yynn234 int
			if yyr234 || yy2arr234 {
				r.EncodeArrayStart(2)
			} else {
				yynn234 = 1
				for _, b := range yyq234 {
					if b {
						yynn234++
					}
				}
				r.EncodeMapStart(yynn234)
				yynn234 = 0
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym236 := z.EncBinary()
				_ = yym236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym237 := z.EncBinary()
				_ = yym237
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq234[1] {
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq234[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr234 || yy2arr234 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym241 := z.DecBinary()
	_ = yym241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct242 := r.ContainerType()
		if yyct242 == codecSelferValueTypeMap1234 {
			yyl242 := r.ReadMapStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl242, d)
			}
		} else if yyct242 == codecSelferValueTypeArray1234 {
			yyl242 := r.ReadArrayStart()
			if yyl242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys243Slc
	var yyhl243 bool = l >= 0
	for yyj243 := 0; ; yyj243++ {
		if yyhl243 {
			if yyj243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys243Slc = r.DecodeBytes(yys243Slc, true, true)
		yys243 := string(yys243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys243 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys243)
		} // end switch yys243
	} // end for yyj243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj246 int
	var yyb246 bool
	var yyhl246 bool = l >= 0
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj246++
	if yyhl246 {
		yyb246 = yyj246 > l
	} else {
		yyb246 = r.CheckBreak()
	}
	if yyb246 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj246++
		if yyhl246 {
			yyb246 = yyj246 > l
		} else {
			yyb246 = r.CheckBreak()
		}
		if yyb246 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj246-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym249 := z.EncBinary()
		_ = yym249
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep250 := !z.EncBinary()
			yy2arr250 := z.EncBasicHandle().StructToArray
			var yyq250 [5]bool
			_, _, _ = yysep250, yyq250, yy2arr250
			const yyr250 bool = false
			yyq250[0] = x.Kind != ""
			yyq250[1] = x.APIVersion != ""
			yyq250[2] = true
			yyq250[3] = true
			yyq250[4] = true
			var yynn250 int
			if yyr250 || yy2arr250 {
				r.EncodeArrayStart(5)
			} else {
				yynn250 = 0
				for _, b := range yyq250 {
					if b {
						yynn250++
					}
				}
				r.EncodeMapStart(yynn250)
				yynn250 = 0
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[0] {
					yym252 := z.EncBinary()
					_ = yym252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym253 := z.EncBinary()
					_ = yym253
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[1] {
					yym255 := z.EncBinary()
					_ = yym255
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq250[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym256 := z.EncBinary()
					_ = yym256
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[2] {
					yy258 := &x.ObjectMeta
					yy258.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy259 := &x.ObjectMeta
					yy259.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[3] {
					yy261 := &x.Spec
					yy261.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy262 := &x.Spec
					yy262.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq250[4] {
					yy264 := &x.Status
					yy264.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq250[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy265 := &x.Status
					yy265.CodecEncodeSelf(e)
				}
			}
			if yyr250 || yy2arr250 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym266 := z.DecBinary()
	_ = yym266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct267 := r.ContainerType()
		if yyct267 == codecSelferValueTypeMap1234 {
			yyl267 := r.ReadMapStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl267, d)
			}
		} else if yyct267 == codecSelferValueTypeArray1234 {
			yyl267 := r.ReadArrayStart()
			if yyl267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys268Slc
	var yyhl268 bool = l >= 0
	for yyj268 := 0; ; yyj268++ {
		if yyhl268 {
			if yyj268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys268Slc = r.DecodeBytes(yys268Slc, true, true)
		yys268 := string(yys268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys268 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv271 := &x.ObjectMeta
				yyv271.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv272 := &x.Spec
				yyv272.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv273 := &x.Status
				yyv273.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys268)
		} // end switch yys268
	} // end for yyj268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj274 int
	var yyb274 bool
	var yyhl274 bool = l >= 0
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv277 := &x.ObjectMeta
		yyv277.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv278 := &x.Spec
		yyv278.CodecDecodeSelf(d)
	}
	yyj274++
	if yyhl274 {
		yyb274 = yyj274 > l
	} else {
		yyb274 = r.CheckBreak()
	}
	if yyb274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv279 := &x.Status
		yyv279.CodecDecodeSelf(d)
	}
	for {
		yyj274++
		if yyhl274 {
			yyb274 = yyj274 > l
		} else {
			yyb274 = r.CheckBreak()
		}
		if yyb274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym280 := z.EncBinary()
		_ = yym280
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep281 := !z.EncBinary()
			yy2arr281 := z.EncBasicHandle().StructToArray
			var yyq281 [15]bool
			_, _, _ = yysep281, yyq281, yy2arr281
			const yyr281 bool = false
			yyq281[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq281[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq281[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq281[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq281[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq281[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq281[7] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq281[8] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq281[9] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq281[10] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq281[11] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq281[12] = len(x.AccessModes) != 0
			yyq281[13] = x.ClaimRef != nil
			yyq281[14] = x.PersistentVolumeReclaimPolicy != ""
			var yynn281 int
			if yyr281 || yy2arr281 {
				r.EncodeArrayStart(15)
			} else {
				yynn281 = 1
				for _, b := range yyq281 {
					if b {
						yynn281++
					}
				}
				r.EncodeMapStart(yynn281)
				yynn281 = 0
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn283 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn283 = true
				goto LABEL283
			}
		LABEL283:
			if yyr281 || yy2arr281 {
				if yyn283 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn283 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn284 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn284 = true
				goto LABEL284
			}
		LABEL284:
			if yyr281 || yy2arr281 {
				if yyn284 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn284 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn285 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn285 = true
				goto LABEL285
			}
		LABEL285:
			if yyr281 || yy2arr281 {
				if yyn285 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn285 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn286 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn286 = true
				goto LABEL286
			}
		LABEL286:
			if yyr281 || yy2arr281 {
				if yyn286 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn286 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn287 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn287 = true
				goto LABEL287
			}
		LABEL287:
			if yyr281 || yy2arr281 {
				if yyn287 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn287 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn288 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn288 = true
				goto LABEL288
			}
		LABEL288:
			if yyr281 || yy2arr281 {
				if yyn288 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn288 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn289 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn289 = true
				goto LABEL289
			}
		LABEL289:
			if yyr281 || yy2arr281 {
				if yyn289 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[7] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn289 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn290 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn290 = true
				goto LABEL290
			}
		LABEL290:
			if yyr281 || yy2arr281 {
				if yyn290 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[8] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn290 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn291 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn291 = true
				goto LABEL291
			}
		LABEL291:
			if yyr281 || yy2arr281 {
				if yyn291 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[9] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn291 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn292 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn292 = true
				goto LABEL292
			}
		LABEL292:
			if yyr281 || yy2arr281 {
				if yyn292 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[10] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn292 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn293 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn293 = true
				goto LABEL293
			}
		LABEL293:
			if yyr281 || yy2arr281 {
				if yyn293 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq281[11] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq281[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn293 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[12] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym295 := z.EncBinary()
						_ = yym295
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym296 := z.EncBinary()
						_ = yym296
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[13] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq281[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq281[14] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq281[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr281 || yy2arr281 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym299 := z.DecBinary()
	_ = yym299
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct300 := r.ContainerType()
		if yyct300 == codecSelferValueTypeMap1234 {
			yyl300 := r.ReadMapStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl300, d)
			}
		} else if yyct300 == codecSelferValueTypeArray1234 {
			yyl300 := r.ReadArrayStart()
			if yyl300 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl300, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys301Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys301Slc
	var yyhl301 bool = l >= 0
	for yyj301 := 0; ; yyj301++ {
		if yyhl301 {
			if yyj301 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys301Slc = r.DecodeBytes(yys301Slc, true, true)
		yys301 := string(yys301Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys301 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv302 := &x.Capacity
				yyv302.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv314 := &x.AccessModes
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv314), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys301)
		} // end switch yys301
	} // end for yyj301
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv319 := &x.Capacity
		yyv319.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv331 := &x.AccessModes
		yym332 := z.DecBinary()
		_ = yym332
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv331), d)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym335 := z.EncBinary()
	_ = yym335
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym336 := z.DecBinary()
	_ = yym336
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym337 := z.EncBinary()
		_ = yym337
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep338 := !z.EncBinary()
			yy2arr338 := z.EncBasicHandle().StructToArray
			var yyq338 [3]bool
			_, _, _ = yysep338, yyq338, yy2arr338
			const yyr338 bool = false
			yyq338[0] = x.Phase != ""
			yyq338[1] = x.Message != ""
			yyq338[2] = x.Reason != ""
			var yynn338 int
			if yyr338 || yy2arr338 {
				r.EncodeArrayStart(3)
			} else {
				yynn338 = 0
				for _, b := range yyq338 {
					if b {
						yynn338++
					}
				}
				r.EncodeMapStart(yynn338)
				yynn338 = 0
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[1] {
					yym341 := z.EncBinary()
					_ = yym341
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq338[2] {
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq338[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym345 := z.EncBinary()
					_ = yym345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr338 || yy2arr338 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym346 := z.DecBinary()
	_ = yym346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct347 := r.ContainerType()
		if yyct347 == codecSelferValueTypeMap1234 {
			yyl347 := r.ReadMapStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl347, d)
			}
		} else if yyct347 == codecSelferValueTypeArray1234 {
			yyl347 := r.ReadArrayStart()
			if yyl347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys348Slc
	var yyhl348 bool = l >= 0
	for yyj348 := 0; ; yyj348++ {
		if yyhl348 {
			if yyj348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys348Slc = r.DecodeBytes(yys348Slc, true, true)
		yys348 := string(yys348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys348 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys348)
		} // end switch yys348
	} // end for yyj348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj352 int
	var yyb352 bool
	var yyhl352 bool = l >= 0
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj352++
	if yyhl352 {
		yyb352 = yyj352 > l
	} else {
		yyb352 = r.CheckBreak()
	}
	if yyb352 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj352++
		if yyhl352 {
			yyb352 = yyj352 > l
		} else {
			yyb352 = r.CheckBreak()
		}
		if yyb352 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj352-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym356 := z.EncBinary()
		_ = yym356
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep357 := !z.EncBinary()
			yy2arr357 := z.EncBasicHandle().StructToArray
			var yyq357 [4]bool
			_, _, _ = yysep357, yyq357, yy2arr357
			const yyr357 bool = false
			yyq357[0] = x.Kind != ""
			yyq357[1] = x.APIVersion != ""
			yyq357[2] = true
			var yynn357 int
			if yyr357 || yy2arr357 {
				r.EncodeArrayStart(4)
			} else {
				yynn357 = 1
				for _, b := range yyq357 {
					if b {
						yynn357++
					}
				}
				r.EncodeMapStart(yynn357)
				yynn357 = 0
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[0] {
					yym359 := z.EncBinary()
					_ = yym359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym360 := z.EncBinary()
					_ = yym360
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[1] {
					yym362 := z.EncBinary()
					_ = yym362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq357[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym363 := z.EncBinary()
					_ = yym363
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq357[2] {
					yy365 := &x.ListMeta
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy365) {
					} else {
						z.EncFallback(yy365)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq357[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy367 := &x.ListMeta
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else if z.HasExtensions() && z.EncExt(yy367) {
					} else {
						z.EncFallback(yy367)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym370 := z.EncBinary()
					_ = yym370
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym371 := z.EncBinary()
					_ = yym371
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr357 || yy2arr357 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym372 := z.DecBinary()
	_ = yym372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct373 := r.ContainerType()
		if yyct373 == codecSelferValueTypeMap1234 {
			yyl373 := r.ReadMapStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl373, d)
			}
		} else if yyct373 == codecSelferValueTypeArray1234 {
			yyl373 := r.ReadArrayStart()
			if yyl373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys374Slc
	var yyhl374 bool = l >= 0
	for yyj374 := 0; ; yyj374++ {
		if yyhl374 {
			if yyj374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys374Slc = r.DecodeBytes(yys374Slc, true, true)
		yys374 := string(yys374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys374 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv377 := &x.ListMeta
				yym378 := z.DecBinary()
				_ = yym378
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv377) {
				} else {
					z.DecFallback(yyv377, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv379 := &x.Items
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv379), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys374)
		} // end switch yys374
	} // end for yyj374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj381 int
	var yyb381 bool
	var yyhl381 bool = l >= 0
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv384 := &x.ListMeta
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv384) {
		} else {
			z.DecFallback(yyv384, false)
		}
	}
	yyj381++
	if yyhl381 {
		yyb381 = yyj381 > l
	} else {
		yyb381 = r.CheckBreak()
	}
	if yyb381 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv386 := &x.Items
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv386), d)
		}
	}
	for {
		yyj381++
		if yyhl381 {
			yyb381 = yyj381 > l
		} else {
			yyb381 = r.CheckBreak()
		}
		if yyb381 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj381-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym388 := z.EncBinary()
		_ = yym388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep389 := !z.EncBinary()
			yy2arr389 := z.EncBasicHandle().StructToArray
			var yyq389 [5]bool
			_, _, _ = yysep389, yyq389, yy2arr389
			const yyr389 bool = false
			yyq389[0] = x.Kind != ""
			yyq389[1] = x.APIVersion != ""
			yyq389[2] = true
			yyq389[3] = true
			yyq389[4] = true
			var yynn389 int
			if yyr389 || yy2arr389 {
				r.EncodeArrayStart(5)
			} else {
				yynn389 = 0
				for _, b := range yyq389 {
					if b {
						yynn389++
					}
				}
				r.EncodeMapStart(yynn389)
				yynn389 = 0
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[0] {
					yym391 := z.EncBinary()
					_ = yym391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym392 := z.EncBinary()
					_ = yym392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[1] {
					yym394 := z.EncBinary()
					_ = yym394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym395 := z.EncBinary()
					_ = yym395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[2] {
					yy397 := &x.ObjectMeta
					yy397.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy398 := &x.ObjectMeta
					yy398.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[3] {
					yy400 := &x.Spec
					yy400.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy401 := &x.Spec
					yy401.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq389[4] {
					yy403 := &x.Status
					yy403.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq389[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy404 := &x.Status
					yy404.CodecEncodeSelf(e)
				}
			}
			if yyr389 || yy2arr389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct406 := r.ContainerType()
		if yyct406 == codecSelferValueTypeMap1234 {
			yyl406 := r.ReadMapStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl406, d)
			}
		} else if yyct406 == codecSelferValueTypeArray1234 {
			yyl406 := r.ReadArrayStart()
			if yyl406 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl406, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys407Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys407Slc
	var yyhl407 bool = l >= 0
	for yyj407 := 0; ; yyj407++ {
		if yyhl407 {
			if yyj407 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys407Slc = r.DecodeBytes(yys407Slc, true, true)
		yys407 := string(yys407Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys407 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv410 := &x.ObjectMeta
				yyv410.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv411 := &x.Spec
				yyv411.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv412 := &x.Status
				yyv412.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys407)
		} // end switch yys407
	} // end for yyj407
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj413 int
	var yyb413 bool
	var yyhl413 bool = l >= 0
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv416 := &x.ObjectMeta
		yyv416.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv417 := &x.Spec
		yyv417.CodecDecodeSelf(d)
	}
	yyj413++
	if yyhl413 {
		yyb413 = yyj413 > l
	} else {
		yyb413 = r.CheckBreak()
	}
	if yyb413 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv418 := &x.Status
		yyv418.CodecDecodeSelf(d)
	}
	for {
		yyj413++
		if yyhl413 {
			yyb413 = yyj413 > l
		} else {
			yyb413 = r.CheckBreak()
		}
		if yyb413 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj413-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym419 := z.EncBinary()
		_ = yym419
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep420 := !z.EncBinary()
			yy2arr420 := z.EncBasicHandle().StructToArray
			var yyq420 [4]bool
			_, _, _ = yysep420, yyq420, yy2arr420
			const yyr420 bool = false
			yyq420[0] = x.Kind != ""
			yyq420[1] = x.APIVersion != ""
			yyq420[2] = true
			var yynn420 int
			if yyr420 || yy2arr420 {
				r.EncodeArrayStart(4)
			} else {
				yynn420 = 1
				for _, b := range yyq420 {
					if b {
						yynn420++
					}
				}
				r.EncodeMapStart(yynn420)
				yynn420 = 0
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[0] {
					yym422 := z.EncBinary()
					_ = yym422
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym423 := z.EncBinary()
					_ = yym423
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[1] {
					yym425 := z.EncBinary()
					_ = yym425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq420[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym426 := z.EncBinary()
					_ = yym426
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq420[2] {
					yy428 := &x.ListMeta
					yym429 := z.EncBinary()
					_ = yym429
					if false {
					} else if z.HasExtensions() && z.EncExt(yy428) {
					} else {
						z.EncFallback(yy428)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq420[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy430 := &x.ListMeta
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else if z.HasExtensions() && z.EncExt(yy430) {
					} else {
						z.EncFallback(yy430)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr420 || yy2arr420 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym435 := z.DecBinary()
	_ = yym435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct436 := r.ContainerType()
		if yyct436 == codecSelferValueTypeMap1234 {
			yyl436 := r.ReadMapStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl436, d)
			}
		} else if yyct436 == codecSelferValueTypeArray1234 {
			yyl436 := r.ReadArrayStart()
			if yyl436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys437Slc
	var yyhl437 bool = l >= 0
	for yyj437 := 0; ; yyj437++ {
		if yyhl437 {
			if yyj437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys437Slc = r.DecodeBytes(yys437Slc, true, true)
		yys437 := string(yys437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys437 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv440 := &x.ListMeta
				yym441 := z.DecBinary()
				_ = yym441
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv440) {
				} else {
					z.DecFallback(yyv440, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv442 := &x.Items
				yym443 := z.DecBinary()
				_ = yym443
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv442), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys437)
		} // end switch yys437
	} // end for yyj437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj444 int
	var yyb444 bool
	var yyhl444 bool = l >= 0
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv447 := &x.ListMeta
		yym448 := z.DecBinary()
		_ = yym448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv447) {
		} else {
			z.DecFallback(yyv447, false)
		}
	}
	yyj444++
	if yyhl444 {
		yyb444 = yyj444 > l
	} else {
		yyb444 = r.CheckBreak()
	}
	if yyb444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv449 := &x.Items
		yym450 := z.DecBinary()
		_ = yym450
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv449), d)
		}
	}
	for {
		yyj444++
		if yyhl444 {
			yyb444 = yyj444 > l
		} else {
			yyb444 = r.CheckBreak()
		}
		if yyb444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym451 := z.EncBinary()
		_ = yym451
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep452 := !z.EncBinary()
			yy2arr452 := z.EncBasicHandle().StructToArray
			var yyq452 [3]bool
			_, _, _ = yysep452, yyq452, yy2arr452
			const yyr452 bool = false
			yyq452[0] = len(x.AccessModes) != 0
			yyq452[1] = true
			yyq452[2] = x.VolumeName != ""
			var yynn452 int
			if yyr452 || yy2arr452 {
				r.EncodeArrayStart(3)
			} else {
				yynn452 = 0
				for _, b := range yyq452 {
					if b {
						yynn452++
					}
				}
				r.EncodeMapStart(yynn452)
				yynn452 = 0
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym454 := z.EncBinary()
						_ = yym454
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym455 := z.EncBinary()
						_ = yym455
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[1] {
					yy457 := &x.Resources
					yy457.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq452[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy458 := &x.Resources
					yy458.CodecEncodeSelf(e)
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq452[2] {
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq452[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym461 := z.EncBinary()
					_ = yym461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr452 || yy2arr452 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym462 := z.DecBinary()
	_ = yym462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct463 := r.ContainerType()
		if yyct463 == codecSelferValueTypeMap1234 {
			yyl463 := r.ReadMapStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl463, d)
			}
		} else if yyct463 == codecSelferValueTypeArray1234 {
			yyl463 := r.ReadArrayStart()
			if yyl463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys464Slc
	var yyhl464 bool = l >= 0
	for yyj464 := 0; ; yyj464++ {
		if yyhl464 {
			if yyj464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys464Slc = r.DecodeBytes(yys464Slc, true, true)
		yys464 := string(yys464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys464 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv465 := &x.AccessModes
				yym466 := z.DecBinary()
				_ = yym466
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv465), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv467 := &x.Resources
				yyv467.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys464)
		} // end switch yys464
	} // end for yyj464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj469 int
	var yyb469 bool
	var yyhl469 bool = l >= 0
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv470 := &x.AccessModes
		yym471 := z.DecBinary()
		_ = yym471
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv470), d)
		}
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv472 := &x.Resources
		yyv472.CodecDecodeSelf(d)
	}
	yyj469++
	if yyhl469 {
		yyb469 = yyj469 > l
	} else {
		yyb469 = r.CheckBreak()
	}
	if yyb469 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj469++
		if yyhl469 {
			yyb469 = yyj469 > l
		} else {
			yyb469 = r.CheckBreak()
		}
		if yyb469 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj469-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym474 := z.EncBinary()
		_ = yym474
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep475 := !z.EncBinary()
			yy2arr475 := z.EncBasicHandle().StructToArray
			var yyq475 [3]bool
			_, _, _ = yysep475, yyq475, yy2arr475
			const yyr475 bool = false
			yyq475[0] = x.Phase != ""
			yyq475[1] = len(x.AccessModes) != 0
			yyq475[2] = len(x.Capacity) != 0
			var yynn475 int
			if yyr475 || yy2arr475 {
				r.EncodeArrayStart(3)
			} else {
				yynn475 = 0
				for _, b := range yyq475 {
					if b {
						yynn475++
					}
				}
				r.EncodeMapStart(yynn475)
				yynn475 = 0
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq475[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym479 := z.EncBinary()
						_ = yym479
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq475[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq475[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr475 || yy2arr475 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym481 := z.DecBinary()
	_ = yym481
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct482 := r.ContainerType()
		if yyct482 == codecSelferValueTypeMap1234 {
			yyl482 := r.ReadMapStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl482, d)
			}
		} else if yyct482 == codecSelferValueTypeArray1234 {
			yyl482 := r.ReadArrayStart()
			if yyl482 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl482, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys483Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys483Slc
	var yyhl483 bool = l >= 0
	for yyj483 := 0; ; yyj483++ {
		if yyhl483 {
			if yyj483 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys483Slc = r.DecodeBytes(yys483Slc, true, true)
		yys483 := string(yys483Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys483 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv485 := &x.AccessModes
				yym486 := z.DecBinary()
				_ = yym486
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv485), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv487 := &x.Capacity
				yyv487.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys483)
		} // end switch yys483
	} // end for yyj483
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj488 int
	var yyb488 bool
	var yyhl488 bool = l >= 0
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv490 := &x.AccessModes
		yym491 := z.DecBinary()
		_ = yym491
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv490), d)
		}
	}
	yyj488++
	if yyhl488 {
		yyb488 = yyj488 > l
	} else {
		yyb488 = r.CheckBreak()
	}
	if yyb488 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv492 := &x.Capacity
		yyv492.CodecDecodeSelf(d)
	}
	for {
		yyj488++
		if yyhl488 {
			yyb488 = yyj488 > l
		} else {
			yyb488 = r.CheckBreak()
		}
		if yyb488 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj488-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym493 := z.EncBinary()
	_ = yym493
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym494 := z.DecBinary()
	_ = yym494
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym495 := z.EncBinary()
	_ = yym495
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym496 := z.DecBinary()
	_ = yym496
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym497 := z.EncBinary()
	_ = yym497
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym498 := z.DecBinary()
	_ = yym498
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym499 := z.EncBinary()
		_ = yym499
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep500 := !z.EncBinary()
			yy2arr500 := z.EncBasicHandle().StructToArray
			var yyq500 [1]bool
			_, _, _ = yysep500, yyq500, yy2arr500
			const yyr500 bool = false
			var yynn500 int
			if yyr500 || yy2arr500 {
				r.EncodeArrayStart(1)
			} else {
				yynn500 = 1
				for _, b := range yyq500 {
					if b {
						yynn500++
					}
				}
				r.EncodeMapStart(yynn500)
				yynn500 = 0
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym503 := z.EncBinary()
				_ = yym503
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr500 || yy2arr500 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym504 := z.DecBinary()
	_ = yym504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct505 := r.ContainerType()
		if yyct505 == codecSelferValueTypeMap1234 {
			yyl505 := r.ReadMapStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl505, d)
			}
		} else if yyct505 == codecSelferValueTypeArray1234 {
			yyl505 := r.ReadArrayStart()
			if yyl505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys506Slc
	var yyhl506 bool = l >= 0
	for yyj506 := 0; ; yyj506++ {
		if yyhl506 {
			if yyj506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys506Slc = r.DecodeBytes(yys506Slc, true, true)
		yys506 := string(yys506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys506 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys506)
		} // end switch yys506
	} // end for yyj506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj508 int
	var yyb508 bool
	var yyhl508 bool = l >= 0
	yyj508++
	if yyhl508 {
		yyb508 = yyj508 > l
	} else {
		yyb508 = r.CheckBreak()
	}
	if yyb508 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj508++
		if yyhl508 {
			yyb508 = yyj508 > l
		} else {
			yyb508 = r.CheckBreak()
		}
		if yyb508 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj508-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym510 := z.EncBinary()
		_ = yym510
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep511 := !z.EncBinary()
			yy2arr511 := z.EncBasicHandle().StructToArray
			var yyq511 [1]bool
			_, _, _ = yysep511, yyq511, yy2arr511
			const yyr511 bool = false
			var yynn511 int
			if yyr511 || yy2arr511 {
				r.EncodeArrayStart(1)
			} else {
				yynn511 = 1
				for _, b := range yyq511 {
					if b {
						yynn511++
					}
				}
				r.EncodeMapStart(yynn511)
				yynn511 = 0
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Medium.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("medium"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Medium.CodecEncodeSelf(e)
			}
			if yyr511 || yy2arr511 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym513 := z.DecBinary()
	_ = yym513
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct514 := r.ContainerType()
		if yyct514 == codecSelferValueTypeMap1234 {
			yyl514 := r.ReadMapStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl514, d)
			}
		} else if yyct514 == codecSelferValueTypeArray1234 {
			yyl514 := r.ReadArrayStart()
			if yyl514 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl514, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys515Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys515Slc
	var yyhl515 bool = l >= 0
	for yyj515 := 0; ; yyj515++ {
		if yyhl515 {
			if yyj515 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys515Slc = r.DecodeBytes(yys515Slc, true, true)
		yys515 := string(yys515Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys515 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys515)
		} // end switch yys515
	} // end for yyj515
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj517 int
	var yyb517 bool
	var yyhl517 bool = l >= 0
	yyj517++
	if yyhl517 {
		yyb517 = yyj517 > l
	} else {
		yyb517 = r.CheckBreak()
	}
	if yyb517 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj517++
		if yyhl517 {
			yyb517 = yyj517 > l
		} else {
			yyb517 = r.CheckBreak()
		}
		if yyb517 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj517-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym519 := z.EncBinary()
	_ = yym519
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym520 := z.DecBinary()
	_ = yym520
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym521 := z.EncBinary()
	_ = yym521
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym522 := z.DecBinary()
	_ = yym522
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym523 := z.EncBinary()
		_ = yym523
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep524 := !z.EncBinary()
			yy2arr524 := z.EncBasicHandle().StructToArray
			var yyq524 [4]bool
			_, _, _ = yysep524, yyq524, yy2arr524
			const yyr524 bool = false
			yyq524[1] = x.FSType != ""
			yyq524[2] = x.Partition != 0
			yyq524[3] = x.ReadOnly != false
			var yynn524 int
			if yyr524 || yy2arr524 {
				r.EncodeArrayStart(4)
			} else {
				yynn524 = 1
				for _, b := range yyq524 {
					if b {
						yynn524++
					}
				}
				r.EncodeMapStart(yynn524)
				yynn524 = 0
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym526 := z.EncBinary()
				_ = yym526
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[1] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq524[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[2] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq524[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq524[3] {
					yym535 := z.EncBinary()
					_ = yym535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq524[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym536 := z.EncBinary()
					_ = yym536
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr524 || yy2arr524 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym537 := z.DecBinary()
	_ = yym537
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct538 := r.ContainerType()
		if yyct538 == codecSelferValueTypeMap1234 {
			yyl538 := r.ReadMapStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl538, d)
			}
		} else if yyct538 == codecSelferValueTypeArray1234 {
			yyl538 := r.ReadArrayStart()
			if yyl538 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl538, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys539Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys539Slc
	var yyhl539 bool = l >= 0
	for yyj539 := 0; ; yyj539++ {
		if yyhl539 {
			if yyj539 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys539Slc = r.DecodeBytes(yys539Slc, true, true)
		yys539 := string(yys539Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys539 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys539)
		} // end switch yys539
	} // end for yyj539
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj544 int
	var yyb544 bool
	var yyhl544 bool = l >= 0
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj544++
	if yyhl544 {
		yyb544 = yyj544 > l
	} else {
		yyb544 = r.CheckBreak()
	}
	if yyb544 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj544++
		if yyhl544 {
			yyb544 = yyj544 > l
		} else {
			yyb544 = r.CheckBreak()
		}
		if yyb544 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj544-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [6]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.TargetPortal != ""
			yyq550[1] = x.IQN != ""
			yyq550[2] = x.Lun != 0
			yyq550[3] = x.ISCSIInterface != ""
			yyq550[4] = x.FSType != ""
			yyq550[5] = x.ReadOnly != false
			var yynn550 int
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(6)
			} else {
				yynn550 = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
				yynn550 = 0
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[0] {
					yym552 := z.EncBinary()
					_ = yym552
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[1] {
					yym555 := z.EncBinary()
					_ = yym555
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym556 := z.EncBinary()
					_ = yym556
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[2] {
					yym558 := z.EncBinary()
					_ = yym558
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym559 := z.EncBinary()
					_ = yym559
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[3] {
					yym561 := z.EncBinary()
					_ = yym561
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[4] {
					yym564 := z.EncBinary()
					_ = yym564
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym565 := z.EncBinary()
					_ = yym565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[5] {
					yym567 := z.EncBinary()
					_ = yym567
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq550[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym568 := z.EncBinary()
					_ = yym568
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym569 := z.DecBinary()
	_ = yym569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct570 := r.ContainerType()
		if yyct570 == codecSelferValueTypeMap1234 {
			yyl570 := r.ReadMapStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl570, d)
			}
		} else if yyct570 == codecSelferValueTypeArray1234 {
			yyl570 := r.ReadArrayStart()
			if yyl570 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl570, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys571Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys571Slc
	var yyhl571 bool = l >= 0
	for yyj571 := 0; ; yyj571++ {
		if yyhl571 {
			if yyj571 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys571Slc = r.DecodeBytes(yys571Slc, true, true)
		yys571 := string(yys571Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys571 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys571)
		} // end switch yys571
	} // end for yyj571
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj578 int
	var yyb578 bool
	var yyhl578 bool = l >= 0
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj578++
	if yyhl578 {
		yyb578 = yyj578 > l
	} else {
		yyb578 = r.CheckBreak()
	}
	if yyb578 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj578++
		if yyhl578 {
			yyb578 = yyj578 > l
		} else {
			yyb578 = r.CheckBreak()
		}
		if yyb578 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj578-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym585 := z.EncBinary()
		_ = yym585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep586 := !z.EncBinary()
			yy2arr586 := z.EncBasicHandle().StructToArray
			var yyq586 [4]bool
			_, _, _ = yysep586, yyq586, yy2arr586
			const yyr586 bool = false
			yyq586[3] = x.ReadOnly != false
			var yynn586 int
			if yyr586 || yy2arr586 {
				r.EncodeArrayStart(4)
			} else {
				yynn586 = 3
				for _, b := range yyq586 {
					if b {
						yynn586++
					}
				}
				r.EncodeMapStart(yynn586)
				yynn586 = 0
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym588 := z.EncBinary()
					_ = yym588
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym589 := z.EncBinary()
					_ = yym589
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy591 := *x.Lun
					yym592 := z.EncBinary()
					_ = yym592
					if false {
					} else {
						r.EncodeInt(int64(yy591))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy593 := *x.Lun
					yym594 := z.EncBinary()
					_ = yym594
					if false {
					} else {
						r.EncodeInt(int64(yy593))
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym596 := z.EncBinary()
				_ = yym596
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsType"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym597 := z.EncBinary()
				_ = yym597
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[3] {
					yym599 := z.EncBinary()
					_ = yym599
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq586[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym600 := z.EncBinary()
					_ = yym600
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym601 := z.DecBinary()
	_ = yym601
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct602 := r.ContainerType()
		if yyct602 == codecSelferValueTypeMap1234 {
			yyl602 := r.ReadMapStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl602, d)
			}
		} else if yyct602 == codecSelferValueTypeArray1234 {
			yyl602 := r.ReadArrayStart()
			if yyl602 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl602, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys603Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys603Slc
	var yyhl603 bool = l >= 0
	for yyj603 := 0; ; yyj603++ {
		if yyhl603 {
			if yyj603 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys603Slc = r.DecodeBytes(yys603Slc, true, true)
		yys603 := string(yys603Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys603 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv604 := &x.TargetWWNs
				yym605 := z.DecBinary()
				_ = yym605
				if false {
				} else {
					z.F.DecSliceStringX(yyv604, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int)
				}
				yym607 := z.DecBinary()
				_ = yym607
				if false {
				} else {
					*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys603)
		} // end switch yys603
	} // end for yyj603
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj610 int
	var yyb610 bool
	var yyhl610 bool = l >= 0
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv611 := &x.TargetWWNs
		yym612 := z.DecBinary()
		_ = yym612
		if false {
		} else {
			z.F.DecSliceStringX(yyv611, false, d)
		}
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int)
		}
		yym614 := z.DecBinary()
		_ = yym614
		if false {
		} else {
			*((*int)(x.Lun)) = int(r.DecodeInt(codecSelferBitsize1234))
		}
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj610++
	if yyhl610 {
		yyb610 = yyj610 > l
	} else {
		yyb610 = r.CheckBreak()
	}
	if yyb610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj610++
		if yyhl610 {
			yyb610 = yyj610 > l
		} else {
			yyb610 = r.CheckBreak()
		}
		if yyb610 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj610-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym617 := z.EncBinary()
		_ = yym617
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep618 := !z.EncBinary()
			yy2arr618 := z.EncBasicHandle().StructToArray
			var yyq618 [4]bool
			_, _, _ = yysep618, yyq618, yy2arr618
			const yyr618 bool = false
			yyq618[1] = x.FSType != ""
			yyq618[2] = x.Partition != 0
			yyq618[3] = x.ReadOnly != false
			var yynn618 int
			if yyr618 || yy2arr618 {
				r.EncodeArrayStart(4)
			} else {
				yynn618 = 1
				for _, b := range yyq618 {
					if b {
						yynn618++
					}
				}
				r.EncodeMapStart(yynn618)
				yynn618 = 0
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym620 := z.EncBinary()
				_ = yym620
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym621 := z.EncBinary()
				_ = yym621
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[1] {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq618[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym624 := z.EncBinary()
					_ = yym624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[2] {
					yym626 := z.EncBinary()
					_ = yym626
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq618[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq618[3] {
					yym629 := z.EncBinary()
					_ = yym629
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq618[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr618 || yy2arr618 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym631 := z.DecBinary()
	_ = yym631
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct632 := r.ContainerType()
		if yyct632 == codecSelferValueTypeMap1234 {
			yyl632 := r.ReadMapStart()
			if yyl632 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl632, d)
			}
		} else if yyct632 == codecSelferValueTypeArray1234 {
			yyl632 := r.ReadArrayStart()
			if yyl632 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl632, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys633Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys633Slc
	var yyhl633 bool = l >= 0
	for yyj633 := 0; ; yyj633++ {
		if yyhl633 {
			if yyj633 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys633Slc = r.DecodeBytes(yys633Slc, true, true)
		yys633 := string(yys633Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys633 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys633)
		} // end switch yys633
	} // end for yyj633
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj638 int
	var yyb638 bool
	var yyhl638 bool = l >= 0
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj638++
	if yyhl638 {
		yyb638 = yyj638 > l
	} else {
		yyb638 = r.CheckBreak()
	}
	if yyb638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj638++
		if yyhl638 {
			yyb638 = yyj638 > l
		} else {
			yyb638 = r.CheckBreak()
		}
		if yyb638 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj638-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym643 := z.EncBinary()
		_ = yym643
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep644 := !z.EncBinary()
			yy2arr644 := z.EncBasicHandle().StructToArray
			var yyq644 [3]bool
			_, _, _ = yysep644, yyq644, yy2arr644
			const yyr644 bool = false
			yyq644[1] = x.Revision != ""
			yyq644[2] = x.Directory != ""
			var yynn644 int
			if yyr644 || yy2arr644 {
				r.EncodeArrayStart(3)
			} else {
				yynn644 = 1
				for _, b := range yyq644 {
					if b {
						yynn644++
					}
				}
				r.EncodeMapStart(yynn644)
				yynn644 = 0
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym646 := z.EncBinary()
				_ = yym646
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym647 := z.EncBinary()
				_ = yym647
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[1] {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq644[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq644[2] {
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq644[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym653 := z.EncBinary()
					_ = yym653
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr644 || yy2arr644 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym654 := z.DecBinary()
	_ = yym654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct655 := r.ContainerType()
		if yyct655 == codecSelferValueTypeMap1234 {
			yyl655 := r.ReadMapStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl655, d)
			}
		} else if yyct655 == codecSelferValueTypeArray1234 {
			yyl655 := r.ReadArrayStart()
			if yyl655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys656Slc
	var yyhl656 bool = l >= 0
	for yyj656 := 0; ; yyj656++ {
		if yyhl656 {
			if yyj656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys656Slc = r.DecodeBytes(yys656Slc, true, true)
		yys656 := string(yys656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys656 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys656)
		} // end switch yys656
	} // end for yyj656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj660 int
	var yyb660 bool
	var yyhl660 bool = l >= 0
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj660++
		if yyhl660 {
			yyb660 = yyj660 > l
		} else {
			yyb660 = r.CheckBreak()
		}
		if yyb660 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj660-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym664 := z.EncBinary()
		_ = yym664
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep665 := !z.EncBinary()
			yy2arr665 := z.EncBasicHandle().StructToArray
			var yyq665 [1]bool
			_, _, _ = yysep665, yyq665, yy2arr665
			const yyr665 bool = false
			var yynn665 int
			if yyr665 || yy2arr665 {
				r.EncodeArrayStart(1)
			} else {
				yynn665 = 1
				for _, b := range yyq665 {
					if b {
						yynn665++
					}
				}
				r.EncodeMapStart(yynn665)
				yynn665 = 0
			}
			if yyr665 || yy2arr665 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym667 := z.EncBinary()
				_ = yym667
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym668 := z.EncBinary()
				_ = yym668
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr665 || yy2arr665 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym669 := z.DecBinary()
	_ = yym669
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct670 := r.ContainerType()
		if yyct670 == codecSelferValueTypeMap1234 {
			yyl670 := r.ReadMapStart()
			if yyl670 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl670, d)
			}
		} else if yyct670 == codecSelferValueTypeArray1234 {
			yyl670 := r.ReadArrayStart()
			if yyl670 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl670, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys671Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys671Slc
	var yyhl671 bool = l >= 0
	for yyj671 := 0; ; yyj671++ {
		if yyhl671 {
			if yyj671 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys671Slc = r.DecodeBytes(yys671Slc, true, true)
		yys671 := string(yys671Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys671 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys671)
		} // end switch yys671
	} // end for yyj671
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj673 int
	var yyb673 bool
	var yyhl673 bool = l >= 0
	yyj673++
	if yyhl673 {
		yyb673 = yyj673 > l
	} else {
		yyb673 = r.CheckBreak()
	}
	if yyb673 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj673++
		if yyhl673 {
			yyb673 = yyj673 > l
		} else {
			yyb673 = r.CheckBreak()
		}
		if yyb673 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj673-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym675 := z.EncBinary()
		_ = yym675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep676 := !z.EncBinary()
			yy2arr676 := z.EncBasicHandle().StructToArray
			var yyq676 [3]bool
			_, _, _ = yysep676, yyq676, yy2arr676
			const yyr676 bool = false
			yyq676[2] = x.ReadOnly != false
			var yynn676 int
			if yyr676 || yy2arr676 {
				r.EncodeArrayStart(3)
			} else {
				yynn676 = 2
				for _, b := range yyq676 {
					if b {
						yynn676++
					}
				}
				r.EncodeMapStart(yynn676)
				yynn676 = 0
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym678 := z.EncBinary()
				_ = yym678
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym679 := z.EncBinary()
				_ = yym679
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym681 := z.EncBinary()
				_ = yym681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym682 := z.EncBinary()
				_ = yym682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[2] {
					yym684 := z.EncBinary()
					_ = yym684
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq676[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym686 := z.DecBinary()
	_ = yym686
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct687 := r.ContainerType()
		if yyct687 == codecSelferValueTypeMap1234 {
			yyl687 := r.ReadMapStart()
			if yyl687 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl687, d)
			}
		} else if yyct687 == codecSelferValueTypeArray1234 {
			yyl687 := r.ReadArrayStart()
			if yyl687 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl687, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys688Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys688Slc
	var yyhl688 bool = l >= 0
	for yyj688 := 0; ; yyj688++ {
		if yyhl688 {
			if yyj688 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys688Slc = r.DecodeBytes(yys688Slc, true, true)
		yys688 := string(yys688Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys688 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys688)
		} // end switch yys688
	} // end for yyj688
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj692 int
	var yyb692 bool
	var yyhl692 bool = l >= 0
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj692++
	if yyhl692 {
		yyb692 = yyj692 > l
	} else {
		yyb692 = r.CheckBreak()
	}
	if yyb692 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj692++
		if yyhl692 {
			yyb692 = yyj692 > l
		} else {
			yyb692 = r.CheckBreak()
		}
		if yyb692 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj692-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym696 := z.EncBinary()
		_ = yym696
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep697 := !z.EncBinary()
			yy2arr697 := z.EncBasicHandle().StructToArray
			var yyq697 [3]bool
			_, _, _ = yysep697, yyq697, yy2arr697
			const yyr697 bool = false
			yyq697[2] = x.ReadOnly != false
			var yynn697 int
			if yyr697 || yy2arr697 {
				r.EncodeArrayStart(3)
			} else {
				yynn697 = 2
				for _, b := range yyq697 {
					if b {
						yynn697++
					}
				}
				r.EncodeMapStart(yynn697)
				yynn697 = 0
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym699 := z.EncBinary()
				_ = yym699
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym700 := z.EncBinary()
				_ = yym700
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym702 := z.EncBinary()
				_ = yym702
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym703 := z.EncBinary()
				_ = yym703
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq697[2] {
					yym705 := z.EncBinary()
					_ = yym705
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq697[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym706 := z.EncBinary()
					_ = yym706
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr697 || yy2arr697 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym707 := z.DecBinary()
	_ = yym707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct708 := r.ContainerType()
		if yyct708 == codecSelferValueTypeMap1234 {
			yyl708 := r.ReadMapStart()
			if yyl708 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl708, d)
			}
		} else if yyct708 == codecSelferValueTypeArray1234 {
			yyl708 := r.ReadArrayStart()
			if yyl708 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys709Slc
	var yyhl709 bool = l >= 0
	for yyj709 := 0; ; yyj709++ {
		if yyhl709 {
			if yyj709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys709Slc = r.DecodeBytes(yys709Slc, true, true)
		yys709 := string(yys709Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys709 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys709)
		} // end switch yys709
	} // end for yyj709
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj713 int
	var yyb713 bool
	var yyhl713 bool = l >= 0
	yyj713++
	if yyhl713 {
		yyb713 = yyj713 > l
	} else {
		yyb713 = r.CheckBreak()
	}
	if yyb713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj713++
	if yyhl713 {
		yyb713 = yyj713 > l
	} else {
		yyb713 = r.CheckBreak()
	}
	if yyb713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj713++
	if yyhl713 {
		yyb713 = yyj713 > l
	} else {
		yyb713 = r.CheckBreak()
	}
	if yyb713 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj713++
		if yyhl713 {
			yyb713 = yyj713 > l
		} else {
			yyb713 = r.CheckBreak()
		}
		if yyb713 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj713-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym717 := z.EncBinary()
		_ = yym717
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep718 := !z.EncBinary()
			yy2arr718 := z.EncBasicHandle().StructToArray
			var yyq718 [8]bool
			_, _, _ = yysep718, yyq718, yy2arr718
			const yyr718 bool = false
			yyq718[2] = x.FSType != ""
			yyq718[7] = x.ReadOnly != false
			var yynn718 int
			if yyr718 || yy2arr718 {
				r.EncodeArrayStart(8)
			} else {
				yynn718 = 6
				for _, b := range yyq718 {
					if b {
						yynn718++
					}
				}
				r.EncodeMapStart(yynn718)
				yynn718 = 0
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym720 := z.EncBinary()
					_ = yym720
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym723 := z.EncBinary()
				_ = yym723
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym724 := z.EncBinary()
				_ = yym724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[2] {
					yym726 := z.EncBinary()
					_ = yym726
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq718[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym727 := z.EncBinary()
					_ = yym727
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym729 := z.EncBinary()
				_ = yym729
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pool"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym730 := z.EncBinary()
				_ = yym730
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym732 := z.EncBinary()
				_ = yym732
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("user"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym733 := z.EncBinary()
				_ = yym733
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym735 := z.EncBinary()
				_ = yym735
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("keyring"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym736 := z.EncBinary()
				_ = yym736
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SecretRef == nil {
					r.EncodeNil()
				} else {
					x.SecretRef.CodecEncodeSelf(e)
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq718[7] {
					yym739 := z.EncBinary()
					_ = yym739
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq718[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym740 := z.EncBinary()
					_ = yym740
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr718 || yy2arr718 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym741 := z.DecBinary()
	_ = yym741
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct742 := r.ContainerType()
		if yyct742 == codecSelferValueTypeMap1234 {
			yyl742 := r.ReadMapStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl742, d)
			}
		} else if yyct742 == codecSelferValueTypeArray1234 {
			yyl742 := r.ReadArrayStart()
			if yyl742 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl742, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys743Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys743Slc
	var yyhl743 bool = l >= 0
	for yyj743 := 0; ; yyj743++ {
		if yyhl743 {
			if yyj743 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys743Slc = r.DecodeBytes(yys743Slc, true, true)
		yys743 := string(yys743Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys743 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv744 := &x.CephMonitors
				yym745 := z.DecBinary()
				_ = yym745
				if false {
				} else {
					z.F.DecSliceStringX(yyv744, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys743)
		} // end switch yys743
	} // end for yyj743
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj753 int
	var yyb753 bool
	var yyhl753 bool = l >= 0
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv754 := &x.CephMonitors
		yym755 := z.DecBinary()
		_ = yym755
		if false {
		} else {
			z.F.DecSliceStringX(yyv754, false, d)
		}
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj753++
	if yyhl753 {
		yyb753 = yyj753 > l
	} else {
		yyb753 = r.CheckBreak()
	}
	if yyb753 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj753++
		if yyhl753 {
			yyb753 = yyj753 > l
		} else {
			yyb753 = r.CheckBreak()
		}
		if yyb753 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj753-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym763 := z.EncBinary()
		_ = yym763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep764 := !z.EncBinary()
			yy2arr764 := z.EncBasicHandle().StructToArray
			var yyq764 [3]bool
			_, _, _ = yysep764, yyq764, yy2arr764
			const yyr764 bool = false
			yyq764[1] = x.FSType != ""
			yyq764[2] = x.ReadOnly != false
			var yynn764 int
			if yyr764 || yy2arr764 {
				r.EncodeArrayStart(3)
			} else {
				yynn764 = 1
				for _, b := range yyq764 {
					if b {
						yynn764++
					}
				}
				r.EncodeMapStart(yynn764)
				yynn764 = 0
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym766 := z.EncBinary()
				_ = yym766
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym767 := z.EncBinary()
				_ = yym767
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq764[1] {
					yym769 := z.EncBinary()
					_ = yym769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq764[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym770 := z.EncBinary()
					_ = yym770
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq764[2] {
					yym772 := z.EncBinary()
					_ = yym772
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq764[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym774 := z.DecBinary()
	_ = yym774
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct775 := r.ContainerType()
		if yyct775 == codecSelferValueTypeMap1234 {
			yyl775 := r.ReadMapStart()
			if yyl775 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl775, d)
			}
		} else if yyct775 == codecSelferValueTypeArray1234 {
			yyl775 := r.ReadArrayStart()
			if yyl775 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl775, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys776Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys776Slc
	var yyhl776 bool = l >= 0
	for yyj776 := 0; ; yyj776++ {
		if yyhl776 {
			if yyj776 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys776Slc = r.DecodeBytes(yys776Slc, true, true)
		yys776 := string(yys776Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys776 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys776)
		} // end switch yys776
	} // end for yyj776
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj780 int
	var yyb780 bool
	var yyhl780 bool = l >= 0
	yyj780++
	if yyhl780 {
		yyb780 = yyj780 > l
	} else {
		yyb780 = r.CheckBreak()
	}
	if yyb780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj780++
	if yyhl780 {
		yyb780 = yyj780 > l
	} else {
		yyb780 = r.CheckBreak()
	}
	if yyb780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj780++
	if yyhl780 {
		yyb780 = yyj780 > l
	} else {
		yyb780 = r.CheckBreak()
	}
	if yyb780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj780++
		if yyhl780 {
			yyb780 = yyj780 > l
		} else {
			yyb780 = r.CheckBreak()
		}
		if yyb780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym784 := z.EncBinary()
		_ = yym784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep785 := !z.EncBinary()
			yy2arr785 := z.EncBasicHandle().StructToArray
			var yyq785 [5]bool
			_, _, _ = yysep785, yyq785, yy2arr785
			const yyr785 bool = false
			yyq785[1] = x.User != ""
			yyq785[2] = x.SecretFile != ""
			yyq785[3] = x.SecretRef != nil
			yyq785[4] = x.ReadOnly != false
			var yynn785 int
			if yyr785 || yy2arr785 {
				r.EncodeArrayStart(5)
			} else {
				yynn785 = 1
				for _, b := range yyq785 {
					if b {
						yynn785++
					}
				}
				r.EncodeMapStart(yynn785)
				yynn785 = 0
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym787 := z.EncBinary()
					_ = yym787
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[1] {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq785[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym791 := z.EncBinary()
					_ = yym791
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[2] {
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq785[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym794 := z.EncBinary()
					_ = yym794
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[3] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq785[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq785[4] {
					yym797 := z.EncBinary()
					_ = yym797
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq785[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym798 := z.EncBinary()
					_ = yym798
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr785 || yy2arr785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym799 := z.DecBinary()
	_ = yym799
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct800 := r.ContainerType()
		if yyct800 == codecSelferValueTypeMap1234 {
			yyl800 := r.ReadMapStart()
			if yyl800 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl800, d)
			}
		} else if yyct800 == codecSelferValueTypeArray1234 {
			yyl800 := r.ReadArrayStart()
			if yyl800 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl800, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys801Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys801Slc
	var yyhl801 bool = l >= 0
	for yyj801 := 0; ; yyj801++ {
		if yyhl801 {
			if yyj801 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys801Slc = r.DecodeBytes(yys801Slc, true, true)
		yys801 := string(yys801Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys801 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv802 := &x.Monitors
				yym803 := z.DecBinary()
				_ = yym803
				if false {
				} else {
					z.F.DecSliceStringX(yyv802, false, d)
				}
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys801)
		} // end switch yys801
	} // end for yyj801
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj808 int
	var yyb808 bool
	var yyhl808 bool = l >= 0
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv809 := &x.Monitors
		yym810 := z.DecBinary()
		_ = yym810
		if false {
		} else {
			z.F.DecSliceStringX(yyv809, false, d)
		}
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj808++
	if yyhl808 {
		yyb808 = yyj808 > l
	} else {
		yyb808 = r.CheckBreak()
	}
	if yyb808 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj808++
		if yyhl808 {
			yyb808 = yyj808 > l
		} else {
			yyb808 = r.CheckBreak()
		}
		if yyb808 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj808-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym815 := z.EncBinary()
		_ = yym815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep816 := !z.EncBinary()
			yy2arr816 := z.EncBasicHandle().StructToArray
			var yyq816 [1]bool
			_, _, _ = yysep816, yyq816, yy2arr816
			const yyr816 bool = false
			var yynn816 int
			if yyr816 || yy2arr816 {
				r.EncodeArrayStart(1)
			} else {
				yynn816 = 1
				for _, b := range yyq816 {
					if b {
						yynn816++
					}
				}
				r.EncodeMapStart(yynn816)
				yynn816 = 0
			}
			if yyr816 || yy2arr816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym818 := z.EncBinary()
				_ = yym818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym819 := z.EncBinary()
				_ = yym819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr816 || yy2arr816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym820 := z.DecBinary()
	_ = yym820
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct821 := r.ContainerType()
		if yyct821 == codecSelferValueTypeMap1234 {
			yyl821 := r.ReadMapStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl821, d)
			}
		} else if yyct821 == codecSelferValueTypeArray1234 {
			yyl821 := r.ReadArrayStart()
			if yyl821 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl821, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys822Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys822Slc
	var yyhl822 bool = l >= 0
	for yyj822 := 0; ; yyj822++ {
		if yyhl822 {
			if yyj822 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys822Slc = r.DecodeBytes(yys822Slc, true, true)
		yys822 := string(yys822Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys822 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys822)
		} // end switch yys822
	} // end for yyj822
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj824 int
	var yyb824 bool
	var yyhl824 bool = l >= 0
	yyj824++
	if yyhl824 {
		yyb824 = yyj824 > l
	} else {
		yyb824 = r.CheckBreak()
	}
	if yyb824 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj824++
		if yyhl824 {
			yyb824 = yyj824 > l
		} else {
			yyb824 = r.CheckBreak()
		}
		if yyb824 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj824-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym826 := z.EncBinary()
		_ = yym826
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep827 := !z.EncBinary()
			yy2arr827 := z.EncBasicHandle().StructToArray
			var yyq827 [1]bool
			_, _, _ = yysep827, yyq827, yy2arr827
			const yyr827 bool = false
			yyq827[0] = len(x.Items) != 0
			var yynn827 int
			if yyr827 || yy2arr827 {
				r.EncodeArrayStart(1)
			} else {
				yynn827 = 0
				for _, b := range yyq827 {
					if b {
						yynn827++
					}
				}
				r.EncodeMapStart(yynn827)
				yynn827 = 0
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq827[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym829 := z.EncBinary()
						_ = yym829
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq827[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym830 := z.EncBinary()
						_ = yym830
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr827 || yy2arr827 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym831 := z.DecBinary()
	_ = yym831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct832 := r.ContainerType()
		if yyct832 == codecSelferValueTypeMap1234 {
			yyl832 := r.ReadMapStart()
			if yyl832 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl832, d)
			}
		} else if yyct832 == codecSelferValueTypeArray1234 {
			yyl832 := r.ReadArrayStart()
			if yyl832 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys833Slc
	var yyhl833 bool = l >= 0
	for yyj833 := 0; ; yyj833++ {
		if yyhl833 {
			if yyj833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys833Slc = r.DecodeBytes(yys833Slc, true, true)
		yys833 := string(yys833Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys833 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv834 := &x.Items
				yym835 := z.DecBinary()
				_ = yym835
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv834), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys833)
		} // end switch yys833
	} // end for yyj833
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj836 int
	var yyb836 bool
	var yyhl836 bool = l >= 0
	yyj836++
	if yyhl836 {
		yyb836 = yyj836 > l
	} else {
		yyb836 = r.CheckBreak()
	}
	if yyb836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv837 := &x.Items
		yym838 := z.DecBinary()
		_ = yym838
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv837), d)
		}
	}
	for {
		yyj836++
		if yyhl836 {
			yyb836 = yyj836 > l
		} else {
			yyb836 = r.CheckBreak()
		}
		if yyb836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym839 := z.EncBinary()
		_ = yym839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep840 := !z.EncBinary()
			yy2arr840 := z.EncBasicHandle().StructToArray
			var yyq840 [2]bool
			_, _, _ = yysep840, yyq840, yy2arr840
			const yyr840 bool = false
			var yynn840 int
			if yyr840 || yy2arr840 {
				r.EncodeArrayStart(2)
			} else {
				yynn840 = 2
				for _, b := range yyq840 {
					if b {
						yynn840++
					}
				}
				r.EncodeMapStart(yynn840)
				yynn840 = 0
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym842 := z.EncBinary()
				_ = yym842
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym843 := z.EncBinary()
				_ = yym843
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy845 := &x.FieldRef
				yy845.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy846 := &x.FieldRef
				yy846.CodecEncodeSelf(e)
			}
			if yyr840 || yy2arr840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym847 := z.DecBinary()
	_ = yym847
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct848 := r.ContainerType()
		if yyct848 == codecSelferValueTypeMap1234 {
			yyl848 := r.ReadMapStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl848, d)
			}
		} else if yyct848 == codecSelferValueTypeArray1234 {
			yyl848 := r.ReadArrayStart()
			if yyl848 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl848, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys849Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys849Slc
	var yyhl849 bool = l >= 0
	for yyj849 := 0; ; yyj849++ {
		if yyhl849 {
			if yyj849 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys849Slc = r.DecodeBytes(yys849Slc, true, true)
		yys849 := string(yys849Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys849 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				x.FieldRef = ObjectFieldSelector{}
			} else {
				yyv851 := &x.FieldRef
				yyv851.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys849)
		} // end switch yys849
	} // end for yyj849
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj852 int
	var yyb852 bool
	var yyhl852 bool = l >= 0
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj852++
	if yyhl852 {
		yyb852 = yyj852 > l
	} else {
		yyb852 = r.CheckBreak()
	}
	if yyb852 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldRef = ObjectFieldSelector{}
	} else {
		yyv854 := &x.FieldRef
		yyv854.CodecDecodeSelf(d)
	}
	for {
		yyj852++
		if yyhl852 {
			yyb852 = yyj852 > l
		} else {
			yyb852 = r.CheckBreak()
		}
		if yyb852 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj852-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym855 := z.EncBinary()
		_ = yym855
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep856 := !z.EncBinary()
			yy2arr856 := z.EncBasicHandle().StructToArray
			var yyq856 [5]bool
			_, _, _ = yysep856, yyq856, yy2arr856
			const yyr856 bool = false
			yyq856[0] = x.Name != ""
			yyq856[1] = x.HostPort != 0
			yyq856[3] = x.Protocol != ""
			yyq856[4] = x.HostIP != ""
			var yynn856 int
			if yyr856 || yy2arr856 {
				r.EncodeArrayStart(5)
			} else {
				yynn856 = 1
				for _, b := range yyq856 {
					if b {
						yynn856++
					}
				}
				r.EncodeMapStart(yynn856)
				yynn856 = 0
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[0] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[1] {
					yym861 := z.EncBinary()
					_ = yym861
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq856[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym862 := z.EncBinary()
					_ = yym862
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym864 := z.EncBinary()
				_ = yym864
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym865 := z.EncBinary()
				_ = yym865
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq856[4] {
					yym868 := z.EncBinary()
					_ = yym868
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq856[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym869 := z.EncBinary()
					_ = yym869
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr856 || yy2arr856 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym870 := z.DecBinary()
	_ = yym870
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct871 := r.ContainerType()
		if yyct871 == codecSelferValueTypeMap1234 {
			yyl871 := r.ReadMapStart()
			if yyl871 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl871, d)
			}
		} else if yyct871 == codecSelferValueTypeArray1234 {
			yyl871 := r.ReadArrayStart()
			if yyl871 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl871, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys872Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys872Slc
	var yyhl872 bool = l >= 0
	for yyj872 := 0; ; yyj872++ {
		if yyhl872 {
			if yyj872 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys872Slc = r.DecodeBytes(yys872Slc, true, true)
		yys872 := string(yys872Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys872 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys872)
		} // end switch yys872
	} // end for yyj872
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj878 int
	var yyb878 bool
	var yyhl878 bool = l >= 0
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj878++
	if yyhl878 {
		yyb878 = yyj878 > l
	} else {
		yyb878 = r.CheckBreak()
	}
	if yyb878 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj878++
		if yyhl878 {
			yyb878 = yyj878 > l
		} else {
			yyb878 = r.CheckBreak()
		}
		if yyb878 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj878-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym884 := z.EncBinary()
		_ = yym884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep885 := !z.EncBinary()
			yy2arr885 := z.EncBasicHandle().StructToArray
			var yyq885 [3]bool
			_, _, _ = yysep885, yyq885, yy2arr885
			const yyr885 bool = false
			yyq885[1] = x.ReadOnly != false
			var yynn885 int
			if yyr885 || yy2arr885 {
				r.EncodeArrayStart(3)
			} else {
				yynn885 = 2
				for _, b := range yyq885 {
					if b {
						yynn885++
					}
				}
				r.EncodeMapStart(yynn885)
				yynn885 = 0
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym887 := z.EncBinary()
				_ = yym887
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym888 := z.EncBinary()
				_ = yym888
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq885[1] {
					yym890 := z.EncBinary()
					_ = yym890
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq885[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym891 := z.EncBinary()
					_ = yym891
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym893 := z.EncBinary()
				_ = yym893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym894 := z.EncBinary()
				_ = yym894
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr885 || yy2arr885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym895 := z.DecBinary()
	_ = yym895
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct896 := r.ContainerType()
		if yyct896 == codecSelferValueTypeMap1234 {
			yyl896 := r.ReadMapStart()
			if yyl896 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl896, d)
			}
		} else if yyct896 == codecSelferValueTypeArray1234 {
			yyl896 := r.ReadArrayStart()
			if yyl896 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl896, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys897Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys897Slc
	var yyhl897 bool = l >= 0
	for yyj897 := 0; ; yyj897++ {
		if yyhl897 {
			if yyj897 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys897Slc = r.DecodeBytes(yys897Slc, true, true)
		yys897 := string(yys897Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys897 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys897)
		} // end switch yys897
	} // end for yyj897
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj901 int
	var yyb901 bool
	var yyhl901 bool = l >= 0
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj901++
	if yyhl901 {
		yyb901 = yyj901 > l
	} else {
		yyb901 = r.CheckBreak()
	}
	if yyb901 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	for {
		yyj901++
		if yyhl901 {
			yyb901 = yyj901 > l
		} else {
			yyb901 = r.CheckBreak()
		}
		if yyb901 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj901-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym905 := z.EncBinary()
		_ = yym905
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep906 := !z.EncBinary()
			yy2arr906 := z.EncBasicHandle().StructToArray
			var yyq906 [3]bool
			_, _, _ = yysep906, yyq906, yy2arr906
			const yyr906 bool = false
			yyq906[1] = x.Value != ""
			yyq906[2] = x.ValueFrom != nil
			var yynn906 int
			if yyr906 || yy2arr906 {
				r.EncodeArrayStart(3)
			} else {
				yynn906 = 1
				for _, b := range yyq906 {
					if b {
						yynn906++
					}
				}
				r.EncodeMapStart(yynn906)
				yynn906 = 0
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym908 := z.EncBinary()
				_ = yym908
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym909 := z.EncBinary()
				_ = yym909
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[1] {
					yym911 := z.EncBinary()
					_ = yym911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq906[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym912 := z.EncBinary()
					_ = yym912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq906[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq906[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr906 || yy2arr906 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym914 := z.DecBinary()
	_ = yym914
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct915 := r.ContainerType()
		if yyct915 == codecSelferValueTypeMap1234 {
			yyl915 := r.ReadMapStart()
			if yyl915 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl915, d)
			}
		} else if yyct915 == codecSelferValueTypeArray1234 {
			yyl915 := r.ReadArrayStart()
			if yyl915 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl915, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys916Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys916Slc
	var yyhl916 bool = l >= 0
	for yyj916 := 0; ; yyj916++ {
		if yyhl916 {
			if yyj916 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys916Slc = r.DecodeBytes(yys916Slc, true, true)
		yys916 := string(yys916Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys916 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys916)
		} // end switch yys916
	} // end for yyj916
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj920 int
	var yyb920 bool
	var yyhl920 bool = l >= 0
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj920++
	if yyhl920 {
		yyb920 = yyj920 > l
	} else {
		yyb920 = r.CheckBreak()
	}
	if yyb920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj920++
		if yyhl920 {
			yyb920 = yyj920 > l
		} else {
			yyb920 = r.CheckBreak()
		}
		if yyb920 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj920-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym924 := z.EncBinary()
		_ = yym924
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep925 := !z.EncBinary()
			yy2arr925 := z.EncBasicHandle().StructToArray
			var yyq925 [1]bool
			_, _, _ = yysep925, yyq925, yy2arr925
			const yyr925 bool = false
			var yynn925 int
			if yyr925 || yy2arr925 {
				r.EncodeArrayStart(1)
			} else {
				yynn925 = 1
				for _, b := range yyq925 {
					if b {
						yynn925++
					}
				}
				r.EncodeMapStart(yynn925)
				yynn925 = 0
			}
			if yyr925 || yy2arr925 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldRef == nil {
					r.EncodeNil()
				} else {
					x.FieldRef.CodecEncodeSelf(e)
				}
			}
			if yyr925 || yy2arr925 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym927 := z.DecBinary()
	_ = yym927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct928 := r.ContainerType()
		if yyct928 == codecSelferValueTypeMap1234 {
			yyl928 := r.ReadMapStart()
			if yyl928 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl928, d)
			}
		} else if yyct928 == codecSelferValueTypeArray1234 {
			yyl928 := r.ReadArrayStart()
			if yyl928 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl928, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys929Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys929Slc
	var yyhl929 bool = l >= 0
	for yyj929 := 0; ; yyj929++ {
		if yyhl929 {
			if yyj929 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys929Slc = r.DecodeBytes(yys929Slc, true, true)
		yys929 := string(yys929Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys929 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys929)
		} // end switch yys929
	} // end for yyj929
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj931 int
	var yyb931 bool
	var yyhl931 bool = l >= 0
	yyj931++
	if yyhl931 {
		yyb931 = yyj931 > l
	} else {
		yyb931 = r.CheckBreak()
	}
	if yyb931 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	for {
		yyj931++
		if yyhl931 {
			yyb931 = yyj931 > l
		} else {
			yyb931 = r.CheckBreak()
		}
		if yyb931 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj931-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym933 := z.EncBinary()
		_ = yym933
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep934 := !z.EncBinary()
			yy2arr934 := z.EncBasicHandle().StructToArray
			var yyq934 [2]bool
			_, _, _ = yysep934, yyq934, yy2arr934
			const yyr934 bool = false
			var yynn934 int
			if yyr934 || yy2arr934 {
				r.EncodeArrayStart(2)
			} else {
				yynn934 = 2
				for _, b := range yyq934 {
					if b {
						yynn934++
					}
				}
				r.EncodeMapStart(yynn934)
				yynn934 = 0
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym936 := z.EncBinary()
				_ = yym936
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym937 := z.EncBinary()
				_ = yym937
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym939 := z.EncBinary()
				_ = yym939
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym940 := z.EncBinary()
				_ = yym940
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr934 || yy2arr934 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym941 := z.DecBinary()
	_ = yym941
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct942 := r.ContainerType()
		if yyct942 == codecSelferValueTypeMap1234 {
			yyl942 := r.ReadMapStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl942, d)
			}
		} else if yyct942 == codecSelferValueTypeArray1234 {
			yyl942 := r.ReadArrayStart()
			if yyl942 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl942, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys943Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys943Slc
	var yyhl943 bool = l >= 0
	for yyj943 := 0; ; yyj943++ {
		if yyhl943 {
			if yyj943 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys943Slc = r.DecodeBytes(yys943Slc, true, true)
		yys943 := string(yys943Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys943 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys943)
		} // end switch yys943
	} // end for yyj943
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj946 int
	var yyb946 bool
	var yyhl946 bool = l >= 0
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj946++
	if yyhl946 {
		yyb946 = yyj946 > l
	} else {
		yyb946 = r.CheckBreak()
	}
	if yyb946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj946++
		if yyhl946 {
			yyb946 = yyj946 > l
		} else {
			yyb946 = r.CheckBreak()
		}
		if yyb946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym949 := z.EncBinary()
		_ = yym949
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep950 := !z.EncBinary()
			yy2arr950 := z.EncBasicHandle().StructToArray
			var yyq950 [4]bool
			_, _, _ = yysep950, yyq950, yy2arr950
			const yyr950 bool = false
			yyq950[0] = x.Path != ""
			yyq950[1] = true
			yyq950[2] = x.Host != ""
			yyq950[3] = x.Scheme != ""
			var yynn950 int
			if yyr950 || yy2arr950 {
				r.EncodeArrayStart(4)
			} else {
				yynn950 = 0
				for _, b := range yyq950 {
					if b {
						yynn950++
					}
				}
				r.EncodeMapStart(yynn950)
				yynn950 = 0
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[0] {
					yym952 := z.EncBinary()
					_ = yym952
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[1] {
					yy955 := &x.Port
					yym956 := z.EncBinary()
					_ = yym956
					if false {
					} else if z.HasExtensions() && z.EncExt(yy955) {
					} else if !yym956 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy955)
					} else {
						z.EncFallback(yy955)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq950[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy957 := &x.Port
					yym958 := z.EncBinary()
					_ = yym958
					if false {
					} else if z.HasExtensions() && z.EncExt(yy957) {
					} else if !yym958 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy957)
					} else {
						z.EncFallback(yy957)
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[2] {
					yym960 := z.EncBinary()
					_ = yym960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym961 := z.EncBinary()
					_ = yym961
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq950[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq950[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr950 || yy2arr950 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym963 := z.DecBinary()
	_ = yym963
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct964 := r.ContainerType()
		if yyct964 == codecSelferValueTypeMap1234 {
			yyl964 := r.ReadMapStart()
			if yyl964 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl964, d)
			}
		} else if yyct964 == codecSelferValueTypeArray1234 {
			yyl964 := r.ReadArrayStart()
			if yyl964 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl964, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys965Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys965Slc
	var yyhl965 bool = l >= 0
	for yyj965 := 0; ; yyj965++ {
		if yyhl965 {
			if yyj965 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys965Slc = r.DecodeBytes(yys965Slc, true, true)
		yys965 := string(yys965Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys965 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv967 := &x.Port
				yym968 := z.DecBinary()
				_ = yym968
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv967) {
				} else if !yym968 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv967)
				} else {
					z.DecFallback(yyv967, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys965)
		} // end switch yys965
	} // end for yyj965
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj971 int
	var yyb971 bool
	var yyhl971 bool = l >= 0
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv973 := &x.Port
		yym974 := z.DecBinary()
		_ = yym974
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv973) {
		} else if !yym974 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv973)
		} else {
			z.DecFallback(yyv973, false)
		}
	}
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj971++
	if yyhl971 {
		yyb971 = yyj971 > l
	} else {
		yyb971 = r.CheckBreak()
	}
	if yyb971 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	for {
		yyj971++
		if yyhl971 {
			yyb971 = yyj971 > l
		} else {
			yyb971 = r.CheckBreak()
		}
		if yyb971 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj971-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym977 := z.EncBinary()
	_ = yym977
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym978 := z.DecBinary()
	_ = yym978
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym979 := z.EncBinary()
		_ = yym979
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep980 := !z.EncBinary()
			yy2arr980 := z.EncBasicHandle().StructToArray
			var yyq980 [1]bool
			_, _, _ = yysep980, yyq980, yy2arr980
			const yyr980 bool = false
			yyq980[0] = true
			var yynn980 int
			if yyr980 || yy2arr980 {
				r.EncodeArrayStart(1)
			} else {
				yynn980 = 0
				for _, b := range yyq980 {
					if b {
						yynn980++
					}
				}
				r.EncodeMapStart(yynn980)
				yynn980 = 0
			}
			if yyr980 || yy2arr980 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq980[0] {
					yy982 := &x.Port
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else if z.HasExtensions() && z.EncExt(yy982) {
					} else if !yym983 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy982)
					} else {
						z.EncFallback(yy982)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq980[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy984 := &x.Port
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else if z.HasExtensions() && z.EncExt(yy984) {
					} else if !yym985 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy984)
					} else {
						z.EncFallback(yy984)
					}
				}
			}
			if yyr980 || yy2arr980 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym986 := z.DecBinary()
	_ = yym986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct987 := r.ContainerType()
		if yyct987 == codecSelferValueTypeMap1234 {
			yyl987 := r.ReadMapStart()
			if yyl987 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl987, d)
			}
		} else if yyct987 == codecSelferValueTypeArray1234 {
			yyl987 := r.ReadArrayStart()
			if yyl987 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl987, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys988Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys988Slc
	var yyhl988 bool = l >= 0
	for yyj988 := 0; ; yyj988++ {
		if yyhl988 {
			if yyj988 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys988Slc = r.DecodeBytes(yys988Slc, true, true)
		yys988 := string(yys988Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys988 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg5_intstr.IntOrString{}
			} else {
				yyv989 := &x.Port
				yym990 := z.DecBinary()
				_ = yym990
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv989) {
				} else if !yym990 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv989)
				} else {
					z.DecFallback(yyv989, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys988)
		} // end switch yys988
	} // end for yyj988
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj991 int
	var yyb991 bool
	var yyhl991 bool = l >= 0
	yyj991++
	if yyhl991 {
		yyb991 = yyj991 > l
	} else {
		yyb991 = r.CheckBreak()
	}
	if yyb991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg5_intstr.IntOrString{}
	} else {
		yyv992 := &x.Port
		yym993 := z.DecBinary()
		_ = yym993
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv992) {
		} else if !yym993 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv992)
		} else {
			z.DecFallback(yyv992, false)
		}
	}
	for {
		yyj991++
		if yyhl991 {
			yyb991 = yyj991 > l
		} else {
			yyb991 = r.CheckBreak()
		}
		if yyb991 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj991-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym994 := z.EncBinary()
		_ = yym994
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep995 := !z.EncBinary()
			yy2arr995 := z.EncBasicHandle().StructToArray
			var yyq995 [1]bool
			_, _, _ = yysep995, yyq995, yy2arr995
			const yyr995 bool = false
			yyq995[0] = len(x.Command) != 0
			var yynn995 int
			if yyr995 || yy2arr995 {
				r.EncodeArrayStart(1)
			} else {
				yynn995 = 0
				for _, b := range yyq995 {
					if b {
						yynn995++
					}
				}
				r.EncodeMapStart(yynn995)
				yynn995 = 0
			}
			if yyr995 || yy2arr995 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq995[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym997 := z.EncBinary()
						_ = yym997
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq995[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym998 := z.EncBinary()
						_ = yym998
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr995 || yy2arr995 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym999 := z.DecBinary()
	_ = yym999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1000 := r.ContainerType()
		if yyct1000 == codecSelferValueTypeMap1234 {
			yyl1000 := r.ReadMapStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1000, d)
			}
		} else if yyct1000 == codecSelferValueTypeArray1234 {
			yyl1000 := r.ReadArrayStart()
			if yyl1000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1001Slc
	var yyhl1001 bool = l >= 0
	for yyj1001 := 0; ; yyj1001++ {
		if yyhl1001 {
			if yyj1001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1001Slc = r.DecodeBytes(yys1001Slc, true, true)
		yys1001 := string(yys1001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1001 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1002 := &x.Command
				yym1003 := z.DecBinary()
				_ = yym1003
				if false {
				} else {
					z.F.DecSliceStringX(yyv1002, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1001)
		} // end switch yys1001
	} // end for yyj1001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1004 int
	var yyb1004 bool
	var yyhl1004 bool = l >= 0
	yyj1004++
	if yyhl1004 {
		yyb1004 = yyj1004 > l
	} else {
		yyb1004 = r.CheckBreak()
	}
	if yyb1004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1005 := &x.Command
		yym1006 := z.DecBinary()
		_ = yym1006
		if false {
		} else {
			z.F.DecSliceStringX(yyv1005, false, d)
		}
	}
	for {
		yyj1004++
		if yyhl1004 {
			yyb1004 = yyj1004 > l
		} else {
			yyb1004 = r.CheckBreak()
		}
		if yyb1004 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1004-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1007 := z.EncBinary()
		_ = yym1007
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1008 := !z.EncBinary()
			yy2arr1008 := z.EncBasicHandle().StructToArray
			var yyq1008 [8]bool
			_, _, _ = yysep1008, yyq1008, yy2arr1008
			const yyr1008 bool = false
			yyq1008[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1008[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1008[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1008[3] = x.InitialDelaySeconds != 0
			yyq1008[4] = x.TimeoutSeconds != 0
			yyq1008[5] = x.PeriodSeconds != 0
			yyq1008[6] = x.SuccessThreshold != 0
			yyq1008[7] = x.FailureThreshold != 0
			var yynn1008 int
			if yyr1008 || yy2arr1008 {
				r.EncodeArrayStart(8)
			} else {
				yynn1008 = 0
				for _, b := range yyq1008 {
					if b {
						yynn1008++
					}
				}
				r.EncodeMapStart(yynn1008)
				yynn1008 = 0
			}
			var yyn1009 bool
			if x.Handler.Exec == nil {
				yyn1009 = true
				goto LABEL1009
			}
		LABEL1009:
			if yyr1008 || yy2arr1008 {
				if yyn1009 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1008[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1008[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1009 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1010 bool
			if x.Handler.HTTPGet == nil {
				yyn1010 = true
				goto LABEL1010
			}
		LABEL1010:
			if yyr1008 || yy2arr1008 {
				if yyn1010 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1008[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1008[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1010 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1011 bool
			if x.Handler.TCPSocket == nil {
				yyn1011 = true
				goto LABEL1011
			}
		LABEL1011:
			if yyr1008 || yy2arr1008 {
				if yyn1011 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1008[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1008[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1011 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[3] {
					yym1013 := z.EncBinary()
					_ = yym1013
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1014 := z.EncBinary()
					_ = yym1014
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[4] {
					yym1016 := z.EncBinary()
					_ = yym1016
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1017 := z.EncBinary()
					_ = yym1017
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[5] {
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[6] {
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1008[7] {
					yym1025 := z.EncBinary()
					_ = yym1025
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1008[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1008 || yy2arr1008 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1027 := z.DecBinary()
	_ = yym1027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1028 := r.ContainerType()
		if yyct1028 == codecSelferValueTypeMap1234 {
			yyl1028 := r.ReadMapStart()
			if yyl1028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1028, d)
			}
		} else if yyct1028 == codecSelferValueTypeArray1234 {
			yyl1028 := r.ReadArrayStart()
			if yyl1028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1029Slc
	var yyhl1029 bool = l >= 0
	for yyj1029 := 0; ; yyj1029++ {
		if yyhl1029 {
			if yyj1029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1029Slc = r.DecodeBytes(yys1029Slc, true, true)
		yys1029 := string(yys1029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1029 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1029)
		} // end switch yys1029
	} // end for yyj1029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1038 int
	var yyb1038 bool
	var yyhl1038 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1038++
	if yyhl1038 {
		yyb1038 = yyj1038 > l
	} else {
		yyb1038 = r.CheckBreak()
	}
	if yyb1038 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1038++
		if yyhl1038 {
			yyb1038 = yyj1038 > l
		} else {
			yyb1038 = r.CheckBreak()
		}
		if yyb1038 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1038-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1047 := z.EncBinary()
	_ = yym1047
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1048 := z.DecBinary()
	_ = yym1048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1049 := z.EncBinary()
	_ = yym1049
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1050 := z.DecBinary()
	_ = yym1050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1051 := z.EncBinary()
		_ = yym1051
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1052 := !z.EncBinary()
			yy2arr1052 := z.EncBasicHandle().StructToArray
			var yyq1052 [2]bool
			_, _, _ = yysep1052, yyq1052, yy2arr1052
			const yyr1052 bool = false
			yyq1052[0] = len(x.Add) != 0
			yyq1052[1] = len(x.Drop) != 0
			var yynn1052 int
			if yyr1052 || yy2arr1052 {
				r.EncodeArrayStart(2)
			} else {
				yynn1052 = 0
				for _, b := range yyq1052 {
					if b {
						yynn1052++
					}
				}
				r.EncodeMapStart(yynn1052)
				yynn1052 = 0
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1054 := z.EncBinary()
						_ = yym1054
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1055 := z.EncBinary()
						_ = yym1055
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1052[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1057 := z.EncBinary()
						_ = yym1057
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1052[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1058 := z.EncBinary()
						_ = yym1058
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1052 || yy2arr1052 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1059 := z.DecBinary()
	_ = yym1059
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1060 := r.ContainerType()
		if yyct1060 == codecSelferValueTypeMap1234 {
			yyl1060 := r.ReadMapStart()
			if yyl1060 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1060, d)
			}
		} else if yyct1060 == codecSelferValueTypeArray1234 {
			yyl1060 := r.ReadArrayStart()
			if yyl1060 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1060, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1061Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1061Slc
	var yyhl1061 bool = l >= 0
	for yyj1061 := 0; ; yyj1061++ {
		if yyhl1061 {
			if yyj1061 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1061Slc = r.DecodeBytes(yys1061Slc, true, true)
		yys1061 := string(yys1061Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1061 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1062 := &x.Add
				yym1063 := z.DecBinary()
				_ = yym1063
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1062), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1064 := &x.Drop
				yym1065 := z.DecBinary()
				_ = yym1065
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1064), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1061)
		} // end switch yys1061
	} // end for yyj1061
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1066 int
	var yyb1066 bool
	var yyhl1066 bool = l >= 0
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1067 := &x.Add
		yym1068 := z.DecBinary()
		_ = yym1068
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1067), d)
		}
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1069 := &x.Drop
		yym1070 := z.DecBinary()
		_ = yym1070
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1069), d)
		}
	}
	for {
		yyj1066++
		if yyhl1066 {
			yyb1066 = yyj1066 > l
		} else {
			yyb1066 = r.CheckBreak()
		}
		if yyb1066 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1066-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1071 := z.EncBinary()
		_ = yym1071
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1072 := !z.EncBinary()
			yy2arr1072 := z.EncBasicHandle().StructToArray
			var yyq1072 [2]bool
			_, _, _ = yysep1072, yyq1072, yy2arr1072
			const yyr1072 bool = false
			yyq1072[0] = len(x.Limits) != 0
			yyq1072[1] = len(x.Requests) != 0
			var yynn1072 int
			if yyr1072 || yy2arr1072 {
				r.EncodeArrayStart(2)
			} else {
				yynn1072 = 0
				for _, b := range yyq1072 {
					if b {
						yynn1072++
					}
				}
				r.EncodeMapStart(yynn1072)
				yynn1072 = 0
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1072[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1072[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1072[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1072[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1072 || yy2arr1072 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1075 := z.DecBinary()
	_ = yym1075
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1076 := r.ContainerType()
		if yyct1076 == codecSelferValueTypeMap1234 {
			yyl1076 := r.ReadMapStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1076, d)
			}
		} else if yyct1076 == codecSelferValueTypeArray1234 {
			yyl1076 := r.ReadArrayStart()
			if yyl1076 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1076, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1077Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1077Slc
	var yyhl1077 bool = l >= 0
	for yyj1077 := 0; ; yyj1077++ {
		if yyhl1077 {
			if yyj1077 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1077Slc = r.DecodeBytes(yys1077Slc, true, true)
		yys1077 := string(yys1077Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1077 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1078 := &x.Limits
				yyv1078.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1079 := &x.Requests
				yyv1079.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1077)
		} // end switch yys1077
	} // end for yyj1077
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1080 int
	var yyb1080 bool
	var yyhl1080 bool = l >= 0
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1081 := &x.Limits
		yyv1081.CodecDecodeSelf(d)
	}
	yyj1080++
	if yyhl1080 {
		yyb1080 = yyj1080 > l
	} else {
		yyb1080 = r.CheckBreak()
	}
	if yyb1080 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1082 := &x.Requests
		yyv1082.CodecDecodeSelf(d)
	}
	for {
		yyj1080++
		if yyhl1080 {
			yyb1080 = yyj1080 > l
		} else {
			yyb1080 = r.CheckBreak()
		}
		if yyb1080 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1080-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1083 := z.EncBinary()
		_ = yym1083
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1084 := !z.EncBinary()
			yy2arr1084 := z.EncBasicHandle().StructToArray
			var yyq1084 [18]bool
			_, _, _ = yysep1084, yyq1084, yy2arr1084
			const yyr1084 bool = false
			yyq1084[2] = len(x.Command) != 0
			yyq1084[3] = len(x.Args) != 0
			yyq1084[4] = x.WorkingDir != ""
			yyq1084[5] = len(x.Ports) != 0
			yyq1084[6] = len(x.Env) != 0
			yyq1084[7] = true
			yyq1084[8] = len(x.VolumeMounts) != 0
			yyq1084[9] = x.LivenessProbe != nil
			yyq1084[10] = x.ReadinessProbe != nil
			yyq1084[11] = x.Lifecycle != nil
			yyq1084[12] = x.TerminationMessagePath != ""
			yyq1084[14] = x.SecurityContext != nil
			yyq1084[15] = x.Stdin != false
			yyq1084[16] = x.StdinOnce != false
			yyq1084[17] = x.TTY != false
			var yynn1084 int
			if yyr1084 || yy2arr1084 {
				r.EncodeArrayStart(18)
			} else {
				yynn1084 = 3
				for _, b := range yyq1084 {
					if b {
						yynn1084++
					}
				}
				r.EncodeMapStart(yynn1084)
				yynn1084 = 0
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1086 := z.EncBinary()
				_ = yym1086
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1087 := z.EncBinary()
				_ = yym1087
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1089 := z.EncBinary()
				_ = yym1089
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1090 := z.EncBinary()
				_ = yym1090
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1092 := z.EncBinary()
						_ = yym1092
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1093 := z.EncBinary()
						_ = yym1093
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1095 := z.EncBinary()
						_ = yym1095
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1096 := z.EncBinary()
						_ = yym1096
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[4] {
					yym1098 := z.EncBinary()
					_ = yym1098
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1084[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1099 := z.EncBinary()
					_ = yym1099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1101 := z.EncBinary()
						_ = yym1101
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1102 := z.EncBinary()
						_ = yym1102
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1104 := z.EncBinary()
						_ = yym1104
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1105 := z.EncBinary()
						_ = yym1105
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[7] {
					yy1107 := &x.Resources
					yy1107.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1108 := &x.Resources
					yy1108.CodecEncodeSelf(e)
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1110 := z.EncBinary()
						_ = yym1110
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1111 := z.EncBinary()
						_ = yym1111
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[12] {
					yym1116 := z.EncBinary()
					_ = yym1116
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1084[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1117 := z.EncBinary()
					_ = yym1117
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1084[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[15] {
					yym1121 := z.EncBinary()
					_ = yym1121
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1122 := z.EncBinary()
					_ = yym1122
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[16] {
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1125 := z.EncBinary()
					_ = yym1125
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1084[17] {
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1084[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1084 || yy2arr1084 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1129 := z.DecBinary()
	_ = yym1129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1130 := r.ContainerType()
		if yyct1130 == codecSelferValueTypeMap1234 {
			yyl1130 := r.ReadMapStart()
			if yyl1130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1130, d)
			}
		} else if yyct1130 == codecSelferValueTypeArray1234 {
			yyl1130 := r.ReadArrayStart()
			if yyl1130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1131Slc
	var yyhl1131 bool = l >= 0
	for yyj1131 := 0; ; yyj1131++ {
		if yyhl1131 {
			if yyj1131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1131Slc = r.DecodeBytes(yys1131Slc, true, true)
		yys1131 := string(yys1131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1131 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1134 := &x.Command
				yym1135 := z.DecBinary()
				_ = yym1135
				if false {
				} else {
					z.F.DecSliceStringX(yyv1134, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1136 := &x.Args
				yym1137 := z.DecBinary()
				_ = yym1137
				if false {
				} else {
					z.F.DecSliceStringX(yyv1136, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1139 := &x.Ports
				yym1140 := z.DecBinary()
				_ = yym1140
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1139), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1141 := &x.Env
				yym1142 := z.DecBinary()
				_ = yym1142
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1141), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1143 := &x.Resources
				yyv1143.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1144 := &x.VolumeMounts
				yym1145 := z.DecBinary()
				_ = yym1145
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1144), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1131)
		} // end switch yys1131
	} // end for yyj1131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1155 int
	var yyb1155 bool
	var yyhl1155 bool = l >= 0
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1158 := &x.Command
		yym1159 := z.DecBinary()
		_ = yym1159
		if false {
		} else {
			z.F.DecSliceStringX(yyv1158, false, d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1160 := &x.Args
		yym1161 := z.DecBinary()
		_ = yym1161
		if false {
		} else {
			z.F.DecSliceStringX(yyv1160, false, d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1163 := &x.Ports
		yym1164 := z.DecBinary()
		_ = yym1164
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1163), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1165 := &x.Env
		yym1166 := z.DecBinary()
		_ = yym1166
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1165), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1167 := &x.Resources
		yyv1167.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1168 := &x.VolumeMounts
		yym1169 := z.DecBinary()
		_ = yym1169
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1168), d)
		}
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1155++
	if yyhl1155 {
		yyb1155 = yyj1155 > l
	} else {
		yyb1155 = r.CheckBreak()
	}
	if yyb1155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1155++
		if yyhl1155 {
			yyb1155 = yyj1155 > l
		} else {
			yyb1155 = r.CheckBreak()
		}
		if yyb1155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1179 := z.EncBinary()
		_ = yym1179
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1180 := !z.EncBinary()
			yy2arr1180 := z.EncBasicHandle().StructToArray
			var yyq1180 [3]bool
			_, _, _ = yysep1180, yyq1180, yy2arr1180
			const yyr1180 bool = false
			yyq1180[0] = x.Exec != nil
			yyq1180[1] = x.HTTPGet != nil
			yyq1180[2] = x.TCPSocket != nil
			var yynn1180 int
			if yyr1180 || yy2arr1180 {
				r.EncodeArrayStart(3)
			} else {
				yynn1180 = 0
				for _, b := range yyq1180 {
					if b {
						yynn1180++
					}
				}
				r.EncodeMapStart(yynn1180)
				yynn1180 = 0
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1180[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1180[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1180 || yy2arr1180 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1184 := z.DecBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1185 := r.ContainerType()
		if yyct1185 == codecSelferValueTypeMap1234 {
			yyl1185 := r.ReadMapStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1185, d)
			}
		} else if yyct1185 == codecSelferValueTypeArray1234 {
			yyl1185 := r.ReadArrayStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1185, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1186Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1186Slc
	var yyhl1186 bool = l >= 0
	for yyj1186 := 0; ; yyj1186++ {
		if yyhl1186 {
			if yyj1186 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1186Slc = r.DecodeBytes(yys1186Slc, true, true)
		yys1186 := string(yys1186Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1186 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1186)
		} // end switch yys1186
	} // end for yyj1186
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1190 int
	var yyb1190 bool
	var yyhl1190 bool = l >= 0
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1190++
	if yyhl1190 {
		yyb1190 = yyj1190 > l
	} else {
		yyb1190 = r.CheckBreak()
	}
	if yyb1190 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1190++
		if yyhl1190 {
			yyb1190 = yyj1190 > l
		} else {
			yyb1190 = r.CheckBreak()
		}
		if yyb1190 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1190-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1194 := z.EncBinary()
		_ = yym1194
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1195 := !z.EncBinary()
			yy2arr1195 := z.EncBasicHandle().StructToArray
			var yyq1195 [2]bool
			_, _, _ = yysep1195, yyq1195, yy2arr1195
			const yyr1195 bool = false
			yyq1195[0] = x.PostStart != nil
			yyq1195[1] = x.PreStop != nil
			var yynn1195 int
			if yyr1195 || yy2arr1195 {
				r.EncodeArrayStart(2)
			} else {
				yynn1195 = 0
				for _, b := range yyq1195 {
					if b {
						yynn1195++
					}
				}
				r.EncodeMapStart(yynn1195)
				yynn1195 = 0
			}
			if yyr1195 || yy2arr1195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1195[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1195[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1195 || yy2arr1195 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1195[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1195[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1195 || yy2arr1195 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1198 := z.DecBinary()
	_ = yym1198
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1199 := r.ContainerType()
		if yyct1199 == codecSelferValueTypeMap1234 {
			yyl1199 := r.ReadMapStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1199, d)
			}
		} else if yyct1199 == codecSelferValueTypeArray1234 {
			yyl1199 := r.ReadArrayStart()
			if yyl1199 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1199, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1200Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1200Slc
	var yyhl1200 bool = l >= 0
	for yyj1200 := 0; ; yyj1200++ {
		if yyhl1200 {
			if yyj1200 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1200Slc = r.DecodeBytes(yys1200Slc, true, true)
		yys1200 := string(yys1200Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1200 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1200)
		} // end switch yys1200
	} // end for yyj1200
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1203 int
	var yyb1203 bool
	var yyhl1203 bool = l >= 0
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1203++
	if yyhl1203 {
		yyb1203 = yyj1203 > l
	} else {
		yyb1203 = r.CheckBreak()
	}
	if yyb1203 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1203++
		if yyhl1203 {
			yyb1203 = yyj1203 > l
		} else {
			yyb1203 = r.CheckBreak()
		}
		if yyb1203 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1203-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1206 := z.EncBinary()
	_ = yym1206
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1207 := z.DecBinary()
	_ = yym1207
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1208 := z.EncBinary()
		_ = yym1208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1209 := !z.EncBinary()
			yy2arr1209 := z.EncBasicHandle().StructToArray
			var yyq1209 [2]bool
			_, _, _ = yysep1209, yyq1209, yy2arr1209
			const yyr1209 bool = false
			yyq1209[0] = x.Reason != ""
			yyq1209[1] = x.Message != ""
			var yynn1209 int
			if yyr1209 || yy2arr1209 {
				r.EncodeArrayStart(2)
			} else {
				yynn1209 = 0
				for _, b := range yyq1209 {
					if b {
						yynn1209++
					}
				}
				r.EncodeMapStart(yynn1209)
				yynn1209 = 0
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[0] {
					yym1211 := z.EncBinary()
					_ = yym1211
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1212 := z.EncBinary()
					_ = yym1212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1209[1] {
					yym1214 := z.EncBinary()
					_ = yym1214
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1209[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1215 := z.EncBinary()
					_ = yym1215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1209 || yy2arr1209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1216 := z.DecBinary()
	_ = yym1216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1217 := r.ContainerType()
		if yyct1217 == codecSelferValueTypeMap1234 {
			yyl1217 := r.ReadMapStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1217, d)
			}
		} else if yyct1217 == codecSelferValueTypeArray1234 {
			yyl1217 := r.ReadArrayStart()
			if yyl1217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1218Slc
	var yyhl1218 bool = l >= 0
	for yyj1218 := 0; ; yyj1218++ {
		if yyhl1218 {
			if yyj1218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1218Slc = r.DecodeBytes(yys1218Slc, true, true)
		yys1218 := string(yys1218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1218 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1218)
		} // end switch yys1218
	} // end for yyj1218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1221 int
	var yyb1221 bool
	var yyhl1221 bool = l >= 0
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1221++
	if yyhl1221 {
		yyb1221 = yyj1221 > l
	} else {
		yyb1221 = r.CheckBreak()
	}
	if yyb1221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1221++
		if yyhl1221 {
			yyb1221 = yyj1221 > l
		} else {
			yyb1221 = r.CheckBreak()
		}
		if yyb1221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1224 := z.EncBinary()
		_ = yym1224
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1225 := !z.EncBinary()
			yy2arr1225 := z.EncBasicHandle().StructToArray
			var yyq1225 [1]bool
			_, _, _ = yysep1225, yyq1225, yy2arr1225
			const yyr1225 bool = false
			yyq1225[0] = true
			var yynn1225 int
			if yyr1225 || yy2arr1225 {
				r.EncodeArrayStart(1)
			} else {
				yynn1225 = 0
				for _, b := range yyq1225 {
					if b {
						yynn1225++
					}
				}
				r.EncodeMapStart(yynn1225)
				yynn1225 = 0
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1225[0] {
					yy1227 := &x.StartedAt
					yym1228 := z.EncBinary()
					_ = yym1228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1227) {
					} else if yym1228 {
						z.EncBinaryMarshal(yy1227)
					} else if !yym1228 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1227)
					} else {
						z.EncFallback(yy1227)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1225[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1229 := &x.StartedAt
					yym1230 := z.EncBinary()
					_ = yym1230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1229) {
					} else if yym1230 {
						z.EncBinaryMarshal(yy1229)
					} else if !yym1230 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1229)
					} else {
						z.EncFallback(yy1229)
					}
				}
			}
			if yyr1225 || yy2arr1225 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1231 := z.DecBinary()
	_ = yym1231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1232 := r.ContainerType()
		if yyct1232 == codecSelferValueTypeMap1234 {
			yyl1232 := r.ReadMapStart()
			if yyl1232 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1232, d)
			}
		} else if yyct1232 == codecSelferValueTypeArray1234 {
			yyl1232 := r.ReadArrayStart()
			if yyl1232 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1233Slc
	var yyhl1233 bool = l >= 0
	for yyj1233 := 0; ; yyj1233++ {
		if yyhl1233 {
			if yyj1233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1233Slc = r.DecodeBytes(yys1233Slc, true, true)
		yys1233 := string(yys1233Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1233 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1234 := &x.StartedAt
				yym1235 := z.DecBinary()
				_ = yym1235
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1234) {
				} else if yym1235 {
					z.DecBinaryUnmarshal(yyv1234)
				} else if !yym1235 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1234)
				} else {
					z.DecFallback(yyv1234, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1233)
		} // end switch yys1233
	} // end for yyj1233
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1236 int
	var yyb1236 bool
	var yyhl1236 bool = l >= 0
	yyj1236++
	if yyhl1236 {
		yyb1236 = yyj1236 > l
	} else {
		yyb1236 = r.CheckBreak()
	}
	if yyb1236 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1237 := &x.StartedAt
		yym1238 := z.DecBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1237) {
		} else if yym1238 {
			z.DecBinaryUnmarshal(yyv1237)
		} else if !yym1238 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1237)
		} else {
			z.DecFallback(yyv1237, false)
		}
	}
	for {
		yyj1236++
		if yyhl1236 {
			yyb1236 = yyj1236 > l
		} else {
			yyb1236 = r.CheckBreak()
		}
		if yyb1236 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1236-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1239 := z.EncBinary()
		_ = yym1239
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1240 := !z.EncBinary()
			yy2arr1240 := z.EncBasicHandle().StructToArray
			var yyq1240 [7]bool
			_, _, _ = yysep1240, yyq1240, yy2arr1240
			const yyr1240 bool = false
			yyq1240[1] = x.Signal != 0
			yyq1240[2] = x.Reason != ""
			yyq1240[3] = x.Message != ""
			yyq1240[4] = true
			yyq1240[5] = true
			yyq1240[6] = x.ContainerID != ""
			var yynn1240 int
			if yyr1240 || yy2arr1240 {
				r.EncodeArrayStart(7)
			} else {
				yynn1240 = 1
				for _, b := range yyq1240 {
					if b {
						yynn1240++
					}
				}
				r.EncodeMapStart(yynn1240)
				yynn1240 = 0
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1242 := z.EncBinary()
				_ = yym1242
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1243 := z.EncBinary()
				_ = yym1243
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[1] {
					yym1245 := z.EncBinary()
					_ = yym1245
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1240[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1246 := z.EncBinary()
					_ = yym1246
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[2] {
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1240[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1249 := z.EncBinary()
					_ = yym1249
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[3] {
					yym1251 := z.EncBinary()
					_ = yym1251
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1240[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[4] {
					yy1254 := &x.StartedAt
					yym1255 := z.EncBinary()
					_ = yym1255
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1254) {
					} else if yym1255 {
						z.EncBinaryMarshal(yy1254)
					} else if !yym1255 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1254)
					} else {
						z.EncFallback(yy1254)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1240[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1256 := &x.StartedAt
					yym1257 := z.EncBinary()
					_ = yym1257
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1256) {
					} else if yym1257 {
						z.EncBinaryMarshal(yy1256)
					} else if !yym1257 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1256)
					} else {
						z.EncFallback(yy1256)
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[5] {
					yy1259 := &x.FinishedAt
					yym1260 := z.EncBinary()
					_ = yym1260
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1259) {
					} else if yym1260 {
						z.EncBinaryMarshal(yy1259)
					} else if !yym1260 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1259)
					} else {
						z.EncFallback(yy1259)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1240[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1261 := &x.FinishedAt
					yym1262 := z.EncBinary()
					_ = yym1262
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1261) {
					} else if yym1262 {
						z.EncBinaryMarshal(yy1261)
					} else if !yym1262 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1261)
					} else {
						z.EncFallback(yy1261)
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1240[6] {
					yym1264 := z.EncBinary()
					_ = yym1264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1240[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1265 := z.EncBinary()
					_ = yym1265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1240 || yy2arr1240 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1266 := z.DecBinary()
	_ = yym1266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1267 := r.ContainerType()
		if yyct1267 == codecSelferValueTypeMap1234 {
			yyl1267 := r.ReadMapStart()
			if yyl1267 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1267, d)
			}
		} else if yyct1267 == codecSelferValueTypeArray1234 {
			yyl1267 := r.ReadArrayStart()
			if yyl1267 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1267, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1268Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1268Slc
	var yyhl1268 bool = l >= 0
	for yyj1268 := 0; ; yyj1268++ {
		if yyhl1268 {
			if yyj1268 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1268Slc = r.DecodeBytes(yys1268Slc, true, true)
		yys1268 := string(yys1268Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1268 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1273 := &x.StartedAt
				yym1274 := z.DecBinary()
				_ = yym1274
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1273) {
				} else if yym1274 {
					z.DecBinaryUnmarshal(yyv1273)
				} else if !yym1274 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1273)
				} else {
					z.DecFallback(yyv1273, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1275 := &x.FinishedAt
				yym1276 := z.DecBinary()
				_ = yym1276
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1275) {
				} else if yym1276 {
					z.DecBinaryUnmarshal(yyv1275)
				} else if !yym1276 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1275)
				} else {
					z.DecFallback(yyv1275, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1268)
		} // end switch yys1268
	} // end for yyj1268
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1278 int
	var yyb1278 bool
	var yyhl1278 bool = l >= 0
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1283 := &x.StartedAt
		yym1284 := z.DecBinary()
		_ = yym1284
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1283) {
		} else if yym1284 {
			z.DecBinaryUnmarshal(yyv1283)
		} else if !yym1284 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1283)
		} else {
			z.DecFallback(yyv1283, false)
		}
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1285 := &x.FinishedAt
		yym1286 := z.DecBinary()
		_ = yym1286
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1285) {
		} else if yym1286 {
			z.DecBinaryUnmarshal(yyv1285)
		} else if !yym1286 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1285)
		} else {
			z.DecFallback(yyv1285, false)
		}
	}
	yyj1278++
	if yyhl1278 {
		yyb1278 = yyj1278 > l
	} else {
		yyb1278 = r.CheckBreak()
	}
	if yyb1278 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1278++
		if yyhl1278 {
			yyb1278 = yyj1278 > l
		} else {
			yyb1278 = r.CheckBreak()
		}
		if yyb1278 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1278-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1288 := z.EncBinary()
		_ = yym1288
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1289 := !z.EncBinary()
			yy2arr1289 := z.EncBasicHandle().StructToArray
			var yyq1289 [3]bool
			_, _, _ = yysep1289, yyq1289, yy2arr1289
			const yyr1289 bool = false
			yyq1289[0] = x.Waiting != nil
			yyq1289[1] = x.Running != nil
			yyq1289[2] = x.Terminated != nil
			var yynn1289 int
			if yyr1289 || yy2arr1289 {
				r.EncodeArrayStart(3)
			} else {
				yynn1289 = 0
				for _, b := range yyq1289 {
					if b {
						yynn1289++
					}
				}
				r.EncodeMapStart(yynn1289)
				yynn1289 = 0
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1289[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1289[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1289[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1289[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1289 || yy2arr1289 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1293 := z.DecBinary()
	_ = yym1293
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1294 := r.ContainerType()
		if yyct1294 == codecSelferValueTypeMap1234 {
			yyl1294 := r.ReadMapStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1294, d)
			}
		} else if yyct1294 == codecSelferValueTypeArray1234 {
			yyl1294 := r.ReadArrayStart()
			if yyl1294 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1294, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1295Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1295Slc
	var yyhl1295 bool = l >= 0
	for yyj1295 := 0; ; yyj1295++ {
		if yyhl1295 {
			if yyj1295 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1295Slc = r.DecodeBytes(yys1295Slc, true, true)
		yys1295 := string(yys1295Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1295 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1295)
		} // end switch yys1295
	} // end for yyj1295
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1299 int
	var yyb1299 bool
	var yyhl1299 bool = l >= 0
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1299++
		if yyhl1299 {
			yyb1299 = yyj1299 > l
		} else {
			yyb1299 = r.CheckBreak()
		}
		if yyb1299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1303 := z.EncBinary()
		_ = yym1303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1304 := !z.EncBinary()
			yy2arr1304 := z.EncBasicHandle().StructToArray
			var yyq1304 [8]bool
			_, _, _ = yysep1304, yyq1304, yy2arr1304
			const yyr1304 bool = false
			yyq1304[1] = true
			yyq1304[2] = true
			yyq1304[7] = x.ContainerID != ""
			var yynn1304 int
			if yyr1304 || yy2arr1304 {
				r.EncodeArrayStart(8)
			} else {
				yynn1304 = 5
				for _, b := range yyq1304 {
					if b {
						yynn1304++
					}
				}
				r.EncodeMapStart(yynn1304)
				yynn1304 = 0
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1306 := z.EncBinary()
				_ = yym1306
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1307 := z.EncBinary()
				_ = yym1307
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[1] {
					yy1309 := &x.State
					yy1309.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1310 := &x.State
					yy1310.CodecEncodeSelf(e)
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[2] {
					yy1312 := &x.LastTerminationState
					yy1312.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1304[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1313 := &x.LastTerminationState
					yy1313.CodecEncodeSelf(e)
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1315 := z.EncBinary()
				_ = yym1315
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1316 := z.EncBinary()
				_ = yym1316
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1318 := z.EncBinary()
				_ = yym1318
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1319 := z.EncBinary()
				_ = yym1319
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1321 := z.EncBinary()
				_ = yym1321
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1322 := z.EncBinary()
				_ = yym1322
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1324 := z.EncBinary()
				_ = yym1324
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1325 := z.EncBinary()
				_ = yym1325
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1304[7] {
					yym1327 := z.EncBinary()
					_ = yym1327
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1304[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1304 || yy2arr1304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1329 := z.DecBinary()
	_ = yym1329
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1330 := r.ContainerType()
		if yyct1330 == codecSelferValueTypeMap1234 {
			yyl1330 := r.ReadMapStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1330, d)
			}
		} else if yyct1330 == codecSelferValueTypeArray1234 {
			yyl1330 := r.ReadArrayStart()
			if yyl1330 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1330, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1331Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1331Slc
	var yyhl1331 bool = l >= 0
	for yyj1331 := 0; ; yyj1331++ {
		if yyhl1331 {
			if yyj1331 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1331Slc = r.DecodeBytes(yys1331Slc, true, true)
		yys1331 := string(yys1331Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1331 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1333 := &x.State
				yyv1333.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1334 := &x.LastTerminationState
				yyv1334.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1331)
		} // end switch yys1331
	} // end for yyj1331
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1340 int
	var yyb1340 bool
	var yyhl1340 bool = l >= 0
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1342 := &x.State
		yyv1342.CodecDecodeSelf(d)
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1343 := &x.LastTerminationState
		yyv1343.CodecDecodeSelf(d)
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1340++
	if yyhl1340 {
		yyb1340 = yyj1340 > l
	} else {
		yyb1340 = r.CheckBreak()
	}
	if yyb1340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1340++
		if yyhl1340 {
			yyb1340 = yyj1340 > l
		} else {
			yyb1340 = r.CheckBreak()
		}
		if yyb1340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1349 := z.EncBinary()
	_ = yym1349
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1350 := z.DecBinary()
	_ = yym1350
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1351 := z.EncBinary()
	_ = yym1351
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1352 := z.DecBinary()
	_ = yym1352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1353 := z.EncBinary()
		_ = yym1353
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1354 := !z.EncBinary()
			yy2arr1354 := z.EncBasicHandle().StructToArray
			var yyq1354 [6]bool
			_, _, _ = yysep1354, yyq1354, yy2arr1354
			const yyr1354 bool = false
			yyq1354[2] = true
			yyq1354[3] = true
			yyq1354[4] = x.Reason != ""
			yyq1354[5] = x.Message != ""
			var yynn1354 int
			if yyr1354 || yy2arr1354 {
				r.EncodeArrayStart(6)
			} else {
				yynn1354 = 2
				for _, b := range yyq1354 {
					if b {
						yynn1354++
					}
				}
				r.EncodeMapStart(yynn1354)
				yynn1354 = 0
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[2] {
					yy1358 := &x.LastProbeTime
					yym1359 := z.EncBinary()
					_ = yym1359
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1358) {
					} else if yym1359 {
						z.EncBinaryMarshal(yy1358)
					} else if !yym1359 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1358)
					} else {
						z.EncFallback(yy1358)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1354[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1360 := &x.LastProbeTime
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1360) {
					} else if yym1361 {
						z.EncBinaryMarshal(yy1360)
					} else if !yym1361 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1360)
					} else {
						z.EncFallback(yy1360)
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[3] {
					yy1363 := &x.LastTransitionTime
					yym1364 := z.EncBinary()
					_ = yym1364
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1363) {
					} else if yym1364 {
						z.EncBinaryMarshal(yy1363)
					} else if !yym1364 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1363)
					} else {
						z.EncFallback(yy1363)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1354[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1365 := &x.LastTransitionTime
					yym1366 := z.EncBinary()
					_ = yym1366
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1365) {
					} else if yym1366 {
						z.EncBinaryMarshal(yy1365)
					} else if !yym1366 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1365)
					} else {
						z.EncFallback(yy1365)
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[4] {
					yym1368 := z.EncBinary()
					_ = yym1368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1354[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1369 := z.EncBinary()
					_ = yym1369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1354[5] {
					yym1371 := z.EncBinary()
					_ = yym1371
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1354[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1372 := z.EncBinary()
					_ = yym1372
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1354 || yy2arr1354 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1373 := z.DecBinary()
	_ = yym1373
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1374 := r.ContainerType()
		if yyct1374 == codecSelferValueTypeMap1234 {
			yyl1374 := r.ReadMapStart()
			if yyl1374 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1374, d)
			}
		} else if yyct1374 == codecSelferValueTypeArray1234 {
			yyl1374 := r.ReadArrayStart()
			if yyl1374 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1374, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1375Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1375Slc
	var yyhl1375 bool = l >= 0
	for yyj1375 := 0; ; yyj1375++ {
		if yyhl1375 {
			if yyj1375 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1375Slc = r.DecodeBytes(yys1375Slc, true, true)
		yys1375 := string(yys1375Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1375 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1378 := &x.LastProbeTime
				yym1379 := z.DecBinary()
				_ = yym1379
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1378) {
				} else if yym1379 {
					z.DecBinaryUnmarshal(yyv1378)
				} else if !yym1379 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1378)
				} else {
					z.DecFallback(yyv1378, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1380 := &x.LastTransitionTime
				yym1381 := z.DecBinary()
				_ = yym1381
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1380) {
				} else if yym1381 {
					z.DecBinaryUnmarshal(yyv1380)
				} else if !yym1381 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1380)
				} else {
					z.DecFallback(yyv1380, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1375)
		} // end switch yys1375
	} // end for yyj1375
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1384 int
	var yyb1384 bool
	var yyhl1384 bool = l >= 0
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1387 := &x.LastProbeTime
		yym1388 := z.DecBinary()
		_ = yym1388
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1387) {
		} else if yym1388 {
			z.DecBinaryUnmarshal(yyv1387)
		} else if !yym1388 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1387)
		} else {
			z.DecFallback(yyv1387, false)
		}
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1389 := &x.LastTransitionTime
		yym1390 := z.DecBinary()
		_ = yym1390
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1389) {
		} else if yym1390 {
			z.DecBinaryUnmarshal(yyv1389)
		} else if !yym1390 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1389)
		} else {
			z.DecFallback(yyv1389, false)
		}
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1384++
	if yyhl1384 {
		yyb1384 = yyj1384 > l
	} else {
		yyb1384 = r.CheckBreak()
	}
	if yyb1384 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1384++
		if yyhl1384 {
			yyb1384 = yyj1384 > l
		} else {
			yyb1384 = r.CheckBreak()
		}
		if yyb1384 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1384-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1393 := z.EncBinary()
	_ = yym1393
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1394 := z.DecBinary()
	_ = yym1394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1395 := z.EncBinary()
		_ = yym1395
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1396 := !z.EncBinary()
			yy2arr1396 := z.EncBasicHandle().StructToArray
			var yyq1396 [4]bool
			_, _, _ = yysep1396, yyq1396, yy2arr1396
			const yyr1396 bool = false
			yyq1396[0] = x.Kind != ""
			yyq1396[1] = x.APIVersion != ""
			yyq1396[2] = true
			var yynn1396 int
			if yyr1396 || yy2arr1396 {
				r.EncodeArrayStart(4)
			} else {
				yynn1396 = 1
				for _, b := range yyq1396 {
					if b {
						yynn1396++
					}
				}
				r.EncodeMapStart(yynn1396)
				yynn1396 = 0
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1396[0] {
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1396[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1396[1] {
					yym1401 := z.EncBinary()
					_ = yym1401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1396[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1402 := z.EncBinary()
					_ = yym1402
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1396[2] {
					yy1404 := &x.ListMeta
					yym1405 := z.EncBinary()
					_ = yym1405
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1404) {
					} else {
						z.EncFallback(yy1404)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1396[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1406 := &x.ListMeta
					yym1407 := z.EncBinary()
					_ = yym1407
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1406) {
					} else {
						z.EncFallback(yy1406)
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1409 := z.EncBinary()
					_ = yym1409
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1410 := z.EncBinary()
					_ = yym1410
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1396 || yy2arr1396 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1411 := z.DecBinary()
	_ = yym1411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1412 := r.ContainerType()
		if yyct1412 == codecSelferValueTypeMap1234 {
			yyl1412 := r.ReadMapStart()
			if yyl1412 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1412, d)
			}
		} else if yyct1412 == codecSelferValueTypeArray1234 {
			yyl1412 := r.ReadArrayStart()
			if yyl1412 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1412, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1413Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1413Slc
	var yyhl1413 bool = l >= 0
	for yyj1413 := 0; ; yyj1413++ {
		if yyhl1413 {
			if yyj1413 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1413Slc = r.DecodeBytes(yys1413Slc, true, true)
		yys1413 := string(yys1413Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1413 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1416 := &x.ListMeta
				yym1417 := z.DecBinary()
				_ = yym1417
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1416) {
				} else {
					z.DecFallback(yyv1416, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1418 := &x.Items
				yym1419 := z.DecBinary()
				_ = yym1419
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1418), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1413)
		} // end switch yys1413
	} // end for yyj1413
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1420 int
	var yyb1420 bool
	var yyhl1420 bool = l >= 0
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1423 := &x.ListMeta
		yym1424 := z.DecBinary()
		_ = yym1424
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1423) {
		} else {
			z.DecFallback(yyv1423, false)
		}
	}
	yyj1420++
	if yyhl1420 {
		yyb1420 = yyj1420 > l
	} else {
		yyb1420 = r.CheckBreak()
	}
	if yyb1420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1425 := &x.Items
		yym1426 := z.DecBinary()
		_ = yym1426
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1425), d)
		}
	}
	for {
		yyj1420++
		if yyhl1420 {
			yyb1420 = yyj1420 > l
		} else {
			yyb1420 = r.CheckBreak()
		}
		if yyb1420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1427 := z.EncBinary()
	_ = yym1427
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1428 := z.DecBinary()
	_ = yym1428
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1429 := z.EncBinary()
		_ = yym1429
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1430 := !z.EncBinary()
			yy2arr1430 := z.EncBasicHandle().StructToArray
			var yyq1430 [11]bool
			_, _, _ = yysep1430, yyq1430, yy2arr1430
			const yyr1430 bool = false
			yyq1430[2] = x.RestartPolicy != ""
			yyq1430[3] = x.TerminationGracePeriodSeconds != nil
			yyq1430[4] = x.ActiveDeadlineSeconds != nil
			yyq1430[5] = x.DNSPolicy != ""
			yyq1430[6] = len(x.NodeSelector) != 0
			yyq1430[8] = x.NodeName != ""
			yyq1430[9] = x.SecurityContext != nil
			yyq1430[10] = len(x.ImagePullSecrets) != 0
			var yynn1430 int
			if yyr1430 || yy2arr1430 {
				r.EncodeArrayStart(11)
			} else {
				yynn1430 = 3
				for _, b := range yyq1430 {
					if b {
						yynn1430++
					}
				}
				r.EncodeMapStart(yynn1430)
				yynn1430 = 0
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1432 := z.EncBinary()
					_ = yym1432
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1435 := z.EncBinary()
					_ = yym1435
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym1436 := z.EncBinary()
					_ = yym1436
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1430[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1439 := *x.TerminationGracePeriodSeconds
						yym1440 := z.EncBinary()
						_ = yym1440
						if false {
						} else {
							r.EncodeInt(int64(yy1439))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy1441 := *x.TerminationGracePeriodSeconds
						yym1442 := z.EncBinary()
						_ = yym1442
						if false {
						} else {
							r.EncodeInt(int64(yy1441))
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1444 := *x.ActiveDeadlineSeconds
						yym1445 := z.EncBinary()
						_ = yym1445
						if false {
						} else {
							r.EncodeInt(int64(yy1444))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy1446 := *x.ActiveDeadlineSeconds
						yym1447 := z.EncBinary()
						_ = yym1447
						if false {
						} else {
							r.EncodeInt(int64(yy1446))
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1430[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1450 := z.EncBinary()
						_ = yym1450
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym1451 := z.EncBinary()
						_ = yym1451
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1453 := z.EncBinary()
				_ = yym1453
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1454 := z.EncBinary()
				_ = yym1454
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[8] {
					yym1456 := z.EncBinary()
					_ = yym1456
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1430[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1457 := z.EncBinary()
					_ = yym1457
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1430[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1460 := z.EncBinary()
						_ = yym1460
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1430[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr1430 || yy2arr1430 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1462 := z.DecBinary()
	_ = yym1462
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1463 := r.ContainerType()
		if yyct1463 == codecSelferValueTypeMap1234 {
			yyl1463 := r.ReadMapStart()
			if yyl1463 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1463, d)
			}
		} else if yyct1463 == codecSelferValueTypeArray1234 {
			yyl1463 := r.ReadArrayStart()
			if yyl1463 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1463, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1464Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1464Slc
	var yyhl1464 bool = l >= 0
	for yyj1464 := 0; ; yyj1464++ {
		if yyhl1464 {
			if yyj1464 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1464Slc = r.DecodeBytes(yys1464Slc, true, true)
		yys1464 := string(yys1464Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1464 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1465 := &x.Volumes
				yym1466 := z.DecBinary()
				_ = yym1466
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv1465), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv1467 := &x.Containers
				yym1468 := z.DecBinary()
				_ = yym1468
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv1467), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym1471 := z.DecBinary()
				_ = yym1471
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym1473 := z.DecBinary()
				_ = yym1473
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv1475 := &x.NodeSelector
				yym1476 := z.DecBinary()
				_ = yym1476
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1475, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv1480 := &x.ImagePullSecrets
				yym1481 := z.DecBinary()
				_ = yym1481
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1480), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1464)
		} // end switch yys1464
	} // end for yyj1464
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1482 int
	var yyb1482 bool
	var yyhl1482 bool = l >= 0
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1483 := &x.Volumes
		yym1484 := z.DecBinary()
		_ = yym1484
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv1483), d)
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv1485 := &x.Containers
		yym1486 := z.DecBinary()
		_ = yym1486
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv1485), d)
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym1489 := z.DecBinary()
		_ = yym1489
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym1491 := z.DecBinary()
		_ = yym1491
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv1493 := &x.NodeSelector
		yym1494 := z.DecBinary()
		_ = yym1494
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1493, false, d)
		}
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1482++
	if yyhl1482 {
		yyb1482 = yyj1482 > l
	} else {
		yyb1482 = r.CheckBreak()
	}
	if yyb1482 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv1498 := &x.ImagePullSecrets
		yym1499 := z.DecBinary()
		_ = yym1499
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv1498), d)
		}
	}
	for {
		yyj1482++
		if yyhl1482 {
			yyb1482 = yyj1482 > l
		} else {
			yyb1482 = r.CheckBreak()
		}
		if yyb1482 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1482-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1500 := z.EncBinary()
		_ = yym1500
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1501 := !z.EncBinary()
			yy2arr1501 := z.EncBasicHandle().StructToArray
			var yyq1501 [8]bool
			_, _, _ = yysep1501, yyq1501, yy2arr1501
			const yyr1501 bool = false
			yyq1501[0] = x.HostNetwork != false
			yyq1501[1] = x.HostPID != false
			yyq1501[2] = x.HostIPC != false
			yyq1501[3] = x.SELinuxOptions != nil
			yyq1501[4] = x.RunAsUser != nil
			yyq1501[5] = x.RunAsNonRoot != nil
			yyq1501[6] = len(x.SupplementalGroups) != 0
			yyq1501[7] = x.FSGroup != nil
			var yynn1501 int
			if yyr1501 || yy2arr1501 {
				r.EncodeArrayStart(8)
			} else {
				yynn1501 = 0
				for _, b := range yyq1501 {
					if b {
						yynn1501++
					}
				}
				r.EncodeMapStart(yynn1501)
				yynn1501 = 0
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[0] {
					yym1503 := z.EncBinary()
					_ = yym1503
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1501[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1504 := z.EncBinary()
					_ = yym1504
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[1] {
					yym1506 := z.EncBinary()
					_ = yym1506
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1501[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1507 := z.EncBinary()
					_ = yym1507
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[2] {
					yym1509 := z.EncBinary()
					_ = yym1509
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1501[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1513 := *x.RunAsUser
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else {
							r.EncodeInt(int64(yy1513))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy1515 := *x.RunAsUser
						yym1516 := z.EncBinary()
						_ = yym1516
						if false {
						} else {
							r.EncodeInt(int64(yy1515))
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1518 := *x.RunAsNonRoot
						yym1519 := z.EncBinary()
						_ = yym1519
						if false {
						} else {
							r.EncodeBool(bool(yy1518))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy1520 := *x.RunAsNonRoot
						yym1521 := z.EncBinary()
						_ = yym1521
						if false {
						} else {
							r.EncodeBool(bool(yy1520))
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1523 := z.EncBinary()
						_ = yym1523
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym1524 := z.EncBinary()
						_ = yym1524
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1501[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1526 := *x.FSGroup
						yym1527 := z.EncBinary()
						_ = yym1527
						if false {
						} else {
							r.EncodeInt(int64(yy1526))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1501[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy1528 := *x.FSGroup
						yym1529 := z.EncBinary()
						_ = yym1529
						if false {
						} else {
							r.EncodeInt(int64(yy1528))
						}
					}
				}
			}
			if yyr1501 || yy2arr1501 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1530 := z.DecBinary()
	_ = yym1530
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1531 := r.ContainerType()
		if yyct1531 == codecSelferValueTypeMap1234 {
			yyl1531 := r.ReadMapStart()
			if yyl1531 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1531, d)
			}
		} else if yyct1531 == codecSelferValueTypeArray1234 {
			yyl1531 := r.ReadArrayStart()
			if yyl1531 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1531, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1532Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1532Slc
	var yyhl1532 bool = l >= 0
	for yyj1532 := 0; ; yyj1532++ {
		if yyhl1532 {
			if yyj1532 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1532Slc = r.DecodeBytes(yys1532Slc, true, true)
		yys1532 := string(yys1532Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1532 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym1538 := z.DecBinary()
				_ = yym1538
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym1540 := z.DecBinary()
				_ = yym1540
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv1541 := &x.SupplementalGroups
				yym1542 := z.DecBinary()
				_ = yym1542
				if false {
				} else {
					z.F.DecSliceInt64X(yyv1541, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym1544 := z.DecBinary()
				_ = yym1544
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1532)
		} // end switch yys1532
	} // end for yyj1532
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1545 int
	var yyb1545 bool
	var yyhl1545 bool = l >= 0
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym1551 := z.DecBinary()
		_ = yym1551
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym1553 := z.DecBinary()
		_ = yym1553
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv1554 := &x.SupplementalGroups
		yym1555 := z.DecBinary()
		_ = yym1555
		if false {
		} else {
			z.F.DecSliceInt64X(yyv1554, false, d)
		}
	}
	yyj1545++
	if yyhl1545 {
		yyb1545 = yyj1545 > l
	} else {
		yyb1545 = r.CheckBreak()
	}
	if yyb1545 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym1557 := z.DecBinary()
		_ = yym1557
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj1545++
		if yyhl1545 {
			yyb1545 = yyj1545 > l
		} else {
			yyb1545 = r.CheckBreak()
		}
		if yyb1545 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1545-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1558 := z.EncBinary()
		_ = yym1558
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1559 := !z.EncBinary()
			yy2arr1559 := z.EncBasicHandle().StructToArray
			var yyq1559 [8]bool
			_, _, _ = yysep1559, yyq1559, yy2arr1559
			const yyr1559 bool = false
			yyq1559[0] = x.Phase != ""
			yyq1559[1] = len(x.Conditions) != 0
			yyq1559[2] = x.Message != ""
			yyq1559[3] = x.Reason != ""
			yyq1559[4] = x.HostIP != ""
			yyq1559[5] = x.PodIP != ""
			yyq1559[6] = x.StartTime != nil
			yyq1559[7] = len(x.ContainerStatuses) != 0
			var yynn1559 int
			if yyr1559 || yy2arr1559 {
				r.EncodeArrayStart(8)
			} else {
				yynn1559 = 0
				for _, b := range yyq1559 {
					if b {
						yynn1559++
					}
				}
				r.EncodeMapStart(yynn1559)
				yynn1559 = 0
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1562 := z.EncBinary()
						_ = yym1562
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1563 := z.EncBinary()
						_ = yym1563
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[2] {
					yym1565 := z.EncBinary()
					_ = yym1565
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1566 := z.EncBinary()
					_ = yym1566
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[3] {
					yym1568 := z.EncBinary()
					_ = yym1568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1569 := z.EncBinary()
					_ = yym1569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[4] {
					yym1571 := z.EncBinary()
					_ = yym1571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1572 := z.EncBinary()
					_ = yym1572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[5] {
					yym1574 := z.EncBinary()
					_ = yym1574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1559[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1575 := z.EncBinary()
					_ = yym1575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1577 := z.EncBinary()
						_ = yym1577
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1577 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1577 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym1578 := z.EncBinary()
						_ = yym1578
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym1578 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym1578 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1559[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1580 := z.EncBinary()
						_ = yym1580
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1559[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym1581 := z.EncBinary()
						_ = yym1581
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr1559 || yy2arr1559 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1582 := z.DecBinary()
	_ = yym1582
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1583 := r.ContainerType()
		if yyct1583 == codecSelferValueTypeMap1234 {
			yyl1583 := r.ReadMapStart()
			if yyl1583 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1583, d)
			}
		} else if yyct1583 == codecSelferValueTypeArray1234 {
			yyl1583 := r.ReadArrayStart()
			if yyl1583 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1583, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1584Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1584Slc
	var yyhl1584 bool = l >= 0
	for yyj1584 := 0; ; yyj1584++ {
		if yyhl1584 {
			if yyj1584 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1584Slc = r.DecodeBytes(yys1584Slc, true, true)
		yys1584 := string(yys1584Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1584 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1586 := &x.Conditions
				yym1587 := z.DecBinary()
				_ = yym1587
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv1586), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym1593 := z.DecBinary()
				_ = yym1593
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym1593 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym1593 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv1594 := &x.ContainerStatuses
				yym1595 := z.DecBinary()
				_ = yym1595
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv1594), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1584)
		} // end switch yys1584
	} // end for yyj1584
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1596 int
	var yyb1596 bool
	var yyhl1596 bool = l >= 0
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1598 := &x.Conditions
		yym1599 := z.DecBinary()
		_ = yym1599
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv1598), d)
		}
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym1605 := z.DecBinary()
		_ = yym1605
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym1605 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym1605 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv1606 := &x.ContainerStatuses
		yym1607 := z.DecBinary()
		_ = yym1607
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv1606), d)
		}
	}
	for {
		yyj1596++
		if yyhl1596 {
			yyb1596 = yyj1596 > l
		} else {
			yyb1596 = r.CheckBreak()
		}
		if yyb1596 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1596-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1608 := z.EncBinary()
		_ = yym1608
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1609 := !z.EncBinary()
			yy2arr1609 := z.EncBasicHandle().StructToArray
			var yyq1609 [4]bool
			_, _, _ = yysep1609, yyq1609, yy2arr1609
			const yyr1609 bool = false
			yyq1609[0] = x.Kind != ""
			yyq1609[1] = x.APIVersion != ""
			yyq1609[2] = true
			yyq1609[3] = true
			var yynn1609 int
			if yyr1609 || yy2arr1609 {
				r.EncodeArrayStart(4)
			} else {
				yynn1609 = 0
				for _, b := range yyq1609 {
					if b {
						yynn1609++
					}
				}
				r.EncodeMapStart(yynn1609)
				yynn1609 = 0
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1609[0] {
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1609[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1609[1] {
					yym1614 := z.EncBinary()
					_ = yym1614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1609[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1609[2] {
					yy1617 := &x.ObjectMeta
					yy1617.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1609[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1618 := &x.ObjectMeta
					yy1618.CodecEncodeSelf(e)
				}
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1609[3] {
					yy1620 := &x.Status
					yy1620.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1609[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1621 := &x.Status
					yy1621.CodecEncodeSelf(e)
				}
			}
			if yyr1609 || yy2arr1609 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1622 := z.DecBinary()
	_ = yym1622
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1623 := r.ContainerType()
		if yyct1623 == codecSelferValueTypeMap1234 {
			yyl1623 := r.ReadMapStart()
			if yyl1623 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1623, d)
			}
		} else if yyct1623 == codecSelferValueTypeArray1234 {
			yyl1623 := r.ReadArrayStart()
			if yyl1623 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1623, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1624Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1624Slc
	var yyhl1624 bool = l >= 0
	for yyj1624 := 0; ; yyj1624++ {
		if yyhl1624 {
			if yyj1624 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1624Slc = r.DecodeBytes(yys1624Slc, true, true)
		yys1624 := string(yys1624Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1624 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1627 := &x.ObjectMeta
				yyv1627.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1628 := &x.Status
				yyv1628.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1624)
		} // end switch yys1624
	} // end for yyj1624
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1629 int
	var yyb1629 bool
	var yyhl1629 bool = l >= 0
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1632 := &x.ObjectMeta
		yyv1632.CodecDecodeSelf(d)
	}
	yyj1629++
	if yyhl1629 {
		yyb1629 = yyj1629 > l
	} else {
		yyb1629 = r.CheckBreak()
	}
	if yyb1629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1633 := &x.Status
		yyv1633.CodecDecodeSelf(d)
	}
	for {
		yyj1629++
		if yyhl1629 {
			yyb1629 = yyj1629 > l
		} else {
			yyb1629 = r.CheckBreak()
		}
		if yyb1629 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1629-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1634 := z.EncBinary()
		_ = yym1634
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1635 := !z.EncBinary()
			yy2arr1635 := z.EncBasicHandle().StructToArray
			var yyq1635 [5]bool
			_, _, _ = yysep1635, yyq1635, yy2arr1635
			const yyr1635 bool = false
			yyq1635[0] = x.Kind != ""
			yyq1635[1] = x.APIVersion != ""
			yyq1635[2] = true
			yyq1635[3] = true
			yyq1635[4] = true
			var yynn1635 int
			if yyr1635 || yy2arr1635 {
				r.EncodeArrayStart(5)
			} else {
				yynn1635 = 0
				for _, b := range yyq1635 {
					if b {
						yynn1635++
					}
				}
				r.EncodeMapStart(yynn1635)
				yynn1635 = 0
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[0] {
					yym1637 := z.EncBinary()
					_ = yym1637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1635[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1638 := z.EncBinary()
					_ = yym1638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[1] {
					yym1640 := z.EncBinary()
					_ = yym1640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1635[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1641 := z.EncBinary()
					_ = yym1641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[2] {
					yy1643 := &x.ObjectMeta
					yy1643.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1644 := &x.ObjectMeta
					yy1644.CodecEncodeSelf(e)
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[3] {
					yy1646 := &x.Spec
					yy1646.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1647 := &x.Spec
					yy1647.CodecEncodeSelf(e)
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1635[4] {
					yy1649 := &x.Status
					yy1649.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1635[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1650 := &x.Status
					yy1650.CodecEncodeSelf(e)
				}
			}
			if yyr1635 || yy2arr1635 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1651 := z.DecBinary()
	_ = yym1651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1652 := r.ContainerType()
		if yyct1652 == codecSelferValueTypeMap1234 {
			yyl1652 := r.ReadMapStart()
			if yyl1652 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1652, d)
			}
		} else if yyct1652 == codecSelferValueTypeArray1234 {
			yyl1652 := r.ReadArrayStart()
			if yyl1652 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1653Slc
	var yyhl1653 bool = l >= 0
	for yyj1653 := 0; ; yyj1653++ {
		if yyhl1653 {
			if yyj1653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1653Slc = r.DecodeBytes(yys1653Slc, true, true)
		yys1653 := string(yys1653Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1653 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1656 := &x.ObjectMeta
				yyv1656.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1657 := &x.Spec
				yyv1657.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv1658 := &x.Status
				yyv1658.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1653)
		} // end switch yys1653
	} // end for yyj1653
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1659 int
	var yyb1659 bool
	var yyhl1659 bool = l >= 0
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1662 := &x.ObjectMeta
		yyv1662.CodecDecodeSelf(d)
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1663 := &x.Spec
		yyv1663.CodecDecodeSelf(d)
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv1664 := &x.Status
		yyv1664.CodecDecodeSelf(d)
	}
	for {
		yyj1659++
		if yyhl1659 {
			yyb1659 = yyj1659 > l
		} else {
			yyb1659 = r.CheckBreak()
		}
		if yyb1659 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1659-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1665 := z.EncBinary()
		_ = yym1665
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1666 := !z.EncBinary()
			yy2arr1666 := z.EncBasicHandle().StructToArray
			var yyq1666 [2]bool
			_, _, _ = yysep1666, yyq1666, yy2arr1666
			const yyr1666 bool = false
			yyq1666[0] = true
			yyq1666[1] = true
			var yynn1666 int
			if yyr1666 || yy2arr1666 {
				r.EncodeArrayStart(2)
			} else {
				yynn1666 = 0
				for _, b := range yyq1666 {
					if b {
						yynn1666++
					}
				}
				r.EncodeMapStart(yynn1666)
				yynn1666 = 0
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1666[0] {
					yy1668 := &x.ObjectMeta
					yy1668.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1669 := &x.ObjectMeta
					yy1669.CodecEncodeSelf(e)
				}
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1666[1] {
					yy1671 := &x.Spec
					yy1671.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1666[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1672 := &x.Spec
					yy1672.CodecEncodeSelf(e)
				}
			}
			if yyr1666 || yy2arr1666 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1673 := z.DecBinary()
	_ = yym1673
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1674 := r.ContainerType()
		if yyct1674 == codecSelferValueTypeMap1234 {
			yyl1674 := r.ReadMapStart()
			if yyl1674 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1674, d)
			}
		} else if yyct1674 == codecSelferValueTypeArray1234 {
			yyl1674 := r.ReadArrayStart()
			if yyl1674 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1674, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1675Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1675Slc
	var yyhl1675 bool = l >= 0
	for yyj1675 := 0; ; yyj1675++ {
		if yyhl1675 {
			if yyj1675 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1675Slc = r.DecodeBytes(yys1675Slc, true, true)
		yys1675 := string(yys1675Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1675 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1676 := &x.ObjectMeta
				yyv1676.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv1677 := &x.Spec
				yyv1677.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1675)
		} // end switch yys1675
	} // end for yyj1675
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1678 int
	var yyb1678 bool
	var yyhl1678 bool = l >= 0
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1679 := &x.ObjectMeta
		yyv1679.CodecDecodeSelf(d)
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv1680 := &x.Spec
		yyv1680.CodecDecodeSelf(d)
	}
	for {
		yyj1678++
		if yyhl1678 {
			yyb1678 = yyj1678 > l
		} else {
			yyb1678 = r.CheckBreak()
		}
		if yyb1678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1681 := z.EncBinary()
		_ = yym1681
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1682 := !z.EncBinary()
			yy2arr1682 := z.EncBasicHandle().StructToArray
			var yyq1682 [4]bool
			_, _, _ = yysep1682, yyq1682, yy2arr1682
			const yyr1682 bool = false
			yyq1682[0] = x.Kind != ""
			yyq1682[1] = x.APIVersion != ""
			yyq1682[2] = true
			yyq1682[3] = true
			var yynn1682 int
			if yyr1682 || yy2arr1682 {
				r.EncodeArrayStart(4)
			} else {
				yynn1682 = 0
				for _, b := range yyq1682 {
					if b {
						yynn1682++
					}
				}
				r.EncodeMapStart(yynn1682)
				yynn1682 = 0
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[0] {
					yym1684 := z.EncBinary()
					_ = yym1684
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1685 := z.EncBinary()
					_ = yym1685
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[1] {
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1682[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[2] {
					yy1690 := &x.ObjectMeta
					yy1690.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1691 := &x.ObjectMeta
					yy1691.CodecEncodeSelf(e)
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1682[3] {
					yy1693 := &x.Template
					yy1693.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1682[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1694 := &x.Template
					yy1694.CodecEncodeSelf(e)
				}
			}
			if yyr1682 || yy2arr1682 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1695 := z.DecBinary()
	_ = yym1695
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1696 := r.ContainerType()
		if yyct1696 == codecSelferValueTypeMap1234 {
			yyl1696 := r.ReadMapStart()
			if yyl1696 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1696, d)
			}
		} else if yyct1696 == codecSelferValueTypeArray1234 {
			yyl1696 := r.ReadArrayStart()
			if yyl1696 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1696, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1697Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1697Slc
	var yyhl1697 bool = l >= 0
	for yyj1697 := 0; ; yyj1697++ {
		if yyhl1697 {
			if yyj1697 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1697Slc = r.DecodeBytes(yys1697Slc, true, true)
		yys1697 := string(yys1697Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1697 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1700 := &x.ObjectMeta
				yyv1700.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv1701 := &x.Template
				yyv1701.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1697)
		} // end switch yys1697
	} // end for yyj1697
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1702 int
	var yyb1702 bool
	var yyhl1702 bool = l >= 0
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1705 := &x.ObjectMeta
		yyv1705.CodecDecodeSelf(d)
	}
	yyj1702++
	if yyhl1702 {
		yyb1702 = yyj1702 > l
	} else {
		yyb1702 = r.CheckBreak()
	}
	if yyb1702 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv1706 := &x.Template
		yyv1706.CodecDecodeSelf(d)
	}
	for {
		yyj1702++
		if yyhl1702 {
			yyb1702 = yyj1702 > l
		} else {
			yyb1702 = r.CheckBreak()
		}
		if yyb1702 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1702-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1707 := z.EncBinary()
		_ = yym1707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1708 := !z.EncBinary()
			yy2arr1708 := z.EncBasicHandle().StructToArray
			var yyq1708 [4]bool
			_, _, _ = yysep1708, yyq1708, yy2arr1708
			const yyr1708 bool = false
			yyq1708[0] = x.Kind != ""
			yyq1708[1] = x.APIVersion != ""
			yyq1708[2] = true
			var yynn1708 int
			if yyr1708 || yy2arr1708 {
				r.EncodeArrayStart(4)
			} else {
				yynn1708 = 1
				for _, b := range yyq1708 {
					if b {
						yynn1708++
					}
				}
				r.EncodeMapStart(yynn1708)
				yynn1708 = 0
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[0] {
					yym1710 := z.EncBinary()
					_ = yym1710
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1711 := z.EncBinary()
					_ = yym1711
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[1] {
					yym1713 := z.EncBinary()
					_ = yym1713
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1714 := z.EncBinary()
					_ = yym1714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1708[2] {
					yy1716 := &x.ListMeta
					yym1717 := z.EncBinary()
					_ = yym1717
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1716) {
					} else {
						z.EncFallback(yy1716)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1708[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1718 := &x.ListMeta
					yym1719 := z.EncBinary()
					_ = yym1719
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1718) {
					} else {
						z.EncFallback(yy1718)
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1721 := z.EncBinary()
					_ = yym1721
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1722 := z.EncBinary()
					_ = yym1722
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr1708 || yy2arr1708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1723 := z.DecBinary()
	_ = yym1723
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1724 := r.ContainerType()
		if yyct1724 == codecSelferValueTypeMap1234 {
			yyl1724 := r.ReadMapStart()
			if yyl1724 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1724, d)
			}
		} else if yyct1724 == codecSelferValueTypeArray1234 {
			yyl1724 := r.ReadArrayStart()
			if yyl1724 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1724, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1725Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1725Slc
	var yyhl1725 bool = l >= 0
	for yyj1725 := 0; ; yyj1725++ {
		if yyhl1725 {
			if yyj1725 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1725Slc = r.DecodeBytes(yys1725Slc, true, true)
		yys1725 := string(yys1725Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1725 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1728 := &x.ListMeta
				yym1729 := z.DecBinary()
				_ = yym1729
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1728) {
				} else {
					z.DecFallback(yyv1728, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1730 := &x.Items
				yym1731 := z.DecBinary()
				_ = yym1731
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv1730), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1725)
		} // end switch yys1725
	} // end for yyj1725
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1732 int
	var yyb1732 bool
	var yyhl1732 bool = l >= 0
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1735 := &x.ListMeta
		yym1736 := z.DecBinary()
		_ = yym1736
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1735) {
		} else {
			z.DecFallback(yyv1735, false)
		}
	}
	yyj1732++
	if yyhl1732 {
		yyb1732 = yyj1732 > l
	} else {
		yyb1732 = r.CheckBreak()
	}
	if yyb1732 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1737 := &x.Items
		yym1738 := z.DecBinary()
		_ = yym1738
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv1737), d)
		}
	}
	for {
		yyj1732++
		if yyhl1732 {
			yyb1732 = yyj1732 > l
		} else {
			yyb1732 = r.CheckBreak()
		}
		if yyb1732 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1732-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1739 := z.EncBinary()
		_ = yym1739
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1740 := !z.EncBinary()
			yy2arr1740 := z.EncBasicHandle().StructToArray
			var yyq1740 [3]bool
			_, _, _ = yysep1740, yyq1740, yy2arr1740
			const yyr1740 bool = false
			yyq1740[2] = x.Template != nil
			var yynn1740 int
			if yyr1740 || yy2arr1740 {
				r.EncodeArrayStart(3)
			} else {
				yynn1740 = 2
				for _, b := range yyq1740 {
					if b {
						yynn1740++
					}
				}
				r.EncodeMapStart(yynn1740)
				yynn1740 = 0
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1742 := z.EncBinary()
				_ = yym1742
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1743 := z.EncBinary()
				_ = yym1743
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1745 := z.EncBinary()
					_ = yym1745
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1746 := z.EncBinary()
					_ = yym1746
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1740[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1740[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1740 || yy2arr1740 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1748 := z.DecBinary()
	_ = yym1748
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1749 := r.ContainerType()
		if yyct1749 == codecSelferValueTypeMap1234 {
			yyl1749 := r.ReadMapStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1749, d)
			}
		} else if yyct1749 == codecSelferValueTypeArray1234 {
			yyl1749 := r.ReadArrayStart()
			if yyl1749 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1749, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1750Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1750Slc
	var yyhl1750 bool = l >= 0
	for yyj1750 := 0; ; yyj1750++ {
		if yyhl1750 {
			if yyj1750 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1750Slc = r.DecodeBytes(yys1750Slc, true, true)
		yys1750 := string(yys1750Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1750 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1752 := &x.Selector
				yym1753 := z.DecBinary()
				_ = yym1753
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1752, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1750)
		} // end switch yys1750
	} // end for yyj1750
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1755 int
	var yyb1755 bool
	var yyhl1755 bool = l >= 0
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1757 := &x.Selector
		yym1758 := z.DecBinary()
		_ = yym1758
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1757, false, d)
		}
	}
	yyj1755++
	if yyhl1755 {
		yyb1755 = yyj1755 > l
	} else {
		yyb1755 = r.CheckBreak()
	}
	if yyb1755 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj1755++
		if yyhl1755 {
			yyb1755 = yyj1755 > l
		} else {
			yyb1755 = r.CheckBreak()
		}
		if yyb1755 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1755-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1760 := z.EncBinary()
		_ = yym1760
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1761 := !z.EncBinary()
			yy2arr1761 := z.EncBasicHandle().StructToArray
			var yyq1761 [2]bool
			_, _, _ = yysep1761, yyq1761, yy2arr1761
			const yyr1761 bool = false
			yyq1761[1] = x.ObservedGeneration != 0
			var yynn1761 int
			if yyr1761 || yy2arr1761 {
				r.EncodeArrayStart(2)
			} else {
				yynn1761 = 1
				for _, b := range yyq1761 {
					if b {
						yynn1761++
					}
				}
				r.EncodeMapStart(yynn1761)
				yynn1761 = 0
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1763 := z.EncBinary()
				_ = yym1763
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1764 := z.EncBinary()
				_ = yym1764
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1761[1] {
					yym1766 := z.EncBinary()
					_ = yym1766
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1761[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1761 || yy2arr1761 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1768 := z.DecBinary()
	_ = yym1768
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1769 := r.ContainerType()
		if yyct1769 == codecSelferValueTypeMap1234 {
			yyl1769 := r.ReadMapStart()
			if yyl1769 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1769, d)
			}
		} else if yyct1769 == codecSelferValueTypeArray1234 {
			yyl1769 := r.ReadArrayStart()
			if yyl1769 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1769, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1770Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1770Slc
	var yyhl1770 bool = l >= 0
	for yyj1770 := 0; ; yyj1770++ {
		if yyhl1770 {
			if yyj1770 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1770Slc = r.DecodeBytes(yys1770Slc, true, true)
		yys1770 := string(yys1770Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1770 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1770)
		} // end switch yys1770
	} // end for yyj1770
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1773 int
	var yyb1773 bool
	var yyhl1773 bool = l >= 0
	yyj1773++
	if yyhl1773 {
		yyb1773 = yyj1773 > l
	} else {
		yyb1773 = r.CheckBreak()
	}
	if yyb1773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1773++
	if yyhl1773 {
		yyb1773 = yyj1773 > l
	} else {
		yyb1773 = r.CheckBreak()
	}
	if yyb1773 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj1773++
		if yyhl1773 {
			yyb1773 = yyj1773 > l
		} else {
			yyb1773 = r.CheckBreak()
		}
		if yyb1773 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1773-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1776 := z.EncBinary()
		_ = yym1776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1777 := !z.EncBinary()
			yy2arr1777 := z.EncBasicHandle().StructToArray
			var yyq1777 [5]bool
			_, _, _ = yysep1777, yyq1777, yy2arr1777
			const yyr1777 bool = false
			yyq1777[0] = x.Kind != ""
			yyq1777[1] = x.APIVersion != ""
			yyq1777[2] = true
			yyq1777[3] = true
			yyq1777[4] = true
			var yynn1777 int
			if yyr1777 || yy2arr1777 {
				r.EncodeArrayStart(5)
			} else {
				yynn1777 = 0
				for _, b := range yyq1777 {
					if b {
						yynn1777++
					}
				}
				r.EncodeMapStart(yynn1777)
				yynn1777 = 0
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[0] {
					yym1779 := z.EncBinary()
					_ = yym1779
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1777[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1780 := z.EncBinary()
					_ = yym1780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[1] {
					yym1782 := z.EncBinary()
					_ = yym1782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1777[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1783 := z.EncBinary()
					_ = yym1783
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[2] {
					yy1785 := &x.ObjectMeta
					yy1785.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1786 := &x.ObjectMeta
					yy1786.CodecEncodeSelf(e)
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[3] {
					yy1788 := &x.Spec
					yy1788.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1789 := &x.Spec
					yy1789.CodecEncodeSelf(e)
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1777[4] {
					yy1791 := &x.Status
					yy1791.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1777[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1792 := &x.Status
					yy1792.CodecEncodeSelf(e)
				}
			}
			if yyr1777 || yy2arr1777 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1793 := z.DecBinary()
	_ = yym1793
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1794 := r.ContainerType()
		if yyct1794 == codecSelferValueTypeMap1234 {
			yyl1794 := r.ReadMapStart()
			if yyl1794 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1794, d)
			}
		} else if yyct1794 == codecSelferValueTypeArray1234 {
			yyl1794 := r.ReadArrayStart()
			if yyl1794 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1794, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1795Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1795Slc
	var yyhl1795 bool = l >= 0
	for yyj1795 := 0; ; yyj1795++ {
		if yyhl1795 {
			if yyj1795 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1795Slc = r.DecodeBytes(yys1795Slc, true, true)
		yys1795 := string(yys1795Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1795 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv1798 := &x.ObjectMeta
				yyv1798.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv1799 := &x.Spec
				yyv1799.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv1800 := &x.Status
				yyv1800.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1795)
		} // end switch yys1795
	} // end for yyj1795
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1801 int
	var yyb1801 bool
	var yyhl1801 bool = l >= 0
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv1804 := &x.ObjectMeta
		yyv1804.CodecDecodeSelf(d)
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv1805 := &x.Spec
		yyv1805.CodecDecodeSelf(d)
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv1806 := &x.Status
		yyv1806.CodecDecodeSelf(d)
	}
	for {
		yyj1801++
		if yyhl1801 {
			yyb1801 = yyj1801 > l
		} else {
			yyb1801 = r.CheckBreak()
		}
		if yyb1801 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1801-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1807 := z.EncBinary()
		_ = yym1807
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1808 := !z.EncBinary()
			yy2arr1808 := z.EncBasicHandle().StructToArray
			var yyq1808 [4]bool
			_, _, _ = yysep1808, yyq1808, yy2arr1808
			const yyr1808 bool = false
			yyq1808[0] = x.Kind != ""
			yyq1808[1] = x.APIVersion != ""
			yyq1808[2] = true
			var yynn1808 int
			if yyr1808 || yy2arr1808 {
				r.EncodeArrayStart(4)
			} else {
				yynn1808 = 1
				for _, b := range yyq1808 {
					if b {
						yynn1808++
					}
				}
				r.EncodeMapStart(yynn1808)
				yynn1808 = 0
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1808[0] {
					yym1810 := z.EncBinary()
					_ = yym1810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1808[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1811 := z.EncBinary()
					_ = yym1811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1808[1] {
					yym1813 := z.EncBinary()
					_ = yym1813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1808[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1814 := z.EncBinary()
					_ = yym1814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1808[2] {
					yy1816 := &x.ListMeta
					yym1817 := z.EncBinary()
					_ = yym1817
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1816) {
					} else {
						z.EncFallback(yy1816)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1808[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1818 := &x.ListMeta
					yym1819 := z.EncBinary()
					_ = yym1819
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1818) {
					} else {
						z.EncFallback(yy1818)
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr1808 || yy2arr1808 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1823 := z.DecBinary()
	_ = yym1823
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1824 := r.ContainerType()
		if yyct1824 == codecSelferValueTypeMap1234 {
			yyl1824 := r.ReadMapStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1824, d)
			}
		} else if yyct1824 == codecSelferValueTypeArray1234 {
			yyl1824 := r.ReadArrayStart()
			if yyl1824 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1824, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1825Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1825Slc
	var yyhl1825 bool = l >= 0
	for yyj1825 := 0; ; yyj1825++ {
		if yyhl1825 {
			if yyj1825 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1825Slc = r.DecodeBytes(yys1825Slc, true, true)
		yys1825 := string(yys1825Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1825 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1828 := &x.ListMeta
				yym1829 := z.DecBinary()
				_ = yym1829
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1828) {
				} else {
					z.DecFallback(yyv1828, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1830 := &x.Items
				yym1831 := z.DecBinary()
				_ = yym1831
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv1830), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1825)
		} // end switch yys1825
	} // end for yyj1825
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1832 int
	var yyb1832 bool
	var yyhl1832 bool = l >= 0
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1835 := &x.ListMeta
		yym1836 := z.DecBinary()
		_ = yym1836
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1835) {
		} else {
			z.DecFallback(yyv1835, false)
		}
	}
	yyj1832++
	if yyhl1832 {
		yyb1832 = yyj1832 > l
	} else {
		yyb1832 = r.CheckBreak()
	}
	if yyb1832 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1837 := &x.Items
		yym1838 := z.DecBinary()
		_ = yym1838
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv1837), d)
		}
	}
	for {
		yyj1832++
		if yyhl1832 {
			yyb1832 = yyj1832 > l
		} else {
			yyb1832 = r.CheckBreak()
		}
		if yyb1832 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1832-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1839 := z.EncBinary()
		_ = yym1839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1840 := !z.EncBinary()
			yy2arr1840 := z.EncBasicHandle().StructToArray
			var yyq1840 [4]bool
			_, _, _ = yysep1840, yyq1840, yy2arr1840
			const yyr1840 bool = false
			yyq1840[0] = x.Kind != ""
			yyq1840[1] = x.APIVersion != ""
			yyq1840[2] = true
			var yynn1840 int
			if yyr1840 || yy2arr1840 {
				r.EncodeArrayStart(4)
			} else {
				yynn1840 = 1
				for _, b := range yyq1840 {
					if b {
						yynn1840++
					}
				}
				r.EncodeMapStart(yynn1840)
				yynn1840 = 0
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1840[0] {
					yym1842 := z.EncBinary()
					_ = yym1842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1840[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1843 := z.EncBinary()
					_ = yym1843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1840[1] {
					yym1845 := z.EncBinary()
					_ = yym1845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1840[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1846 := z.EncBinary()
					_ = yym1846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1840[2] {
					yy1848 := &x.ListMeta
					yym1849 := z.EncBinary()
					_ = yym1849
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1848) {
					} else {
						z.EncFallback(yy1848)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1840[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1850 := &x.ListMeta
					yym1851 := z.EncBinary()
					_ = yym1851
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1850) {
					} else {
						z.EncFallback(yy1850)
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1853 := z.EncBinary()
					_ = yym1853
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1854 := z.EncBinary()
					_ = yym1854
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr1840 || yy2arr1840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1855 := z.DecBinary()
	_ = yym1855
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1856 := r.ContainerType()
		if yyct1856 == codecSelferValueTypeMap1234 {
			yyl1856 := r.ReadMapStart()
			if yyl1856 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1856, d)
			}
		} else if yyct1856 == codecSelferValueTypeArray1234 {
			yyl1856 := r.ReadArrayStart()
			if yyl1856 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1856, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1857Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1857Slc
	var yyhl1857 bool = l >= 0
	for yyj1857 := 0; ; yyj1857++ {
		if yyhl1857 {
			if yyj1857 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1857Slc = r.DecodeBytes(yys1857Slc, true, true)
		yys1857 := string(yys1857Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1857 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1860 := &x.ListMeta
				yym1861 := z.DecBinary()
				_ = yym1861
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1860) {
				} else {
					z.DecFallback(yyv1860, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1862 := &x.Items
				yym1863 := z.DecBinary()
				_ = yym1863
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv1862), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1857)
		} // end switch yys1857
	} // end for yyj1857
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1864 int
	var yyb1864 bool
	var yyhl1864 bool = l >= 0
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1867 := &x.ListMeta
		yym1868 := z.DecBinary()
		_ = yym1868
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1867) {
		} else {
			z.DecFallback(yyv1867, false)
		}
	}
	yyj1864++
	if yyhl1864 {
		yyb1864 = yyj1864 > l
	} else {
		yyb1864 = r.CheckBreak()
	}
	if yyb1864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1869 := &x.Items
		yym1870 := z.DecBinary()
		_ = yym1870
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv1869), d)
		}
	}
	for {
		yyj1864++
		if yyhl1864 {
			yyb1864 = yyj1864 > l
		} else {
			yyb1864 = r.CheckBreak()
		}
		if yyb1864 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1864-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1871 := z.EncBinary()
	_ = yym1871
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1872 := z.DecBinary()
	_ = yym1872
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1873 := z.EncBinary()
	_ = yym1873
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1874 := z.DecBinary()
	_ = yym1874
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1875 := z.EncBinary()
		_ = yym1875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1876 := !z.EncBinary()
			yy2arr1876 := z.EncBasicHandle().StructToArray
			var yyq1876 [1]bool
			_, _, _ = yysep1876, yyq1876, yy2arr1876
			const yyr1876 bool = false
			yyq1876[0] = true
			var yynn1876 int
			if yyr1876 || yy2arr1876 {
				r.EncodeArrayStart(1)
			} else {
				yynn1876 = 0
				for _, b := range yyq1876 {
					if b {
						yynn1876++
					}
				}
				r.EncodeMapStart(yynn1876)
				yynn1876 = 0
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1876[0] {
					yy1878 := &x.LoadBalancer
					yy1878.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1876[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1879 := &x.LoadBalancer
					yy1879.CodecEncodeSelf(e)
				}
			}
			if yyr1876 || yy2arr1876 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1880 := z.DecBinary()
	_ = yym1880
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1881 := r.ContainerType()
		if yyct1881 == codecSelferValueTypeMap1234 {
			yyl1881 := r.ReadMapStart()
			if yyl1881 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1881, d)
			}
		} else if yyct1881 == codecSelferValueTypeArray1234 {
			yyl1881 := r.ReadArrayStart()
			if yyl1881 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1881, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1882Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1882Slc
	var yyhl1882 bool = l >= 0
	for yyj1882 := 0; ; yyj1882++ {
		if yyhl1882 {
			if yyj1882 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1882Slc = r.DecodeBytes(yys1882Slc, true, true)
		yys1882 := string(yys1882Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1882 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv1883 := &x.LoadBalancer
				yyv1883.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1882)
		} // end switch yys1882
	} // end for yyj1882
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1884 int
	var yyb1884 bool
	var yyhl1884 bool = l >= 0
	yyj1884++
	if yyhl1884 {
		yyb1884 = yyj1884 > l
	} else {
		yyb1884 = r.CheckBreak()
	}
	if yyb1884 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv1885 := &x.LoadBalancer
		yyv1885.CodecDecodeSelf(d)
	}
	for {
		yyj1884++
		if yyhl1884 {
			yyb1884 = yyj1884 > l
		} else {
			yyb1884 = r.CheckBreak()
		}
		if yyb1884 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1884-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1886 := z.EncBinary()
		_ = yym1886
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1887 := !z.EncBinary()
			yy2arr1887 := z.EncBasicHandle().StructToArray
			var yyq1887 [1]bool
			_, _, _ = yysep1887, yyq1887, yy2arr1887
			const yyr1887 bool = false
			yyq1887[0] = len(x.Ingress) != 0
			var yynn1887 int
			if yyr1887 || yy2arr1887 {
				r.EncodeArrayStart(1)
			} else {
				yynn1887 = 0
				for _, b := range yyq1887 {
					if b {
						yynn1887++
					}
				}
				r.EncodeMapStart(yynn1887)
				yynn1887 = 0
			}
			if yyr1887 || yy2arr1887 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1887[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1889 := z.EncBinary()
						_ = yym1889
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1887[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1890 := z.EncBinary()
						_ = yym1890
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1887 || yy2arr1887 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1891 := z.DecBinary()
	_ = yym1891
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1892 := r.ContainerType()
		if yyct1892 == codecSelferValueTypeMap1234 {
			yyl1892 := r.ReadMapStart()
			if yyl1892 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1892, d)
			}
		} else if yyct1892 == codecSelferValueTypeArray1234 {
			yyl1892 := r.ReadArrayStart()
			if yyl1892 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1892, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1893Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1893Slc
	var yyhl1893 bool = l >= 0
	for yyj1893 := 0; ; yyj1893++ {
		if yyhl1893 {
			if yyj1893 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1893Slc = r.DecodeBytes(yys1893Slc, true, true)
		yys1893 := string(yys1893Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1893 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1894 := &x.Ingress
				yym1895 := z.DecBinary()
				_ = yym1895
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1894), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1893)
		} // end switch yys1893
	} // end for yyj1893
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1896 int
	var yyb1896 bool
	var yyhl1896 bool = l >= 0
	yyj1896++
	if yyhl1896 {
		yyb1896 = yyj1896 > l
	} else {
		yyb1896 = r.CheckBreak()
	}
	if yyb1896 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1897 := &x.Ingress
		yym1898 := z.DecBinary()
		_ = yym1898
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv1897), d)
		}
	}
	for {
		yyj1896++
		if yyhl1896 {
			yyb1896 = yyj1896 > l
		} else {
			yyb1896 = r.CheckBreak()
		}
		if yyb1896 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1896-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1899 := z.EncBinary()
		_ = yym1899
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1900 := !z.EncBinary()
			yy2arr1900 := z.EncBasicHandle().StructToArray
			var yyq1900 [2]bool
			_, _, _ = yysep1900, yyq1900, yy2arr1900
			const yyr1900 bool = false
			yyq1900[0] = x.IP != ""
			yyq1900[1] = x.Hostname != ""
			var yynn1900 int
			if yyr1900 || yy2arr1900 {
				r.EncodeArrayStart(2)
			} else {
				yynn1900 = 0
				for _, b := range yyq1900 {
					if b {
						yynn1900++
					}
				}
				r.EncodeMapStart(yynn1900)
				yynn1900 = 0
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1900[0] {
					yym1902 := z.EncBinary()
					_ = yym1902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1903 := z.EncBinary()
					_ = yym1903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1900[1] {
					yym1905 := z.EncBinary()
					_ = yym1905
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1900[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1906 := z.EncBinary()
					_ = yym1906
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr1900 || yy2arr1900 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1907 := z.DecBinary()
	_ = yym1907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1908 := r.ContainerType()
		if yyct1908 == codecSelferValueTypeMap1234 {
			yyl1908 := r.ReadMapStart()
			if yyl1908 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1908, d)
			}
		} else if yyct1908 == codecSelferValueTypeArray1234 {
			yyl1908 := r.ReadArrayStart()
			if yyl1908 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1908, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1909Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1909Slc
	var yyhl1909 bool = l >= 0
	for yyj1909 := 0; ; yyj1909++ {
		if yyhl1909 {
			if yyj1909 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1909Slc = r.DecodeBytes(yys1909Slc, true, true)
		yys1909 := string(yys1909Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1909 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1909)
		} // end switch yys1909
	} // end for yyj1909
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1912 int
	var yyb1912 bool
	var yyhl1912 bool = l >= 0
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj1912++
	if yyhl1912 {
		yyb1912 = yyj1912 > l
	} else {
		yyb1912 = r.CheckBreak()
	}
	if yyb1912 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj1912++
		if yyhl1912 {
			yyb1912 = yyj1912 > l
		} else {
			yyb1912 = r.CheckBreak()
		}
		if yyb1912 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1912-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1915 := z.EncBinary()
		_ = yym1915
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1916 := !z.EncBinary()
			yy2arr1916 := z.EncBasicHandle().StructToArray
			var yyq1916 [7]bool
			_, _, _ = yysep1916, yyq1916, yy2arr1916
			const yyr1916 bool = false
			yyq1916[0] = x.Type != ""
			yyq1916[3] = x.ClusterIP != ""
			yyq1916[4] = len(x.ExternalIPs) != 0
			yyq1916[5] = x.LoadBalancerIP != ""
			yyq1916[6] = x.SessionAffinity != ""
			var yynn1916 int
			if yyr1916 || yy2arr1916 {
				r.EncodeArrayStart(7)
			} else {
				yynn1916 = 2
				for _, b := range yyq1916 {
					if b {
						yynn1916++
					}
				}
				r.EncodeMapStart(yynn1916)
				yynn1916 = 0
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym1920 := z.EncBinary()
					_ = yym1920
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1922 := z.EncBinary()
					_ = yym1922
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym1923 := z.EncBinary()
					_ = yym1923
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[3] {
					yym1925 := z.EncBinary()
					_ = yym1925
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1926 := z.EncBinary()
					_ = yym1926
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1928 := z.EncBinary()
						_ = yym1928
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1916[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym1929 := z.EncBinary()
						_ = yym1929
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[5] {
					yym1931 := z.EncBinary()
					_ = yym1931
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1932 := z.EncBinary()
					_ = yym1932
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1916[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1916[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr1916 || yy2arr1916 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1934 := z.DecBinary()
	_ = yym1934
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1935 := r.ContainerType()
		if yyct1935 == codecSelferValueTypeMap1234 {
			yyl1935 := r.ReadMapStart()
			if yyl1935 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1935, d)
			}
		} else if yyct1935 == codecSelferValueTypeArray1234 {
			yyl1935 := r.ReadArrayStart()
			if yyl1935 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1935, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1936Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1936Slc
	var yyhl1936 bool = l >= 0
	for yyj1936 := 0; ; yyj1936++ {
		if yyhl1936 {
			if yyj1936 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1936Slc = r.DecodeBytes(yys1936Slc, true, true)
		yys1936 := string(yys1936Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1936 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1938 := &x.Ports
				yym1939 := z.DecBinary()
				_ = yym1939
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv1938), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv1940 := &x.Selector
				yym1941 := z.DecBinary()
				_ = yym1941
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1940, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv1943 := &x.ExternalIPs
				yym1944 := z.DecBinary()
				_ = yym1944
				if false {
				} else {
					z.F.DecSliceStringX(yyv1943, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1936)
		} // end switch yys1936
	} // end for yyj1936
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1947 int
	var yyb1947 bool
	var yyhl1947 bool = l >= 0
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1949 := &x.Ports
		yym1950 := z.DecBinary()
		_ = yym1950
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv1949), d)
		}
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv1951 := &x.Selector
		yym1952 := z.DecBinary()
		_ = yym1952
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1951, false, d)
		}
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv1954 := &x.ExternalIPs
		yym1955 := z.DecBinary()
		_ = yym1955
		if false {
		} else {
			z.F.DecSliceStringX(yyv1954, false, d)
		}
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj1947++
	if yyhl1947 {
		yyb1947 = yyj1947 > l
	} else {
		yyb1947 = r.CheckBreak()
	}
	if yyb1947 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	for {
		yyj1947++
		if yyhl1947 {
			yyb1947 = yyj1947 > l
		} else {
			yyb1947 = r.CheckBreak()
		}
		if yyb1947 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1947-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1958 := z.EncBinary()
		_ = yym1958
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1959 := !z.EncBinary()
			yy2arr1959 := z.EncBasicHandle().StructToArray
			var yyq1959 [5]bool
			_, _, _ = yysep1959, yyq1959, yy2arr1959
			const yyr1959 bool = false
			var yynn1959 int
			if yyr1959 || yy2arr1959 {
				r.EncodeArrayStart(5)
			} else {
				yynn1959 = 5
				for _, b := range yyq1959 {
					if b {
						yynn1959++
					}
				}
				r.EncodeMapStart(yynn1959)
				yynn1959 = 0
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1961 := z.EncBinary()
				_ = yym1961
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1962 := z.EncBinary()
				_ = yym1962
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1965 := z.EncBinary()
				_ = yym1965
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1966 := z.EncBinary()
				_ = yym1966
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1968 := &x.TargetPort
				yym1969 := z.EncBinary()
				_ = yym1969
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1968) {
				} else if !yym1969 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1968)
				} else {
					z.EncFallback(yy1968)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1970 := &x.TargetPort
				yym1971 := z.EncBinary()
				_ = yym1971
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1970) {
				} else if !yym1971 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1970)
				} else {
					z.EncFallback(yy1970)
				}
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1973 := z.EncBinary()
				_ = yym1973
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1974 := z.EncBinary()
				_ = yym1974
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr1959 || yy2arr1959 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1975 := z.DecBinary()
	_ = yym1975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1976 := r.ContainerType()
		if yyct1976 == codecSelferValueTypeMap1234 {
			yyl1976 := r.ReadMapStart()
			if yyl1976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1976, d)
			}
		} else if yyct1976 == codecSelferValueTypeArray1234 {
			yyl1976 := r.ReadArrayStart()
			if yyl1976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1977Slc
	var yyhl1977 bool = l >= 0
	for yyj1977 := 0; ; yyj1977++ {
		if yyhl1977 {
			if yyj1977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1977Slc = r.DecodeBytes(yys1977Slc, true, true)
		yys1977 := string(yys1977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1977 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg5_intstr.IntOrString{}
			} else {
				yyv1981 := &x.TargetPort
				yym1982 := z.DecBinary()
				_ = yym1982
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1981) {
				} else if !yym1982 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1981)
				} else {
					z.DecFallback(yyv1981, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1977)
		} // end switch yys1977
	} // end for yyj1977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1984 int
	var yyb1984 bool
	var yyhl1984 bool = l >= 0
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg5_intstr.IntOrString{}
	} else {
		yyv1988 := &x.TargetPort
		yym1989 := z.DecBinary()
		_ = yym1989
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1988) {
		} else if !yym1989 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1988)
		} else {
			z.DecFallback(yyv1988, false)
		}
	}
	yyj1984++
	if yyhl1984 {
		yyb1984 = yyj1984 > l
	} else {
		yyb1984 = r.CheckBreak()
	}
	if yyb1984 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1984++
		if yyhl1984 {
			yyb1984 = yyj1984 > l
		} else {
			yyb1984 = r.CheckBreak()
		}
		if yyb1984 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1984-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1991 := z.EncBinary()
		_ = yym1991
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1992 := !z.EncBinary()
			yy2arr1992 := z.EncBasicHandle().StructToArray
			var yyq1992 [5]bool
			_, _, _ = yysep1992, yyq1992, yy2arr1992
			const yyr1992 bool = false
			yyq1992[0] = x.Kind != ""
			yyq1992[1] = x.APIVersion != ""
			yyq1992[2] = true
			yyq1992[3] = true
			yyq1992[4] = true
			var yynn1992 int
			if yyr1992 || yy2arr1992 {
				r.EncodeArrayStart(5)
			} else {
				yynn1992 = 0
				for _, b := range yyq1992 {
					if b {
						yynn1992++
					}
				}
				r.EncodeMapStart(yynn1992)
				yynn1992 = 0
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[0] {
					yym1994 := z.EncBinary()
					_ = yym1994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1992[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[1] {
					yym1997 := z.EncBinary()
					_ = yym1997
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1992[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1998 := z.EncBinary()
					_ = yym1998
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[2] {
					yy2000 := &x.ObjectMeta
					yy2000.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2001 := &x.ObjectMeta
					yy2001.CodecEncodeSelf(e)
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[3] {
					yy2003 := &x.Spec
					yy2003.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2004 := &x.Spec
					yy2004.CodecEncodeSelf(e)
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1992[4] {
					yy2006 := &x.Status
					yy2006.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1992[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2007 := &x.Status
					yy2007.CodecEncodeSelf(e)
				}
			}
			if yyr1992 || yy2arr1992 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2008 := z.DecBinary()
	_ = yym2008
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2009 := r.ContainerType()
		if yyct2009 == codecSelferValueTypeMap1234 {
			yyl2009 := r.ReadMapStart()
			if yyl2009 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2009, d)
			}
		} else if yyct2009 == codecSelferValueTypeArray1234 {
			yyl2009 := r.ReadArrayStart()
			if yyl2009 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2009, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2010Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2010Slc
	var yyhl2010 bool = l >= 0
	for yyj2010 := 0; ; yyj2010++ {
		if yyhl2010 {
			if yyj2010 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2010Slc = r.DecodeBytes(yys2010Slc, true, true)
		yys2010 := string(yys2010Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2010 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2013 := &x.ObjectMeta
				yyv2013.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2014 := &x.Spec
				yyv2014.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2015 := &x.Status
				yyv2015.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2010)
		} // end switch yys2010
	} // end for yyj2010
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2016 int
	var yyb2016 bool
	var yyhl2016 bool = l >= 0
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2019 := &x.ObjectMeta
		yyv2019.CodecDecodeSelf(d)
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2020 := &x.Spec
		yyv2020.CodecDecodeSelf(d)
	}
	yyj2016++
	if yyhl2016 {
		yyb2016 = yyj2016 > l
	} else {
		yyb2016 = r.CheckBreak()
	}
	if yyb2016 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2021 := &x.Status
		yyv2021.CodecDecodeSelf(d)
	}
	for {
		yyj2016++
		if yyhl2016 {
			yyb2016 = yyj2016 > l
		} else {
			yyb2016 = r.CheckBreak()
		}
		if yyb2016 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2016-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2022 := z.EncBinary()
		_ = yym2022
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2023 := !z.EncBinary()
			yy2arr2023 := z.EncBasicHandle().StructToArray
			var yyq2023 [5]bool
			_, _, _ = yysep2023, yyq2023, yy2arr2023
			const yyr2023 bool = false
			yyq2023[0] = x.Kind != ""
			yyq2023[1] = x.APIVersion != ""
			yyq2023[2] = true
			yyq2023[4] = len(x.ImagePullSecrets) != 0
			var yynn2023 int
			if yyr2023 || yy2arr2023 {
				r.EncodeArrayStart(5)
			} else {
				yynn2023 = 1
				for _, b := range yyq2023 {
					if b {
						yynn2023++
					}
				}
				r.EncodeMapStart(yynn2023)
				yynn2023 = 0
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[0] {
					yym2025 := z.EncBinary()
					_ = yym2025
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2026 := z.EncBinary()
					_ = yym2026
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[1] {
					yym2028 := z.EncBinary()
					_ = yym2028
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2023[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2029 := z.EncBinary()
					_ = yym2029
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[2] {
					yy2031 := &x.ObjectMeta
					yy2031.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2032 := &x.ObjectMeta
					yy2032.CodecEncodeSelf(e)
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2034 := z.EncBinary()
					_ = yym2034
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2035 := z.EncBinary()
					_ = yym2035
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2023[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2037 := z.EncBinary()
						_ = yym2037
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2023[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2038 := z.EncBinary()
						_ = yym2038
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2023 || yy2arr2023 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2039 := z.DecBinary()
	_ = yym2039
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2040 := r.ContainerType()
		if yyct2040 == codecSelferValueTypeMap1234 {
			yyl2040 := r.ReadMapStart()
			if yyl2040 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2040, d)
			}
		} else if yyct2040 == codecSelferValueTypeArray1234 {
			yyl2040 := r.ReadArrayStart()
			if yyl2040 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2040, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2041Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2041Slc
	var yyhl2041 bool = l >= 0
	for yyj2041 := 0; ; yyj2041++ {
		if yyhl2041 {
			if yyj2041 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2041Slc = r.DecodeBytes(yys2041Slc, true, true)
		yys2041 := string(yys2041Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2041 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2044 := &x.ObjectMeta
				yyv2044.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2045 := &x.Secrets
				yym2046 := z.DecBinary()
				_ = yym2046
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2045), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2047 := &x.ImagePullSecrets
				yym2048 := z.DecBinary()
				_ = yym2048
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2047), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2041)
		} // end switch yys2041
	} // end for yyj2041
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2049 int
	var yyb2049 bool
	var yyhl2049 bool = l >= 0
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2052 := &x.ObjectMeta
		yyv2052.CodecDecodeSelf(d)
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2053 := &x.Secrets
		yym2054 := z.DecBinary()
		_ = yym2054
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2053), d)
		}
	}
	yyj2049++
	if yyhl2049 {
		yyb2049 = yyj2049 > l
	} else {
		yyb2049 = r.CheckBreak()
	}
	if yyb2049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2055 := &x.ImagePullSecrets
		yym2056 := z.DecBinary()
		_ = yym2056
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2055), d)
		}
	}
	for {
		yyj2049++
		if yyhl2049 {
			yyb2049 = yyj2049 > l
		} else {
			yyb2049 = r.CheckBreak()
		}
		if yyb2049 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2049-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2057 := z.EncBinary()
		_ = yym2057
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2058 := !z.EncBinary()
			yy2arr2058 := z.EncBasicHandle().StructToArray
			var yyq2058 [4]bool
			_, _, _ = yysep2058, yyq2058, yy2arr2058
			const yyr2058 bool = false
			yyq2058[0] = x.Kind != ""
			yyq2058[1] = x.APIVersion != ""
			yyq2058[2] = true
			var yynn2058 int
			if yyr2058 || yy2arr2058 {
				r.EncodeArrayStart(4)
			} else {
				yynn2058 = 1
				for _, b := range yyq2058 {
					if b {
						yynn2058++
					}
				}
				r.EncodeMapStart(yynn2058)
				yynn2058 = 0
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2058[0] {
					yym2060 := z.EncBinary()
					_ = yym2060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2058[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2061 := z.EncBinary()
					_ = yym2061
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2058[1] {
					yym2063 := z.EncBinary()
					_ = yym2063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2058[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2064 := z.EncBinary()
					_ = yym2064
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2058[2] {
					yy2066 := &x.ListMeta
					yym2067 := z.EncBinary()
					_ = yym2067
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2066) {
					} else {
						z.EncFallback(yy2066)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2058[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2068 := &x.ListMeta
					yym2069 := z.EncBinary()
					_ = yym2069
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2068) {
					} else {
						z.EncFallback(yy2068)
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2071 := z.EncBinary()
					_ = yym2071
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2072 := z.EncBinary()
					_ = yym2072
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2058 || yy2arr2058 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2073 := z.DecBinary()
	_ = yym2073
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2074 := r.ContainerType()
		if yyct2074 == codecSelferValueTypeMap1234 {
			yyl2074 := r.ReadMapStart()
			if yyl2074 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2074, d)
			}
		} else if yyct2074 == codecSelferValueTypeArray1234 {
			yyl2074 := r.ReadArrayStart()
			if yyl2074 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2074, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2075Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2075Slc
	var yyhl2075 bool = l >= 0
	for yyj2075 := 0; ; yyj2075++ {
		if yyhl2075 {
			if yyj2075 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2075Slc = r.DecodeBytes(yys2075Slc, true, true)
		yys2075 := string(yys2075Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2075 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2078 := &x.ListMeta
				yym2079 := z.DecBinary()
				_ = yym2079
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2078) {
				} else {
					z.DecFallback(yyv2078, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2080 := &x.Items
				yym2081 := z.DecBinary()
				_ = yym2081
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2080), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2075)
		} // end switch yys2075
	} // end for yyj2075
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2082 int
	var yyb2082 bool
	var yyhl2082 bool = l >= 0
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2085 := &x.ListMeta
		yym2086 := z.DecBinary()
		_ = yym2086
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2085) {
		} else {
			z.DecFallback(yyv2085, false)
		}
	}
	yyj2082++
	if yyhl2082 {
		yyb2082 = yyj2082 > l
	} else {
		yyb2082 = r.CheckBreak()
	}
	if yyb2082 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2087 := &x.Items
		yym2088 := z.DecBinary()
		_ = yym2088
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2087), d)
		}
	}
	for {
		yyj2082++
		if yyhl2082 {
			yyb2082 = yyj2082 > l
		} else {
			yyb2082 = r.CheckBreak()
		}
		if yyb2082 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2082-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2089 := z.EncBinary()
		_ = yym2089
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2090 := !z.EncBinary()
			yy2arr2090 := z.EncBasicHandle().StructToArray
			var yyq2090 [4]bool
			_, _, _ = yysep2090, yyq2090, yy2arr2090
			const yyr2090 bool = false
			yyq2090[0] = x.Kind != ""
			yyq2090[1] = x.APIVersion != ""
			yyq2090[2] = true
			var yynn2090 int
			if yyr2090 || yy2arr2090 {
				r.EncodeArrayStart(4)
			} else {
				yynn2090 = 1
				for _, b := range yyq2090 {
					if b {
						yynn2090++
					}
				}
				r.EncodeMapStart(yynn2090)
				yynn2090 = 0
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[0] {
					yym2092 := z.EncBinary()
					_ = yym2092
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2093 := z.EncBinary()
					_ = yym2093
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[1] {
					yym2095 := z.EncBinary()
					_ = yym2095
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2090[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2090[2] {
					yy2098 := &x.ObjectMeta
					yy2098.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2090[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2099 := &x.ObjectMeta
					yy2099.CodecEncodeSelf(e)
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2090 || yy2arr2090 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2103 := z.DecBinary()
	_ = yym2103
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2104 := r.ContainerType()
		if yyct2104 == codecSelferValueTypeMap1234 {
			yyl2104 := r.ReadMapStart()
			if yyl2104 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2104, d)
			}
		} else if yyct2104 == codecSelferValueTypeArray1234 {
			yyl2104 := r.ReadArrayStart()
			if yyl2104 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2104, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2105Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2105Slc
	var yyhl2105 bool = l >= 0
	for yyj2105 := 0; ; yyj2105++ {
		if yyhl2105 {
			if yyj2105 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2105Slc = r.DecodeBytes(yys2105Slc, true, true)
		yys2105 := string(yys2105Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2105 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2108 := &x.ObjectMeta
				yyv2108.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2109 := &x.Subsets
				yym2110 := z.DecBinary()
				_ = yym2110
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2109), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2105)
		} // end switch yys2105
	} // end for yyj2105
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2111 int
	var yyb2111 bool
	var yyhl2111 bool = l >= 0
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2114 := &x.ObjectMeta
		yyv2114.CodecDecodeSelf(d)
	}
	yyj2111++
	if yyhl2111 {
		yyb2111 = yyj2111 > l
	} else {
		yyb2111 = r.CheckBreak()
	}
	if yyb2111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2115 := &x.Subsets
		yym2116 := z.DecBinary()
		_ = yym2116
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2115), d)
		}
	}
	for {
		yyj2111++
		if yyhl2111 {
			yyb2111 = yyj2111 > l
		} else {
			yyb2111 = r.CheckBreak()
		}
		if yyb2111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2117 := z.EncBinary()
		_ = yym2117
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2118 := !z.EncBinary()
			yy2arr2118 := z.EncBasicHandle().StructToArray
			var yyq2118 [3]bool
			_, _, _ = yysep2118, yyq2118, yy2arr2118
			const yyr2118 bool = false
			var yynn2118 int
			if yyr2118 || yy2arr2118 {
				r.EncodeArrayStart(3)
			} else {
				yynn2118 = 3
				for _, b := range yyq2118 {
					if b {
						yynn2118++
					}
				}
				r.EncodeMapStart(yynn2118)
				yynn2118 = 0
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2120 := z.EncBinary()
					_ = yym2120
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2121 := z.EncBinary()
					_ = yym2121
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2123 := z.EncBinary()
					_ = yym2123
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2124 := z.EncBinary()
					_ = yym2124
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2126 := z.EncBinary()
					_ = yym2126
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2127 := z.EncBinary()
					_ = yym2127
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2118 || yy2arr2118 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2128 := z.DecBinary()
	_ = yym2128
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2129 := r.ContainerType()
		if yyct2129 == codecSelferValueTypeMap1234 {
			yyl2129 := r.ReadMapStart()
			if yyl2129 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2129, d)
			}
		} else if yyct2129 == codecSelferValueTypeArray1234 {
			yyl2129 := r.ReadArrayStart()
			if yyl2129 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2129, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2130Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2130Slc
	var yyhl2130 bool = l >= 0
	for yyj2130 := 0; ; yyj2130++ {
		if yyhl2130 {
			if yyj2130 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2130Slc = r.DecodeBytes(yys2130Slc, true, true)
		yys2130 := string(yys2130Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2130 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2131 := &x.Addresses
				yym2132 := z.DecBinary()
				_ = yym2132
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2131), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2133 := &x.NotReadyAddresses
				yym2134 := z.DecBinary()
				_ = yym2134
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2133), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2135 := &x.Ports
				yym2136 := z.DecBinary()
				_ = yym2136
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2135), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2130)
		} // end switch yys2130
	} // end for yyj2130
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2137 int
	var yyb2137 bool
	var yyhl2137 bool = l >= 0
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2138 := &x.Addresses
		yym2139 := z.DecBinary()
		_ = yym2139
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2138), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2140 := &x.NotReadyAddresses
		yym2141 := z.DecBinary()
		_ = yym2141
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2140), d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2142 := &x.Ports
		yym2143 := z.DecBinary()
		_ = yym2143
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2142), d)
		}
	}
	for {
		yyj2137++
		if yyhl2137 {
			yyb2137 = yyj2137 > l
		} else {
			yyb2137 = r.CheckBreak()
		}
		if yyb2137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2144 := z.EncBinary()
		_ = yym2144
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2145 := !z.EncBinary()
			yy2arr2145 := z.EncBasicHandle().StructToArray
			var yyq2145 [2]bool
			_, _, _ = yysep2145, yyq2145, yy2arr2145
			const yyr2145 bool = false
			var yynn2145 int
			if yyr2145 || yy2arr2145 {
				r.EncodeArrayStart(2)
			} else {
				yynn2145 = 2
				for _, b := range yyq2145 {
					if b {
						yynn2145++
					}
				}
				r.EncodeMapStart(yynn2145)
				yynn2145 = 0
			}
			if yyr2145 || yy2arr2145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2147 := z.EncBinary()
				_ = yym2147
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2148 := z.EncBinary()
				_ = yym2148
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2145 || yy2arr2145 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2145 || yy2arr2145 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2150 := z.DecBinary()
	_ = yym2150
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2151 := r.ContainerType()
		if yyct2151 == codecSelferValueTypeMap1234 {
			yyl2151 := r.ReadMapStart()
			if yyl2151 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2151, d)
			}
		} else if yyct2151 == codecSelferValueTypeArray1234 {
			yyl2151 := r.ReadArrayStart()
			if yyl2151 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2151, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2152Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2152Slc
	var yyhl2152 bool = l >= 0
	for yyj2152 := 0; ; yyj2152++ {
		if yyhl2152 {
			if yyj2152 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2152Slc = r.DecodeBytes(yys2152Slc, true, true)
		yys2152 := string(yys2152Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2152 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2152)
		} // end switch yys2152
	} // end for yyj2152
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2155 int
	var yyb2155 bool
	var yyhl2155 bool = l >= 0
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2155++
	if yyhl2155 {
		yyb2155 = yyj2155 > l
	} else {
		yyb2155 = r.CheckBreak()
	}
	if yyb2155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2155++
		if yyhl2155 {
			yyb2155 = yyj2155 > l
		} else {
			yyb2155 = r.CheckBreak()
		}
		if yyb2155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2158 := z.EncBinary()
		_ = yym2158
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2159 := !z.EncBinary()
			yy2arr2159 := z.EncBasicHandle().StructToArray
			var yyq2159 [3]bool
			_, _, _ = yysep2159, yyq2159, yy2arr2159
			const yyr2159 bool = false
			var yynn2159 int
			if yyr2159 || yy2arr2159 {
				r.EncodeArrayStart(3)
			} else {
				yynn2159 = 3
				for _, b := range yyq2159 {
					if b {
						yynn2159++
					}
				}
				r.EncodeMapStart(yynn2159)
				yynn2159 = 0
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2161 := z.EncBinary()
				_ = yym2161
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2162 := z.EncBinary()
				_ = yym2162
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2164 := z.EncBinary()
				_ = yym2164
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2165 := z.EncBinary()
				_ = yym2165
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2159 || yy2arr2159 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2167 := z.DecBinary()
	_ = yym2167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2168 := r.ContainerType()
		if yyct2168 == codecSelferValueTypeMap1234 {
			yyl2168 := r.ReadMapStart()
			if yyl2168 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2168, d)
			}
		} else if yyct2168 == codecSelferValueTypeArray1234 {
			yyl2168 := r.ReadArrayStart()
			if yyl2168 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2169Slc
	var yyhl2169 bool = l >= 0
	for yyj2169 := 0; ; yyj2169++ {
		if yyhl2169 {
			if yyj2169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2169Slc = r.DecodeBytes(yys2169Slc, true, true)
		yys2169 := string(yys2169Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2169 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2169)
		} // end switch yys2169
	} // end for yyj2169
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2173 int
	var yyb2173 bool
	var yyhl2173 bool = l >= 0
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2173++
	if yyhl2173 {
		yyb2173 = yyj2173 > l
	} else {
		yyb2173 = r.CheckBreak()
	}
	if yyb2173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2173++
		if yyhl2173 {
			yyb2173 = yyj2173 > l
		} else {
			yyb2173 = r.CheckBreak()
		}
		if yyb2173 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2173-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2177 := z.EncBinary()
		_ = yym2177
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2178 := !z.EncBinary()
			yy2arr2178 := z.EncBasicHandle().StructToArray
			var yyq2178 [4]bool
			_, _, _ = yysep2178, yyq2178, yy2arr2178
			const yyr2178 bool = false
			yyq2178[0] = x.Kind != ""
			yyq2178[1] = x.APIVersion != ""
			yyq2178[2] = true
			var yynn2178 int
			if yyr2178 || yy2arr2178 {
				r.EncodeArrayStart(4)
			} else {
				yynn2178 = 1
				for _, b := range yyq2178 {
					if b {
						yynn2178++
					}
				}
				r.EncodeMapStart(yynn2178)
				yynn2178 = 0
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2178[0] {
					yym2180 := z.EncBinary()
					_ = yym2180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2178[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2181 := z.EncBinary()
					_ = yym2181
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2178[1] {
					yym2183 := z.EncBinary()
					_ = yym2183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2178[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2184 := z.EncBinary()
					_ = yym2184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2178[2] {
					yy2186 := &x.ListMeta
					yym2187 := z.EncBinary()
					_ = yym2187
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2186) {
					} else {
						z.EncFallback(yy2186)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2178[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2188 := &x.ListMeta
					yym2189 := z.EncBinary()
					_ = yym2189
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2188) {
					} else {
						z.EncFallback(yy2188)
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2191 := z.EncBinary()
					_ = yym2191
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2192 := z.EncBinary()
					_ = yym2192
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2178 || yy2arr2178 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2193 := z.DecBinary()
	_ = yym2193
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2194 := r.ContainerType()
		if yyct2194 == codecSelferValueTypeMap1234 {
			yyl2194 := r.ReadMapStart()
			if yyl2194 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2194, d)
			}
		} else if yyct2194 == codecSelferValueTypeArray1234 {
			yyl2194 := r.ReadArrayStart()
			if yyl2194 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2194, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2195Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2195Slc
	var yyhl2195 bool = l >= 0
	for yyj2195 := 0; ; yyj2195++ {
		if yyhl2195 {
			if yyj2195 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2195Slc = r.DecodeBytes(yys2195Slc, true, true)
		yys2195 := string(yys2195Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2195 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2198 := &x.ListMeta
				yym2199 := z.DecBinary()
				_ = yym2199
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2198) {
				} else {
					z.DecFallback(yyv2198, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2200 := &x.Items
				yym2201 := z.DecBinary()
				_ = yym2201
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2200), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2195)
		} // end switch yys2195
	} // end for yyj2195
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2202 int
	var yyb2202 bool
	var yyhl2202 bool = l >= 0
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2205 := &x.ListMeta
		yym2206 := z.DecBinary()
		_ = yym2206
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2205) {
		} else {
			z.DecFallback(yyv2205, false)
		}
	}
	yyj2202++
	if yyhl2202 {
		yyb2202 = yyj2202 > l
	} else {
		yyb2202 = r.CheckBreak()
	}
	if yyb2202 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2207 := &x.Items
		yym2208 := z.DecBinary()
		_ = yym2208
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2207), d)
		}
	}
	for {
		yyj2202++
		if yyhl2202 {
			yyb2202 = yyj2202 > l
		} else {
			yyb2202 = r.CheckBreak()
		}
		if yyb2202 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2202-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2209 := z.EncBinary()
		_ = yym2209
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2210 := !z.EncBinary()
			yy2arr2210 := z.EncBasicHandle().StructToArray
			var yyq2210 [4]bool
			_, _, _ = yysep2210, yyq2210, yy2arr2210
			const yyr2210 bool = false
			yyq2210[0] = x.PodCIDR != ""
			yyq2210[1] = x.ExternalID != ""
			yyq2210[2] = x.ProviderID != ""
			yyq2210[3] = x.Unschedulable != false
			var yynn2210 int
			if yyr2210 || yy2arr2210 {
				r.EncodeArrayStart(4)
			} else {
				yynn2210 = 0
				for _, b := range yyq2210 {
					if b {
						yynn2210++
					}
				}
				r.EncodeMapStart(yynn2210)
				yynn2210 = 0
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[0] {
					yym2212 := z.EncBinary()
					_ = yym2212
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2213 := z.EncBinary()
					_ = yym2213
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[1] {
					yym2215 := z.EncBinary()
					_ = yym2215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2216 := z.EncBinary()
					_ = yym2216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[2] {
					yym2218 := z.EncBinary()
					_ = yym2218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2210[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2219 := z.EncBinary()
					_ = yym2219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2210[3] {
					yym2221 := z.EncBinary()
					_ = yym2221
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2210[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2222 := z.EncBinary()
					_ = yym2222
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2210 || yy2arr2210 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2223 := z.DecBinary()
	_ = yym2223
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2224 := r.ContainerType()
		if yyct2224 == codecSelferValueTypeMap1234 {
			yyl2224 := r.ReadMapStart()
			if yyl2224 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2224, d)
			}
		} else if yyct2224 == codecSelferValueTypeArray1234 {
			yyl2224 := r.ReadArrayStart()
			if yyl2224 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2224, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2225Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2225Slc
	var yyhl2225 bool = l >= 0
	for yyj2225 := 0; ; yyj2225++ {
		if yyhl2225 {
			if yyj2225 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2225Slc = r.DecodeBytes(yys2225Slc, true, true)
		yys2225 := string(yys2225Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2225 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2225)
		} // end switch yys2225
	} // end for yyj2225
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2230 int
	var yyb2230 bool
	var yyhl2230 bool = l >= 0
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2230++
	if yyhl2230 {
		yyb2230 = yyj2230 > l
	} else {
		yyb2230 = r.CheckBreak()
	}
	if yyb2230 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2230++
		if yyhl2230 {
			yyb2230 = yyj2230 > l
		} else {
			yyb2230 = r.CheckBreak()
		}
		if yyb2230 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2230-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2235 := z.EncBinary()
		_ = yym2235
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2236 := !z.EncBinary()
			yy2arr2236 := z.EncBasicHandle().StructToArray
			var yyq2236 [1]bool
			_, _, _ = yysep2236, yyq2236, yy2arr2236
			const yyr2236 bool = false
			var yynn2236 int
			if yyr2236 || yy2arr2236 {
				r.EncodeArrayStart(1)
			} else {
				yynn2236 = 1
				for _, b := range yyq2236 {
					if b {
						yynn2236++
					}
				}
				r.EncodeMapStart(yynn2236)
				yynn2236 = 0
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2238 := z.EncBinary()
				_ = yym2238
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2239 := z.EncBinary()
				_ = yym2239
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2236 || yy2arr2236 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2240 := z.DecBinary()
	_ = yym2240
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2241 := r.ContainerType()
		if yyct2241 == codecSelferValueTypeMap1234 {
			yyl2241 := r.ReadMapStart()
			if yyl2241 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2241, d)
			}
		} else if yyct2241 == codecSelferValueTypeArray1234 {
			yyl2241 := r.ReadArrayStart()
			if yyl2241 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2241, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2242Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2242Slc
	var yyhl2242 bool = l >= 0
	for yyj2242 := 0; ; yyj2242++ {
		if yyhl2242 {
			if yyj2242 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2242Slc = r.DecodeBytes(yys2242Slc, true, true)
		yys2242 := string(yys2242Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2242 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2242)
		} // end switch yys2242
	} // end for yyj2242
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2244 int
	var yyb2244 bool
	var yyhl2244 bool = l >= 0
	yyj2244++
	if yyhl2244 {
		yyb2244 = yyj2244 > l
	} else {
		yyb2244 = r.CheckBreak()
	}
	if yyb2244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj2244++
		if yyhl2244 {
			yyb2244 = yyj2244 > l
		} else {
			yyb2244 = r.CheckBreak()
		}
		if yyb2244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2246 := z.EncBinary()
		_ = yym2246
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2247 := !z.EncBinary()
			yy2arr2247 := z.EncBasicHandle().StructToArray
			var yyq2247 [1]bool
			_, _, _ = yysep2247, yyq2247, yy2arr2247
			const yyr2247 bool = false
			yyq2247[0] = true
			var yynn2247 int
			if yyr2247 || yy2arr2247 {
				r.EncodeArrayStart(1)
			} else {
				yynn2247 = 0
				for _, b := range yyq2247 {
					if b {
						yynn2247++
					}
				}
				r.EncodeMapStart(yynn2247)
				yynn2247 = 0
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2247[0] {
					yy2249 := &x.KubeletEndpoint
					yy2249.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2247[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2250 := &x.KubeletEndpoint
					yy2250.CodecEncodeSelf(e)
				}
			}
			if yyr2247 || yy2arr2247 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2251 := z.DecBinary()
	_ = yym2251
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2252 := r.ContainerType()
		if yyct2252 == codecSelferValueTypeMap1234 {
			yyl2252 := r.ReadMapStart()
			if yyl2252 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2252, d)
			}
		} else if yyct2252 == codecSelferValueTypeArray1234 {
			yyl2252 := r.ReadArrayStart()
			if yyl2252 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2252, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2253Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2253Slc
	var yyhl2253 bool = l >= 0
	for yyj2253 := 0; ; yyj2253++ {
		if yyhl2253 {
			if yyj2253 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2253Slc = r.DecodeBytes(yys2253Slc, true, true)
		yys2253 := string(yys2253Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2253 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2254 := &x.KubeletEndpoint
				yyv2254.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2253)
		} // end switch yys2253
	} // end for yyj2253
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2255 int
	var yyb2255 bool
	var yyhl2255 bool = l >= 0
	yyj2255++
	if yyhl2255 {
		yyb2255 = yyj2255 > l
	} else {
		yyb2255 = r.CheckBreak()
	}
	if yyb2255 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2256 := &x.KubeletEndpoint
		yyv2256.CodecDecodeSelf(d)
	}
	for {
		yyj2255++
		if yyhl2255 {
			yyb2255 = yyj2255 > l
		} else {
			yyb2255 = r.CheckBreak()
		}
		if yyb2255 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2255-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2257 := z.EncBinary()
		_ = yym2257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2258 := !z.EncBinary()
			yy2arr2258 := z.EncBasicHandle().StructToArray
			var yyq2258 [8]bool
			_, _, _ = yysep2258, yyq2258, yy2arr2258
			const yyr2258 bool = false
			var yynn2258 int
			if yyr2258 || yy2arr2258 {
				r.EncodeArrayStart(8)
			} else {
				yynn2258 = 8
				for _, b := range yyq2258 {
					if b {
						yynn2258++
					}
				}
				r.EncodeMapStart(yynn2258)
				yynn2258 = 0
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2260 := z.EncBinary()
				_ = yym2260
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2261 := z.EncBinary()
				_ = yym2261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2263 := z.EncBinary()
				_ = yym2263
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2264 := z.EncBinary()
				_ = yym2264
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2266 := z.EncBinary()
				_ = yym2266
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2267 := z.EncBinary()
				_ = yym2267
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2269 := z.EncBinary()
				_ = yym2269
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2270 := z.EncBinary()
				_ = yym2270
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2272 := z.EncBinary()
				_ = yym2272
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2273 := z.EncBinary()
				_ = yym2273
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OsImage))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2275 := z.EncBinary()
				_ = yym2275
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2276 := z.EncBinary()
				_ = yym2276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2278 := z.EncBinary()
				_ = yym2278
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2279 := z.EncBinary()
				_ = yym2279
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2281 := z.EncBinary()
				_ = yym2281
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2282 := z.EncBinary()
				_ = yym2282
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2283 := z.DecBinary()
	_ = yym2283
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2284 := r.ContainerType()
		if yyct2284 == codecSelferValueTypeMap1234 {
			yyl2284 := r.ReadMapStart()
			if yyl2284 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2284, d)
			}
		} else if yyct2284 == codecSelferValueTypeArray1234 {
			yyl2284 := r.ReadArrayStart()
			if yyl2284 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2284, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2285Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2285Slc
	var yyhl2285 bool = l >= 0
	for yyj2285 := 0; ; yyj2285++ {
		if yyhl2285 {
			if yyj2285 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2285Slc = r.DecodeBytes(yys2285Slc, true, true)
		yys2285 := string(yys2285Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2285 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OsImage = ""
			} else {
				x.OsImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2285)
		} // end switch yys2285
	} // end for yyj2285
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2294 int
	var yyb2294 bool
	var yyhl2294 bool = l >= 0
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OsImage = ""
	} else {
		x.OsImage = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	for {
		yyj2294++
		if yyhl2294 {
			yyb2294 = yyj2294 > l
		} else {
			yyb2294 = r.CheckBreak()
		}
		if yyb2294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2303 := z.EncBinary()
		_ = yym2303
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2304 := !z.EncBinary()
			yy2arr2304 := z.EncBasicHandle().StructToArray
			var yyq2304 [6]bool
			_, _, _ = yysep2304, yyq2304, yy2arr2304
			const yyr2304 bool = false
			yyq2304[0] = len(x.Capacity) != 0
			yyq2304[1] = x.Phase != ""
			yyq2304[2] = len(x.Conditions) != 0
			yyq2304[3] = len(x.Addresses) != 0
			yyq2304[4] = true
			yyq2304[5] = true
			var yynn2304 int
			if yyr2304 || yy2arr2304 {
				r.EncodeArrayStart(6)
			} else {
				yynn2304 = 0
				for _, b := range yyq2304 {
					if b {
						yynn2304++
					}
				}
				r.EncodeMapStart(yynn2304)
				yynn2304 = 0
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[1] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2304[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[2] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2308 := z.EncBinary()
						_ = yym2308
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2309 := z.EncBinary()
						_ = yym2309
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[3] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2311 := z.EncBinary()
						_ = yym2311
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2312 := z.EncBinary()
						_ = yym2312
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[4] {
					yy2314 := &x.DaemonEndpoints
					yy2314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2315 := &x.DaemonEndpoints
					yy2315.CodecEncodeSelf(e)
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2304[5] {
					yy2317 := &x.NodeInfo
					yy2317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2304[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2318 := &x.NodeInfo
					yy2318.CodecEncodeSelf(e)
				}
			}
			if yyr2304 || yy2arr2304 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2319 := z.DecBinary()
	_ = yym2319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2320 := r.ContainerType()
		if yyct2320 == codecSelferValueTypeMap1234 {
			yyl2320 := r.ReadMapStart()
			if yyl2320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2320, d)
			}
		} else if yyct2320 == codecSelferValueTypeArray1234 {
			yyl2320 := r.ReadArrayStart()
			if yyl2320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2321Slc
	var yyhl2321 bool = l >= 0
	for yyj2321 := 0; ; yyj2321++ {
		if yyhl2321 {
			if yyj2321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2321Slc = r.DecodeBytes(yys2321Slc, true, true)
		yys2321 := string(yys2321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2321 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2322 := &x.Capacity
				yyv2322.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2324 := &x.Conditions
				yym2325 := z.DecBinary()
				_ = yym2325
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2324), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2326 := &x.Addresses
				yym2327 := z.DecBinary()
				_ = yym2327
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2326), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2328 := &x.DaemonEndpoints
				yyv2328.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2329 := &x.NodeInfo
				yyv2329.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2321)
		} // end switch yys2321
	} // end for yyj2321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2330 int
	var yyb2330 bool
	var yyhl2330 bool = l >= 0
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2331 := &x.Capacity
		yyv2331.CodecDecodeSelf(d)
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2333 := &x.Conditions
		yym2334 := z.DecBinary()
		_ = yym2334
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2333), d)
		}
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2335 := &x.Addresses
		yym2336 := z.DecBinary()
		_ = yym2336
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2335), d)
		}
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2337 := &x.DaemonEndpoints
		yyv2337.CodecDecodeSelf(d)
	}
	yyj2330++
	if yyhl2330 {
		yyb2330 = yyj2330 > l
	} else {
		yyb2330 = r.CheckBreak()
	}
	if yyb2330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2338 := &x.NodeInfo
		yyv2338.CodecDecodeSelf(d)
	}
	for {
		yyj2330++
		if yyhl2330 {
			yyb2330 = yyj2330 > l
		} else {
			yyb2330 = r.CheckBreak()
		}
		if yyb2330 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2330-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2339 := z.EncBinary()
	_ = yym2339
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2340 := z.DecBinary()
	_ = yym2340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2341 := z.EncBinary()
	_ = yym2341
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2342 := z.DecBinary()
	_ = yym2342
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2343 := z.EncBinary()
		_ = yym2343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2344 := !z.EncBinary()
			yy2arr2344 := z.EncBasicHandle().StructToArray
			var yyq2344 [6]bool
			_, _, _ = yysep2344, yyq2344, yy2arr2344
			const yyr2344 bool = false
			yyq2344[2] = true
			yyq2344[3] = true
			yyq2344[4] = x.Reason != ""
			yyq2344[5] = x.Message != ""
			var yynn2344 int
			if yyr2344 || yy2arr2344 {
				r.EncodeArrayStart(6)
			} else {
				yynn2344 = 2
				for _, b := range yyq2344 {
					if b {
						yynn2344++
					}
				}
				r.EncodeMapStart(yynn2344)
				yynn2344 = 0
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2344[2] {
					yy2348 := &x.LastHeartbeatTime
					yym2349 := z.EncBinary()
					_ = yym2349
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2348) {
					} else if yym2349 {
						z.EncBinaryMarshal(yy2348)
					} else if !yym2349 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2348)
					} else {
						z.EncFallback(yy2348)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2344[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2350 := &x.LastHeartbeatTime
					yym2351 := z.EncBinary()
					_ = yym2351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2350) {
					} else if yym2351 {
						z.EncBinaryMarshal(yy2350)
					} else if !yym2351 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2350)
					} else {
						z.EncFallback(yy2350)
					}
				}
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2344[3] {
					yy2353 := &x.LastTransitionTime
					yym2354 := z.EncBinary()
					_ = yym2354
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2353) {
					} else if yym2354 {
						z.EncBinaryMarshal(yy2353)
					} else if !yym2354 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2353)
					} else {
						z.EncFallback(yy2353)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2344[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2355 := &x.LastTransitionTime
					yym2356 := z.EncBinary()
					_ = yym2356
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2355) {
					} else if yym2356 {
						z.EncBinaryMarshal(yy2355)
					} else if !yym2356 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2355)
					} else {
						z.EncFallback(yy2355)
					}
				}
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2344[4] {
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2344[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2344[5] {
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2344[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2344 || yy2arr2344 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2363 := z.DecBinary()
	_ = yym2363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2364 := r.ContainerType()
		if yyct2364 == codecSelferValueTypeMap1234 {
			yyl2364 := r.ReadMapStart()
			if yyl2364 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2364, d)
			}
		} else if yyct2364 == codecSelferValueTypeArray1234 {
			yyl2364 := r.ReadArrayStart()
			if yyl2364 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2365Slc
	var yyhl2365 bool = l >= 0
	for yyj2365 := 0; ; yyj2365++ {
		if yyhl2365 {
			if yyj2365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2365Slc = r.DecodeBytes(yys2365Slc, true, true)
		yys2365 := string(yys2365Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2365 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv2368 := &x.LastHeartbeatTime
				yym2369 := z.DecBinary()
				_ = yym2369
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2368) {
				} else if yym2369 {
					z.DecBinaryUnmarshal(yyv2368)
				} else if !yym2369 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2368)
				} else {
					z.DecFallback(yyv2368, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv2370 := &x.LastTransitionTime
				yym2371 := z.DecBinary()
				_ = yym2371
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2370) {
				} else if yym2371 {
					z.DecBinaryUnmarshal(yyv2370)
				} else if !yym2371 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2370)
				} else {
					z.DecFallback(yyv2370, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2365)
		} // end switch yys2365
	} // end for yyj2365
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2374 int
	var yyb2374 bool
	var yyhl2374 bool = l >= 0
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv2377 := &x.LastHeartbeatTime
		yym2378 := z.DecBinary()
		_ = yym2378
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2377) {
		} else if yym2378 {
			z.DecBinaryUnmarshal(yyv2377)
		} else if !yym2378 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2377)
		} else {
			z.DecFallback(yyv2377, false)
		}
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv2379 := &x.LastTransitionTime
		yym2380 := z.DecBinary()
		_ = yym2380
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2379) {
		} else if yym2380 {
			z.DecBinaryUnmarshal(yyv2379)
		} else if !yym2380 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2379)
		} else {
			z.DecFallback(yyv2379, false)
		}
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2374++
	if yyhl2374 {
		yyb2374 = yyj2374 > l
	} else {
		yyb2374 = r.CheckBreak()
	}
	if yyb2374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj2374++
		if yyhl2374 {
			yyb2374 = yyj2374 > l
		} else {
			yyb2374 = r.CheckBreak()
		}
		if yyb2374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2383 := z.EncBinary()
	_ = yym2383
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2384 := z.DecBinary()
	_ = yym2384
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2385 := z.EncBinary()
		_ = yym2385
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2386 := !z.EncBinary()
			yy2arr2386 := z.EncBasicHandle().StructToArray
			var yyq2386 [2]bool
			_, _, _ = yysep2386, yyq2386, yy2arr2386
			const yyr2386 bool = false
			var yynn2386 int
			if yyr2386 || yy2arr2386 {
				r.EncodeArrayStart(2)
			} else {
				yynn2386 = 2
				for _, b := range yyq2386 {
					if b {
						yynn2386++
					}
				}
				r.EncodeMapStart(yynn2386)
				yynn2386 = 0
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2389 := z.EncBinary()
				_ = yym2389
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2390 := z.EncBinary()
				_ = yym2390
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr2386 || yy2arr2386 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2391 := z.DecBinary()
	_ = yym2391
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2392 := r.ContainerType()
		if yyct2392 == codecSelferValueTypeMap1234 {
			yyl2392 := r.ReadMapStart()
			if yyl2392 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2392, d)
			}
		} else if yyct2392 == codecSelferValueTypeArray1234 {
			yyl2392 := r.ReadArrayStart()
			if yyl2392 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2392, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2393Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2393Slc
	var yyhl2393 bool = l >= 0
	for yyj2393 := 0; ; yyj2393++ {
		if yyhl2393 {
			if yyj2393 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2393Slc = r.DecodeBytes(yys2393Slc, true, true)
		yys2393 := string(yys2393Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2393 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2393)
		} // end switch yys2393
	} // end for yyj2393
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2396 int
	var yyb2396 bool
	var yyhl2396 bool = l >= 0
	yyj2396++
	if yyhl2396 {
		yyb2396 = yyj2396 > l
	} else {
		yyb2396 = r.CheckBreak()
	}
	if yyb2396 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj2396++
	if yyhl2396 {
		yyb2396 = yyj2396 > l
	} else {
		yyb2396 = r.CheckBreak()
	}
	if yyb2396 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj2396++
		if yyhl2396 {
			yyb2396 = yyj2396 > l
		} else {
			yyb2396 = r.CheckBreak()
		}
		if yyb2396 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2396-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2399 := z.EncBinary()
		_ = yym2399
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2400 := !z.EncBinary()
			yy2arr2400 := z.EncBasicHandle().StructToArray
			var yyq2400 [1]bool
			_, _, _ = yysep2400, yyq2400, yy2arr2400
			const yyr2400 bool = false
			yyq2400[0] = len(x.Capacity) != 0
			var yynn2400 int
			if yyr2400 || yy2arr2400 {
				r.EncodeArrayStart(1)
			} else {
				yynn2400 = 0
				for _, b := range yyq2400 {
					if b {
						yynn2400++
					}
				}
				r.EncodeMapStart(yynn2400)
				yynn2400 = 0
			}
			if yyr2400 || yy2arr2400 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2400[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2400[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2400 || yy2arr2400 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2402 := z.DecBinary()
	_ = yym2402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2403 := r.ContainerType()
		if yyct2403 == codecSelferValueTypeMap1234 {
			yyl2403 := r.ReadMapStart()
			if yyl2403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2403, d)
			}
		} else if yyct2403 == codecSelferValueTypeArray1234 {
			yyl2403 := r.ReadArrayStart()
			if yyl2403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2404Slc
	var yyhl2404 bool = l >= 0
	for yyj2404 := 0; ; yyj2404++ {
		if yyhl2404 {
			if yyj2404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2404Slc = r.DecodeBytes(yys2404Slc, true, true)
		yys2404 := string(yys2404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2404 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2405 := &x.Capacity
				yyv2405.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2404)
		} // end switch yys2404
	} // end for yyj2404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2406 int
	var yyb2406 bool
	var yyhl2406 bool = l >= 0
	yyj2406++
	if yyhl2406 {
		yyb2406 = yyj2406 > l
	} else {
		yyb2406 = r.CheckBreak()
	}
	if yyb2406 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2407 := &x.Capacity
		yyv2407.CodecDecodeSelf(d)
	}
	for {
		yyj2406++
		if yyhl2406 {
			yyb2406 = yyj2406 > l
		} else {
			yyb2406 = r.CheckBreak()
		}
		if yyb2406 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2406-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2408 := z.EncBinary()
	_ = yym2408
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2409 := z.DecBinary()
	_ = yym2409
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2410 := z.EncBinary()
		_ = yym2410
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2411 := z.DecBinary()
	_ = yym2411
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2412 := z.EncBinary()
		_ = yym2412
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2413 := !z.EncBinary()
			yy2arr2413 := z.EncBasicHandle().StructToArray
			var yyq2413 [5]bool
			_, _, _ = yysep2413, yyq2413, yy2arr2413
			const yyr2413 bool = false
			yyq2413[0] = x.Kind != ""
			yyq2413[1] = x.APIVersion != ""
			yyq2413[2] = true
			yyq2413[3] = true
			yyq2413[4] = true
			var yynn2413 int
			if yyr2413 || yy2arr2413 {
				r.EncodeArrayStart(5)
			} else {
				yynn2413 = 0
				for _, b := range yyq2413 {
					if b {
						yynn2413++
					}
				}
				r.EncodeMapStart(yynn2413)
				yynn2413 = 0
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[0] {
					yym2415 := z.EncBinary()
					_ = yym2415
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2413[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[1] {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2413[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[2] {
					yy2421 := &x.ObjectMeta
					yy2421.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2422 := &x.ObjectMeta
					yy2422.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[3] {
					yy2424 := &x.Spec
					yy2424.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2425 := &x.Spec
					yy2425.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2413[4] {
					yy2427 := &x.Status
					yy2427.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2413[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2428 := &x.Status
					yy2428.CodecEncodeSelf(e)
				}
			}
			if yyr2413 || yy2arr2413 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2429 := z.DecBinary()
	_ = yym2429
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2430 := r.ContainerType()
		if yyct2430 == codecSelferValueTypeMap1234 {
			yyl2430 := r.ReadMapStart()
			if yyl2430 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2430, d)
			}
		} else if yyct2430 == codecSelferValueTypeArray1234 {
			yyl2430 := r.ReadArrayStart()
			if yyl2430 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2430, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2431Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2431Slc
	var yyhl2431 bool = l >= 0
	for yyj2431 := 0; ; yyj2431++ {
		if yyhl2431 {
			if yyj2431 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2431Slc = r.DecodeBytes(yys2431Slc, true, true)
		yys2431 := string(yys2431Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2431 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2434 := &x.ObjectMeta
				yyv2434.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv2435 := &x.Spec
				yyv2435.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv2436 := &x.Status
				yyv2436.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2431)
		} // end switch yys2431
	} // end for yyj2431
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2437 int
	var yyb2437 bool
	var yyhl2437 bool = l >= 0
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2440 := &x.ObjectMeta
		yyv2440.CodecDecodeSelf(d)
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv2441 := &x.Spec
		yyv2441.CodecDecodeSelf(d)
	}
	yyj2437++
	if yyhl2437 {
		yyb2437 = yyj2437 > l
	} else {
		yyb2437 = r.CheckBreak()
	}
	if yyb2437 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv2442 := &x.Status
		yyv2442.CodecDecodeSelf(d)
	}
	for {
		yyj2437++
		if yyhl2437 {
			yyb2437 = yyj2437 > l
		} else {
			yyb2437 = r.CheckBreak()
		}
		if yyb2437 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2437-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2443 := z.EncBinary()
		_ = yym2443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2444 := !z.EncBinary()
			yy2arr2444 := z.EncBasicHandle().StructToArray
			var yyq2444 [4]bool
			_, _, _ = yysep2444, yyq2444, yy2arr2444
			const yyr2444 bool = false
			yyq2444[0] = x.Kind != ""
			yyq2444[1] = x.APIVersion != ""
			yyq2444[2] = true
			var yynn2444 int
			if yyr2444 || yy2arr2444 {
				r.EncodeArrayStart(4)
			} else {
				yynn2444 = 1
				for _, b := range yyq2444 {
					if b {
						yynn2444++
					}
				}
				r.EncodeMapStart(yynn2444)
				yynn2444 = 0
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2444[0] {
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2444[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2447 := z.EncBinary()
					_ = yym2447
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2444[1] {
					yym2449 := z.EncBinary()
					_ = yym2449
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2444[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2444[2] {
					yy2452 := &x.ListMeta
					yym2453 := z.EncBinary()
					_ = yym2453
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2452) {
					} else {
						z.EncFallback(yy2452)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2454 := &x.ListMeta
					yym2455 := z.EncBinary()
					_ = yym2455
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2454) {
					} else {
						z.EncFallback(yy2454)
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2457 := z.EncBinary()
					_ = yym2457
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2458 := z.EncBinary()
					_ = yym2458
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr2444 || yy2arr2444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2459 := z.DecBinary()
	_ = yym2459
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2460 := r.ContainerType()
		if yyct2460 == codecSelferValueTypeMap1234 {
			yyl2460 := r.ReadMapStart()
			if yyl2460 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2460, d)
			}
		} else if yyct2460 == codecSelferValueTypeArray1234 {
			yyl2460 := r.ReadArrayStart()
			if yyl2460 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2460, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2461Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2461Slc
	var yyhl2461 bool = l >= 0
	for yyj2461 := 0; ; yyj2461++ {
		if yyhl2461 {
			if yyj2461 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2461Slc = r.DecodeBytes(yys2461Slc, true, true)
		yys2461 := string(yys2461Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2461 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2464 := &x.ListMeta
				yym2465 := z.DecBinary()
				_ = yym2465
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2464) {
				} else {
					z.DecFallback(yyv2464, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2466 := &x.Items
				yym2467 := z.DecBinary()
				_ = yym2467
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv2466), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2461)
		} // end switch yys2461
	} // end for yyj2461
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2468 int
	var yyb2468 bool
	var yyhl2468 bool = l >= 0
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2471 := &x.ListMeta
		yym2472 := z.DecBinary()
		_ = yym2472
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2471) {
		} else {
			z.DecFallback(yyv2471, false)
		}
	}
	yyj2468++
	if yyhl2468 {
		yyb2468 = yyj2468 > l
	} else {
		yyb2468 = r.CheckBreak()
	}
	if yyb2468 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2473 := &x.Items
		yym2474 := z.DecBinary()
		_ = yym2474
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv2473), d)
		}
	}
	for {
		yyj2468++
		if yyhl2468 {
			yyb2468 = yyj2468 > l
		} else {
			yyb2468 = r.CheckBreak()
		}
		if yyb2468 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2468-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2475 := z.EncBinary()
		_ = yym2475
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2476 := !z.EncBinary()
			yy2arr2476 := z.EncBasicHandle().StructToArray
			var yyq2476 [1]bool
			_, _, _ = yysep2476, yyq2476, yy2arr2476
			const yyr2476 bool = false
			var yynn2476 int
			if yyr2476 || yy2arr2476 {
				r.EncodeArrayStart(1)
			} else {
				yynn2476 = 1
				for _, b := range yyq2476 {
					if b {
						yynn2476++
					}
				}
				r.EncodeMapStart(yynn2476)
				yynn2476 = 0
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2478 := z.EncBinary()
					_ = yym2478
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym2479 := z.EncBinary()
					_ = yym2479
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr2476 || yy2arr2476 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2480 := z.DecBinary()
	_ = yym2480
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2481 := r.ContainerType()
		if yyct2481 == codecSelferValueTypeMap1234 {
			yyl2481 := r.ReadMapStart()
			if yyl2481 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2481, d)
			}
		} else if yyct2481 == codecSelferValueTypeArray1234 {
			yyl2481 := r.ReadArrayStart()
			if yyl2481 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2481, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2482Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2482Slc
	var yyhl2482 bool = l >= 0
	for yyj2482 := 0; ; yyj2482++ {
		if yyhl2482 {
			if yyj2482 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2482Slc = r.DecodeBytes(yys2482Slc, true, true)
		yys2482 := string(yys2482Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2482 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv2483 := &x.Finalizers
				yym2484 := z.DecBinary()
				_ = yym2484
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv2483), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2482)
		} // end switch yys2482
	} // end for yyj2482
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2485 int
	var yyb2485 bool
	var yyhl2485 bool = l >= 0
	yyj2485++
	if yyhl2485 {
		yyb2485 = yyj2485 > l
	} else {
		yyb2485 = r.CheckBreak()
	}
	if yyb2485 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv2486 := &x.Finalizers
		yym2487 := z.DecBinary()
		_ = yym2487
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv2486), d)
		}
	}
	for {
		yyj2485++
		if yyhl2485 {
			yyb2485 = yyj2485 > l
		} else {
			yyb2485 = r.CheckBreak()
		}
		if yyb2485 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2485-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2488 := z.EncBinary()
	_ = yym2488
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2489 := z.DecBinary()
	_ = yym2489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2490 := z.EncBinary()
		_ = yym2490
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2491 := !z.EncBinary()
			yy2arr2491 := z.EncBasicHandle().StructToArray
			var yyq2491 [1]bool
			_, _, _ = yysep2491, yyq2491, yy2arr2491
			const yyr2491 bool = false
			yyq2491[0] = x.Phase != ""
			var yynn2491 int
			if yyr2491 || yy2arr2491 {
				r.EncodeArrayStart(1)
			} else {
				yynn2491 = 0
				for _, b := range yyq2491 {
					if b {
						yynn2491++
					}
				}
				r.EncodeMapStart(yynn2491)
				yynn2491 = 0
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2491[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2491[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2491 || yy2arr2491 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2493 := z.DecBinary()
	_ = yym2493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2494 := r.ContainerType()
		if yyct2494 == codecSelferValueTypeMap1234 {
			yyl2494 := r.ReadMapStart()
			if yyl2494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2494, d)
			}
		} else if yyct2494 == codecSelferValueTypeArray1234 {
			yyl2494 := r.ReadArrayStart()
			if yyl2494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2495Slc
	var yyhl2495 bool = l >= 0
	for yyj2495 := 0; ; yyj2495++ {
		if yyhl2495 {
			if yyj2495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2495Slc = r.DecodeBytes(yys2495Slc, true, true)
		yys2495 := string(yys2495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2495 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2495)
		} // end switch yys2495
	} // end for yyj2495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2497 int
	var yyb2497 bool
	var yyhl2497 bool = l >= 0
	yyj2497++
	if yyhl2497 {
		yyb2497 = yyj2497 > l
	} else {
		yyb2497 = r.CheckBreak()
	}
	if yyb2497 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj2497++
		if yyhl2497 {
			yyb2497 = yyj2497 > l
		} else {
			yyb2497 = r.CheckBreak()
		}
		if yyb2497 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2497-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2499 := z.EncBinary()
	_ = yym2499
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2500 := z.DecBinary()
	_ = yym2500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2501 := z.EncBinary()
		_ = yym2501
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2502 := !z.EncBinary()
			yy2arr2502 := z.EncBasicHandle().StructToArray
			var yyq2502 [5]bool
			_, _, _ = yysep2502, yyq2502, yy2arr2502
			const yyr2502 bool = false
			yyq2502[0] = x.Kind != ""
			yyq2502[1] = x.APIVersion != ""
			yyq2502[2] = true
			yyq2502[3] = true
			yyq2502[4] = true
			var yynn2502 int
			if yyr2502 || yy2arr2502 {
				r.EncodeArrayStart(5)
			} else {
				yynn2502 = 0
				for _, b := range yyq2502 {
					if b {
						yynn2502++
					}
				}
				r.EncodeMapStart(yynn2502)
				yynn2502 = 0
			}
			if yyr2502 || yy2arr2502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2502[0] {
					yym2504 := z.EncBinary()
					_ = yym2504
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2502[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2505 := z.EncBinary()
					_ = yym2505
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2502 || yy2arr2502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2502[1] {
					yym2507 := z.EncBinary()
					_ = yym2507
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2502[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2508 := z.EncBinary()
					_ = yym2508
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2502 || yy2arr2502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2502[2] {
					yy2510 := &x.ObjectMeta
					yy2510.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2502[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2511 := &x.ObjectMeta
					yy2511.CodecEncodeSelf(e)
				}
			}
			if yyr2502 || yy2arr2502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2502[3] {
					yy2513 := &x.Spec
					yy2513.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2502[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2514 := &x.Spec
					yy2514.CodecEncodeSelf(e)
				}
			}
			if yyr2502 || yy2arr2502 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2502[4] {
					yy2516 := &x.Status
					yy2516.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2502[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2517 := &x.Status
					yy2517.CodecEncodeSelf(e)
				}
			}
			if yyr2502 || yy2arr2502 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2518 := z.DecBinary()
	_ = yym2518
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2519 := r.ContainerType()
		if yyct2519 == codecSelferValueTypeMap1234 {
			yyl2519 := r.ReadMapStart()
			if yyl2519 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2519, d)
			}
		} else if yyct2519 == codecSelferValueTypeArray1234 {
			yyl2519 := r.ReadArrayStart()
			if yyl2519 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2519, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2520Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2520Slc
	var yyhl2520 bool = l >= 0
	for yyj2520 := 0; ; yyj2520++ {
		if yyhl2520 {
			if yyj2520 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2520Slc = r.DecodeBytes(yys2520Slc, true, true)
		yys2520 := string(yys2520Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2520 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2523 := &x.ObjectMeta
				yyv2523.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv2524 := &x.Spec
				yyv2524.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv2525 := &x.Status
				yyv2525.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2520)
		} // end switch yys2520
	} // end for yyj2520
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2526 int
	var yyb2526 bool
	var yyhl2526 bool = l >= 0
	yyj2526++
	if yyhl2526 {
		yyb2526 = yyj2526 > l
	} else {
		yyb2526 = r.CheckBreak()
	}
	if yyb2526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2526++
	if yyhl2526 {
		yyb2526 = yyj2526 > l
	} else {
		yyb2526 = r.CheckBreak()
	}
	if yyb2526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2526++
	if yyhl2526 {
		yyb2526 = yyj2526 > l
	} else {
		yyb2526 = r.CheckBreak()
	}
	if yyb2526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2529 := &x.ObjectMeta
		yyv2529.CodecDecodeSelf(d)
	}
	yyj2526++
	if yyhl2526 {
		yyb2526 = yyj2526 > l
	} else {
		yyb2526 = r.CheckBreak()
	}
	if yyb2526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv2530 := &x.Spec
		yyv2530.CodecDecodeSelf(d)
	}
	yyj2526++
	if yyhl2526 {
		yyb2526 = yyj2526 > l
	} else {
		yyb2526 = r.CheckBreak()
	}
	if yyb2526 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv2531 := &x.Status
		yyv2531.CodecDecodeSelf(d)
	}
	for {
		yyj2526++
		if yyhl2526 {
			yyb2526 = yyj2526 > l
		} else {
			yyb2526 = r.CheckBreak()
		}
		if yyb2526 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2526-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2532 := z.EncBinary()
		_ = yym2532
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2533 := !z.EncBinary()
			yy2arr2533 := z.EncBasicHandle().StructToArray
			var yyq2533 [4]bool
			_, _, _ = yysep2533, yyq2533, yy2arr2533
			const yyr2533 bool = false
			yyq2533[0] = x.Kind != ""
			yyq2533[1] = x.APIVersion != ""
			yyq2533[2] = true
			var yynn2533 int
			if yyr2533 || yy2arr2533 {
				r.EncodeArrayStart(4)
			} else {
				yynn2533 = 1
				for _, b := range yyq2533 {
					if b {
						yynn2533++
					}
				}
				r.EncodeMapStart(yynn2533)
				yynn2533 = 0
			}
			if yyr2533 || yy2arr2533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2533[0] {
					yym2535 := z.EncBinary()
					_ = yym2535
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2533[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2536 := z.EncBinary()
					_ = yym2536
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2533 || yy2arr2533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2533[1] {
					yym2538 := z.EncBinary()
					_ = yym2538
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2533[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2539 := z.EncBinary()
					_ = yym2539
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2533 || yy2arr2533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2533[2] {
					yy2541 := &x.ListMeta
					yym2542 := z.EncBinary()
					_ = yym2542
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2541) {
					} else {
						z.EncFallback(yy2541)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2533[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2543 := &x.ListMeta
					yym2544 := z.EncBinary()
					_ = yym2544
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2543) {
					} else {
						z.EncFallback(yy2543)
					}
				}
			}
			if yyr2533 || yy2arr2533 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2546 := z.EncBinary()
					_ = yym2546
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2547 := z.EncBinary()
					_ = yym2547
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr2533 || yy2arr2533 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2548 := z.DecBinary()
	_ = yym2548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2549 := r.ContainerType()
		if yyct2549 == codecSelferValueTypeMap1234 {
			yyl2549 := r.ReadMapStart()
			if yyl2549 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2549, d)
			}
		} else if yyct2549 == codecSelferValueTypeArray1234 {
			yyl2549 := r.ReadArrayStart()
			if yyl2549 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2550Slc
	var yyhl2550 bool = l >= 0
	for yyj2550 := 0; ; yyj2550++ {
		if yyhl2550 {
			if yyj2550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2550Slc = r.DecodeBytes(yys2550Slc, true, true)
		yys2550 := string(yys2550Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2550 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2553 := &x.ListMeta
				yym2554 := z.DecBinary()
				_ = yym2554
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2553) {
				} else {
					z.DecFallback(yyv2553, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2555 := &x.Items
				yym2556 := z.DecBinary()
				_ = yym2556
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv2555), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2550)
		} // end switch yys2550
	} // end for yyj2550
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2557 int
	var yyb2557 bool
	var yyhl2557 bool = l >= 0
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2560 := &x.ListMeta
		yym2561 := z.DecBinary()
		_ = yym2561
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2560) {
		} else {
			z.DecFallback(yyv2560, false)
		}
	}
	yyj2557++
	if yyhl2557 {
		yyb2557 = yyj2557 > l
	} else {
		yyb2557 = r.CheckBreak()
	}
	if yyb2557 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2562 := &x.Items
		yym2563 := z.DecBinary()
		_ = yym2563
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv2562), d)
		}
	}
	for {
		yyj2557++
		if yyhl2557 {
			yyb2557 = yyj2557 > l
		} else {
			yyb2557 = r.CheckBreak()
		}
		if yyb2557 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2557-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2564 := z.EncBinary()
		_ = yym2564
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2565 := !z.EncBinary()
			yy2arr2565 := z.EncBasicHandle().StructToArray
			var yyq2565 [4]bool
			_, _, _ = yysep2565, yyq2565, yy2arr2565
			const yyr2565 bool = false
			yyq2565[0] = x.Kind != ""
			yyq2565[1] = x.APIVersion != ""
			yyq2565[2] = true
			var yynn2565 int
			if yyr2565 || yy2arr2565 {
				r.EncodeArrayStart(4)
			} else {
				yynn2565 = 1
				for _, b := range yyq2565 {
					if b {
						yynn2565++
					}
				}
				r.EncodeMapStart(yynn2565)
				yynn2565 = 0
			}
			if yyr2565 || yy2arr2565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2565[0] {
					yym2567 := z.EncBinary()
					_ = yym2567
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2565[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2568 := z.EncBinary()
					_ = yym2568
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2565 || yy2arr2565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2565[1] {
					yym2570 := z.EncBinary()
					_ = yym2570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2565[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2571 := z.EncBinary()
					_ = yym2571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2565 || yy2arr2565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2565[2] {
					yy2573 := &x.ObjectMeta
					yy2573.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2565[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2574 := &x.ObjectMeta
					yy2574.CodecEncodeSelf(e)
				}
			}
			if yyr2565 || yy2arr2565 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2576 := &x.Target
				yy2576.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2577 := &x.Target
				yy2577.CodecEncodeSelf(e)
			}
			if yyr2565 || yy2arr2565 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2578 := z.DecBinary()
	_ = yym2578
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2579 := r.ContainerType()
		if yyct2579 == codecSelferValueTypeMap1234 {
			yyl2579 := r.ReadMapStart()
			if yyl2579 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2579, d)
			}
		} else if yyct2579 == codecSelferValueTypeArray1234 {
			yyl2579 := r.ReadArrayStart()
			if yyl2579 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2579, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2580Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2580Slc
	var yyhl2580 bool = l >= 0
	for yyj2580 := 0; ; yyj2580++ {
		if yyhl2580 {
			if yyj2580 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2580Slc = r.DecodeBytes(yys2580Slc, true, true)
		yys2580 := string(yys2580Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2580 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2583 := &x.ObjectMeta
				yyv2583.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv2584 := &x.Target
				yyv2584.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2580)
		} // end switch yys2580
	} // end for yyj2580
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2585 int
	var yyb2585 bool
	var yyhl2585 bool = l >= 0
	yyj2585++
	if yyhl2585 {
		yyb2585 = yyj2585 > l
	} else {
		yyb2585 = r.CheckBreak()
	}
	if yyb2585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2585++
	if yyhl2585 {
		yyb2585 = yyj2585 > l
	} else {
		yyb2585 = r.CheckBreak()
	}
	if yyb2585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2585++
	if yyhl2585 {
		yyb2585 = yyj2585 > l
	} else {
		yyb2585 = r.CheckBreak()
	}
	if yyb2585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2588 := &x.ObjectMeta
		yyv2588.CodecDecodeSelf(d)
	}
	yyj2585++
	if yyhl2585 {
		yyb2585 = yyj2585 > l
	} else {
		yyb2585 = r.CheckBreak()
	}
	if yyb2585 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv2589 := &x.Target
		yyv2589.CodecDecodeSelf(d)
	}
	for {
		yyj2585++
		if yyhl2585 {
			yyb2585 = yyj2585 > l
		} else {
			yyb2585 = r.CheckBreak()
		}
		if yyb2585 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2585-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2590 := z.EncBinary()
		_ = yym2590
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2591 := !z.EncBinary()
			yy2arr2591 := z.EncBasicHandle().StructToArray
			var yyq2591 [3]bool
			_, _, _ = yysep2591, yyq2591, yy2arr2591
			const yyr2591 bool = false
			yyq2591[0] = x.Kind != ""
			yyq2591[1] = x.APIVersion != ""
			var yynn2591 int
			if yyr2591 || yy2arr2591 {
				r.EncodeArrayStart(3)
			} else {
				yynn2591 = 1
				for _, b := range yyq2591 {
					if b {
						yynn2591++
					}
				}
				r.EncodeMapStart(yynn2591)
				yynn2591 = 0
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[0] {
					yym2593 := z.EncBinary()
					_ = yym2593
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2594 := z.EncBinary()
					_ = yym2594
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2591[1] {
					yym2596 := z.EncBinary()
					_ = yym2596
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2591[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2597 := z.EncBinary()
					_ = yym2597
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2599 := *x.GracePeriodSeconds
					yym2600 := z.EncBinary()
					_ = yym2600
					if false {
					} else {
						r.EncodeInt(int64(yy2599))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.GracePeriodSeconds == nil {
					r.EncodeNil()
				} else {
					yy2601 := *x.GracePeriodSeconds
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						r.EncodeInt(int64(yy2601))
					}
				}
			}
			if yyr2591 || yy2arr2591 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2603 := z.DecBinary()
	_ = yym2603
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2604 := r.ContainerType()
		if yyct2604 == codecSelferValueTypeMap1234 {
			yyl2604 := r.ReadMapStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2604, d)
			}
		} else if yyct2604 == codecSelferValueTypeArray1234 {
			yyl2604 := r.ReadArrayStart()
			if yyl2604 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2604, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2605Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2605Slc
	var yyhl2605 bool = l >= 0
	for yyj2605 := 0; ; yyj2605++ {
		if yyhl2605 {
			if yyj2605 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2605Slc = r.DecodeBytes(yys2605Slc, true, true)
		yys2605 := string(yys2605Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2605 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym2609 := z.DecBinary()
				_ = yym2609
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2605)
		} // end switch yys2605
	} // end for yyj2605
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2610 int
	var yyb2610 bool
	var yyhl2610 bool = l >= 0
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2610++
	if yyhl2610 {
		yyb2610 = yyj2610 > l
	} else {
		yyb2610 = r.CheckBreak()
	}
	if yyb2610 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym2614 := z.DecBinary()
		_ = yym2614
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2610++
		if yyhl2610 {
			yyb2610 = yyj2610 > l
		} else {
			yyb2610 = r.CheckBreak()
		}
		if yyb2610 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2610-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2615 := z.EncBinary()
		_ = yym2615
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2616 := !z.EncBinary()
			yy2arr2616 := z.EncBasicHandle().StructToArray
			var yyq2616 [10]bool
			_, _, _ = yysep2616, yyq2616, yy2arr2616
			const yyr2616 bool = false
			yyq2616[0] = x.Kind != ""
			yyq2616[1] = x.APIVersion != ""
			var yynn2616 int
			if yyr2616 || yy2arr2616 {
				r.EncodeArrayStart(10)
			} else {
				yynn2616 = 8
				for _, b := range yyq2616 {
					if b {
						yynn2616++
					}
				}
				r.EncodeMapStart(yynn2616)
				yynn2616 = 0
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2616[0] {
					yym2618 := z.EncBinary()
					_ = yym2618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2616[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2619 := z.EncBinary()
					_ = yym2619
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2616[1] {
					yym2621 := z.EncBinary()
					_ = yym2621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2616[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2622 := z.EncBinary()
					_ = yym2622
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2624 := z.EncBinary()
				_ = yym2624
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2625 := z.EncBinary()
				_ = yym2625
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2627 := z.EncBinary()
				_ = yym2627
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2628 := z.EncBinary()
				_ = yym2628
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2630 := z.EncBinary()
				_ = yym2630
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2631 := z.EncBinary()
				_ = yym2631
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2633 := *x.SinceSeconds
					yym2634 := z.EncBinary()
					_ = yym2634
					if false {
					} else {
						r.EncodeInt(int64(yy2633))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy2635 := *x.SinceSeconds
					yym2636 := z.EncBinary()
					_ = yym2636
					if false {
					} else {
						r.EncodeInt(int64(yy2635))
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2638 := z.EncBinary()
					_ = yym2638
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2638 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2638 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym2639 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym2639 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2641 := z.EncBinary()
				_ = yym2641
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2642 := z.EncBinary()
				_ = yym2642
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2644 := *x.TailLines
					yym2645 := z.EncBinary()
					_ = yym2645
					if false {
					} else {
						r.EncodeInt(int64(yy2644))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy2646 := *x.TailLines
					yym2647 := z.EncBinary()
					_ = yym2647
					if false {
					} else {
						r.EncodeInt(int64(yy2646))
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2649 := *x.LimitBytes
					yym2650 := z.EncBinary()
					_ = yym2650
					if false {
					} else {
						r.EncodeInt(int64(yy2649))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy2651 := *x.LimitBytes
					yym2652 := z.EncBinary()
					_ = yym2652
					if false {
					} else {
						r.EncodeInt(int64(yy2651))
					}
				}
			}
			if yyr2616 || yy2arr2616 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2653 := z.DecBinary()
	_ = yym2653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2654 := r.ContainerType()
		if yyct2654 == codecSelferValueTypeMap1234 {
			yyl2654 := r.ReadMapStart()
			if yyl2654 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2654, d)
			}
		} else if yyct2654 == codecSelferValueTypeArray1234 {
			yyl2654 := r.ReadArrayStart()
			if yyl2654 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2654, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2655Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2655Slc
	var yyhl2655 bool = l >= 0
	for yyj2655 := 0; ; yyj2655++ {
		if yyhl2655 {
			if yyj2655 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2655Slc = r.DecodeBytes(yys2655Slc, true, true)
		yys2655 := string(yys2655Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2655 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym2662 := z.DecBinary()
				_ = yym2662
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym2664 := z.DecBinary()
				_ = yym2664
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym2664 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym2664 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym2667 := z.DecBinary()
				_ = yym2667
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym2669 := z.DecBinary()
				_ = yym2669
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2655)
		} // end switch yys2655
	} // end for yyj2655
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2670 int
	var yyb2670 bool
	var yyhl2670 bool = l >= 0
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym2677 := z.DecBinary()
		_ = yym2677
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym2679 := z.DecBinary()
		_ = yym2679
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym2679 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym2679 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym2682 := z.DecBinary()
		_ = yym2682
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj2670++
	if yyhl2670 {
		yyb2670 = yyj2670 > l
	} else {
		yyb2670 = r.CheckBreak()
	}
	if yyb2670 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym2684 := z.DecBinary()
		_ = yym2684
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2670++
		if yyhl2670 {
			yyb2670 = yyj2670 > l
		} else {
			yyb2670 = r.CheckBreak()
		}
		if yyb2670 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2670-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2685 := z.EncBinary()
		_ = yym2685
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2686 := !z.EncBinary()
			yy2arr2686 := z.EncBasicHandle().StructToArray
			var yyq2686 [7]bool
			_, _, _ = yysep2686, yyq2686, yy2arr2686
			const yyr2686 bool = false
			yyq2686[0] = x.Kind != ""
			yyq2686[1] = x.APIVersion != ""
			yyq2686[2] = x.Stdin != false
			yyq2686[3] = x.Stdout != false
			yyq2686[4] = x.Stderr != false
			yyq2686[5] = x.TTY != false
			yyq2686[6] = x.Container != ""
			var yynn2686 int
			if yyr2686 || yy2arr2686 {
				r.EncodeArrayStart(7)
			} else {
				yynn2686 = 0
				for _, b := range yyq2686 {
					if b {
						yynn2686++
					}
				}
				r.EncodeMapStart(yynn2686)
				yynn2686 = 0
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[0] {
					yym2688 := z.EncBinary()
					_ = yym2688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2686[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2689 := z.EncBinary()
					_ = yym2689
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[1] {
					yym2691 := z.EncBinary()
					_ = yym2691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2686[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2692 := z.EncBinary()
					_ = yym2692
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[2] {
					yym2694 := z.EncBinary()
					_ = yym2694
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2686[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2695 := z.EncBinary()
					_ = yym2695
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[3] {
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2686[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2698 := z.EncBinary()
					_ = yym2698
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[4] {
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2686[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2701 := z.EncBinary()
					_ = yym2701
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[5] {
					yym2703 := z.EncBinary()
					_ = yym2703
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2686[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2704 := z.EncBinary()
					_ = yym2704
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2686[6] {
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2686[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2707 := z.EncBinary()
					_ = yym2707
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr2686 || yy2arr2686 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2708 := z.DecBinary()
	_ = yym2708
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2709 := r.ContainerType()
		if yyct2709 == codecSelferValueTypeMap1234 {
			yyl2709 := r.ReadMapStart()
			if yyl2709 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2709, d)
			}
		} else if yyct2709 == codecSelferValueTypeArray1234 {
			yyl2709 := r.ReadArrayStart()
			if yyl2709 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2709, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2710Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2710Slc
	var yyhl2710 bool = l >= 0
	for yyj2710 := 0; ; yyj2710++ {
		if yyhl2710 {
			if yyj2710 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2710Slc = r.DecodeBytes(yys2710Slc, true, true)
		yys2710 := string(yys2710Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2710 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2710)
		} // end switch yys2710
	} // end for yyj2710
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2718 int
	var yyb2718 bool
	var yyhl2718 bool = l >= 0
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2718++
	if yyhl2718 {
		yyb2718 = yyj2718 > l
	} else {
		yyb2718 = r.CheckBreak()
	}
	if yyb2718 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj2718++
		if yyhl2718 {
			yyb2718 = yyj2718 > l
		} else {
			yyb2718 = r.CheckBreak()
		}
		if yyb2718 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2718-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2726 := z.EncBinary()
		_ = yym2726
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2727 := !z.EncBinary()
			yy2arr2727 := z.EncBasicHandle().StructToArray
			var yyq2727 [8]bool
			_, _, _ = yysep2727, yyq2727, yy2arr2727
			const yyr2727 bool = false
			yyq2727[0] = x.Kind != ""
			yyq2727[1] = x.APIVersion != ""
			var yynn2727 int
			if yyr2727 || yy2arr2727 {
				r.EncodeArrayStart(8)
			} else {
				yynn2727 = 6
				for _, b := range yyq2727 {
					if b {
						yynn2727++
					}
				}
				r.EncodeMapStart(yynn2727)
				yynn2727 = 0
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2727[0] {
					yym2729 := z.EncBinary()
					_ = yym2729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2727[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2727[1] {
					yym2732 := z.EncBinary()
					_ = yym2732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2727[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2733 := z.EncBinary()
					_ = yym2733
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2735 := z.EncBinary()
				_ = yym2735
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2736 := z.EncBinary()
				_ = yym2736
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2738 := z.EncBinary()
				_ = yym2738
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2739 := z.EncBinary()
				_ = yym2739
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2741 := z.EncBinary()
				_ = yym2741
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2742 := z.EncBinary()
				_ = yym2742
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2744 := z.EncBinary()
				_ = yym2744
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2745 := z.EncBinary()
				_ = yym2745
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2747 := z.EncBinary()
				_ = yym2747
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2748 := z.EncBinary()
				_ = yym2748
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2750 := z.EncBinary()
					_ = yym2750
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym2751 := z.EncBinary()
					_ = yym2751
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr2727 || yy2arr2727 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2752 := z.DecBinary()
	_ = yym2752
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2753 := r.ContainerType()
		if yyct2753 == codecSelferValueTypeMap1234 {
			yyl2753 := r.ReadMapStart()
			if yyl2753 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2753, d)
			}
		} else if yyct2753 == codecSelferValueTypeArray1234 {
			yyl2753 := r.ReadArrayStart()
			if yyl2753 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2753, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2754Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2754Slc
	var yyhl2754 bool = l >= 0
	for yyj2754 := 0; ; yyj2754++ {
		if yyhl2754 {
			if yyj2754 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2754Slc = r.DecodeBytes(yys2754Slc, true, true)
		yys2754 := string(yys2754Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2754 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv2762 := &x.Command
				yym2763 := z.DecBinary()
				_ = yym2763
				if false {
				} else {
					z.F.DecSliceStringX(yyv2762, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2754)
		} // end switch yys2754
	} // end for yyj2754
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2764 int
	var yyb2764 bool
	var yyhl2764 bool = l >= 0
	yyj2764++
	if yyhl2764 {
		yyb2764 = yyj2764 > l
	} else {
		yyb2764 = r.CheckBreak()
	}
	if yyb2764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2764++
	if yyhl2764 {
		yyb2764 = yyj2764 > l
	} else {
		yyb2764 = r.CheckBreak()
	}
	if yyb2764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2764++
	if yyhl2764 {
		yyb2764 = yyj2764 > l
	} else {
		yyb2764 = r.CheckBreak()
	}
	if yyb2764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj2764++
	if yyhl2764 {
		yyb2764 = yyj2764 > l
	} else {
		yyb2764 = r.CheckBreak()
	}
	if yyb2764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj2764++
	if yyhl2764 {
		yyb2764 = yyj2764 > l
	} else {
		yyb2764 = r.CheckBreak()
	}
	if yyb2764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj2764++
	if yyhl2764 {
		yyb2764 = yyj2764 > l
	} else {
		yyb2764 = r.CheckBreak()
	}
	if yyb2764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj2764++
	if yyhl2764 {
		yyb2764 = yyj2764 > l
	} else {
		yyb2764 = r.CheckBreak()
	}
	if yyb2764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj2764++
	if yyhl2764 {
		yyb2764 = yyj2764 > l
	} else {
		yyb2764 = r.CheckBreak()
	}
	if yyb2764 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv2772 := &x.Command
		yym2773 := z.DecBinary()
		_ = yym2773
		if false {
		} else {
			z.F.DecSliceStringX(yyv2772, false, d)
		}
	}
	for {
		yyj2764++
		if yyhl2764 {
			yyb2764 = yyj2764 > l
		} else {
			yyb2764 = r.CheckBreak()
		}
		if yyb2764 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2764-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2774 := z.EncBinary()
		_ = yym2774
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2775 := !z.EncBinary()
			yy2arr2775 := z.EncBasicHandle().StructToArray
			var yyq2775 [3]bool
			_, _, _ = yysep2775, yyq2775, yy2arr2775
			const yyr2775 bool = false
			yyq2775[0] = x.Kind != ""
			yyq2775[1] = x.APIVersion != ""
			var yynn2775 int
			if yyr2775 || yy2arr2775 {
				r.EncodeArrayStart(3)
			} else {
				yynn2775 = 1
				for _, b := range yyq2775 {
					if b {
						yynn2775++
					}
				}
				r.EncodeMapStart(yynn2775)
				yynn2775 = 0
			}
			if yyr2775 || yy2arr2775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2775[0] {
					yym2777 := z.EncBinary()
					_ = yym2777
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2775[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2778 := z.EncBinary()
					_ = yym2778
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2775 || yy2arr2775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2775[1] {
					yym2780 := z.EncBinary()
					_ = yym2780
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2775[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2781 := z.EncBinary()
					_ = yym2781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2775 || yy2arr2775 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2783 := z.EncBinary()
				_ = yym2783
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2784 := z.EncBinary()
				_ = yym2784
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr2775 || yy2arr2775 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2785 := z.DecBinary()
	_ = yym2785
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2786 := r.ContainerType()
		if yyct2786 == codecSelferValueTypeMap1234 {
			yyl2786 := r.ReadMapStart()
			if yyl2786 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2786, d)
			}
		} else if yyct2786 == codecSelferValueTypeArray1234 {
			yyl2786 := r.ReadArrayStart()
			if yyl2786 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2786, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2787Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2787Slc
	var yyhl2787 bool = l >= 0
	for yyj2787 := 0; ; yyj2787++ {
		if yyhl2787 {
			if yyj2787 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2787Slc = r.DecodeBytes(yys2787Slc, true, true)
		yys2787 := string(yys2787Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2787 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2787)
		} // end switch yys2787
	} // end for yyj2787
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2791 int
	var yyb2791 bool
	var yyhl2791 bool = l >= 0
	yyj2791++
	if yyhl2791 {
		yyb2791 = yyj2791 > l
	} else {
		yyb2791 = r.CheckBreak()
	}
	if yyb2791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2791++
	if yyhl2791 {
		yyb2791 = yyj2791 > l
	} else {
		yyb2791 = r.CheckBreak()
	}
	if yyb2791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2791++
	if yyhl2791 {
		yyb2791 = yyj2791 > l
	} else {
		yyb2791 = r.CheckBreak()
	}
	if yyb2791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj2791++
		if yyhl2791 {
			yyb2791 = yyj2791 > l
		} else {
			yyb2791 = r.CheckBreak()
		}
		if yyb2791 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2791-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2795 := z.EncBinary()
		_ = yym2795
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2796 := !z.EncBinary()
			yy2arr2796 := z.EncBasicHandle().StructToArray
			var yyq2796 [7]bool
			_, _, _ = yysep2796, yyq2796, yy2arr2796
			const yyr2796 bool = false
			yyq2796[0] = x.Kind != ""
			yyq2796[1] = x.Namespace != ""
			yyq2796[2] = x.Name != ""
			yyq2796[3] = x.UID != ""
			yyq2796[4] = x.APIVersion != ""
			yyq2796[5] = x.ResourceVersion != ""
			yyq2796[6] = x.FieldPath != ""
			var yynn2796 int
			if yyr2796 || yy2arr2796 {
				r.EncodeArrayStart(7)
			} else {
				yynn2796 = 0
				for _, b := range yyq2796 {
					if b {
						yynn2796++
					}
				}
				r.EncodeMapStart(yynn2796)
				yynn2796 = 0
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[0] {
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[1] {
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[2] {
					yym2804 := z.EncBinary()
					_ = yym2804
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[3] {
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2808 := z.EncBinary()
					_ = yym2808
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[4] {
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2811 := z.EncBinary()
					_ = yym2811
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[5] {
					yym2813 := z.EncBinary()
					_ = yym2813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2814 := z.EncBinary()
					_ = yym2814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[6] {
					yym2816 := z.EncBinary()
					_ = yym2816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2817 := z.EncBinary()
					_ = yym2817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2818 := z.DecBinary()
	_ = yym2818
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2819 := r.ContainerType()
		if yyct2819 == codecSelferValueTypeMap1234 {
			yyl2819 := r.ReadMapStart()
			if yyl2819 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2819, d)
			}
		} else if yyct2819 == codecSelferValueTypeArray1234 {
			yyl2819 := r.ReadArrayStart()
			if yyl2819 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2819, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2820Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2820Slc
	var yyhl2820 bool = l >= 0
	for yyj2820 := 0; ; yyj2820++ {
		if yyhl2820 {
			if yyj2820 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2820Slc = r.DecodeBytes(yys2820Slc, true, true)
		yys2820 := string(yys2820Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2820 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2820)
		} // end switch yys2820
	} // end for yyj2820
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2828 int
	var yyb2828 bool
	var yyhl2828 bool = l >= 0
	yyj2828++
	if yyhl2828 {
		yyb2828 = yyj2828 > l
	} else {
		yyb2828 = r.CheckBreak()
	}
	if yyb2828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2828++
	if yyhl2828 {
		yyb2828 = yyj2828 > l
	} else {
		yyb2828 = r.CheckBreak()
	}
	if yyb2828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj2828++
	if yyhl2828 {
		yyb2828 = yyj2828 > l
	} else {
		yyb2828 = r.CheckBreak()
	}
	if yyb2828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2828++
	if yyhl2828 {
		yyb2828 = yyj2828 > l
	} else {
		yyb2828 = r.CheckBreak()
	}
	if yyb2828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj2828++
	if yyhl2828 {
		yyb2828 = yyj2828 > l
	} else {
		yyb2828 = r.CheckBreak()
	}
	if yyb2828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2828++
	if yyhl2828 {
		yyb2828 = yyj2828 > l
	} else {
		yyb2828 = r.CheckBreak()
	}
	if yyb2828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj2828++
	if yyhl2828 {
		yyb2828 = yyj2828 > l
	} else {
		yyb2828 = r.CheckBreak()
	}
	if yyb2828 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj2828++
		if yyhl2828 {
			yyb2828 = yyj2828 > l
		} else {
			yyb2828 = r.CheckBreak()
		}
		if yyb2828 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2828-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2836 := z.EncBinary()
		_ = yym2836
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2837 := !z.EncBinary()
			yy2arr2837 := z.EncBasicHandle().StructToArray
			var yyq2837 [1]bool
			_, _, _ = yysep2837, yyq2837, yy2arr2837
			const yyr2837 bool = false
			var yynn2837 int
			if yyr2837 || yy2arr2837 {
				r.EncodeArrayStart(1)
			} else {
				yynn2837 = 1
				for _, b := range yyq2837 {
					if b {
						yynn2837++
					}
				}
				r.EncodeMapStart(yynn2837)
				yynn2837 = 0
			}
			if yyr2837 || yy2arr2837 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2839 := z.EncBinary()
				_ = yym2839
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2840 := z.EncBinary()
				_ = yym2840
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2837 || yy2arr2837 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2841 := z.DecBinary()
	_ = yym2841
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2842 := r.ContainerType()
		if yyct2842 == codecSelferValueTypeMap1234 {
			yyl2842 := r.ReadMapStart()
			if yyl2842 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2842, d)
			}
		} else if yyct2842 == codecSelferValueTypeArray1234 {
			yyl2842 := r.ReadArrayStart()
			if yyl2842 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2842, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2843Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2843Slc
	var yyhl2843 bool = l >= 0
	for yyj2843 := 0; ; yyj2843++ {
		if yyhl2843 {
			if yyj2843 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2843Slc = r.DecodeBytes(yys2843Slc, true, true)
		yys2843 := string(yys2843Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2843 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2843)
		} // end switch yys2843
	} // end for yyj2843
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2845 int
	var yyb2845 bool
	var yyhl2845 bool = l >= 0
	yyj2845++
	if yyhl2845 {
		yyb2845 = yyj2845 > l
	} else {
		yyb2845 = r.CheckBreak()
	}
	if yyb2845 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj2845++
		if yyhl2845 {
			yyb2845 = yyj2845 > l
		} else {
			yyb2845 = r.CheckBreak()
		}
		if yyb2845 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2845-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2847 := z.EncBinary()
		_ = yym2847
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2848 := !z.EncBinary()
			yy2arr2848 := z.EncBasicHandle().StructToArray
			var yyq2848 [3]bool
			_, _, _ = yysep2848, yyq2848, yy2arr2848
			const yyr2848 bool = false
			yyq2848[0] = x.Kind != ""
			yyq2848[1] = x.APIVersion != ""
			yyq2848[2] = true
			var yynn2848 int
			if yyr2848 || yy2arr2848 {
				r.EncodeArrayStart(3)
			} else {
				yynn2848 = 0
				for _, b := range yyq2848 {
					if b {
						yynn2848++
					}
				}
				r.EncodeMapStart(yynn2848)
				yynn2848 = 0
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[0] {
					yym2850 := z.EncBinary()
					_ = yym2850
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2848[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2851 := z.EncBinary()
					_ = yym2851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[1] {
					yym2853 := z.EncBinary()
					_ = yym2853
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2848[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2854 := z.EncBinary()
					_ = yym2854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2848[2] {
					yy2856 := &x.Reference
					yy2856.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2848[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2857 := &x.Reference
					yy2857.CodecEncodeSelf(e)
				}
			}
			if yyr2848 || yy2arr2848 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2858 := z.DecBinary()
	_ = yym2858
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2859 := r.ContainerType()
		if yyct2859 == codecSelferValueTypeMap1234 {
			yyl2859 := r.ReadMapStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2859, d)
			}
		} else if yyct2859 == codecSelferValueTypeArray1234 {
			yyl2859 := r.ReadArrayStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2859, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2860Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2860Slc
	var yyhl2860 bool = l >= 0
	for yyj2860 := 0; ; yyj2860++ {
		if yyhl2860 {
			if yyj2860 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2860Slc = r.DecodeBytes(yys2860Slc, true, true)
		yys2860 := string(yys2860Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2860 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv2863 := &x.Reference
				yyv2863.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2860)
		} // end switch yys2860
	} // end for yyj2860
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2864 int
	var yyb2864 bool
	var yyhl2864 bool = l >= 0
	yyj2864++
	if yyhl2864 {
		yyb2864 = yyj2864 > l
	} else {
		yyb2864 = r.CheckBreak()
	}
	if yyb2864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2864++
	if yyhl2864 {
		yyb2864 = yyj2864 > l
	} else {
		yyb2864 = r.CheckBreak()
	}
	if yyb2864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2864++
	if yyhl2864 {
		yyb2864 = yyj2864 > l
	} else {
		yyb2864 = r.CheckBreak()
	}
	if yyb2864 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv2867 := &x.Reference
		yyv2867.CodecDecodeSelf(d)
	}
	for {
		yyj2864++
		if yyhl2864 {
			yyb2864 = yyj2864 > l
		} else {
			yyb2864 = r.CheckBreak()
		}
		if yyb2864 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2864-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2868 := z.EncBinary()
		_ = yym2868
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2869 := !z.EncBinary()
			yy2arr2869 := z.EncBasicHandle().StructToArray
			var yyq2869 [2]bool
			_, _, _ = yysep2869, yyq2869, yy2arr2869
			const yyr2869 bool = false
			yyq2869[0] = x.Component != ""
			yyq2869[1] = x.Host != ""
			var yynn2869 int
			if yyr2869 || yy2arr2869 {
				r.EncodeArrayStart(2)
			} else {
				yynn2869 = 0
				for _, b := range yyq2869 {
					if b {
						yynn2869++
					}
				}
				r.EncodeMapStart(yynn2869)
				yynn2869 = 0
			}
			if yyr2869 || yy2arr2869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2869[0] {
					yym2871 := z.EncBinary()
					_ = yym2871
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2869[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2872 := z.EncBinary()
					_ = yym2872
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr2869 || yy2arr2869 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2869[1] {
					yym2874 := z.EncBinary()
					_ = yym2874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2869[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2875 := z.EncBinary()
					_ = yym2875
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr2869 || yy2arr2869 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2876 := z.DecBinary()
	_ = yym2876
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2877 := r.ContainerType()
		if yyct2877 == codecSelferValueTypeMap1234 {
			yyl2877 := r.ReadMapStart()
			if yyl2877 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2877, d)
			}
		} else if yyct2877 == codecSelferValueTypeArray1234 {
			yyl2877 := r.ReadArrayStart()
			if yyl2877 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2877, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2878Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2878Slc
	var yyhl2878 bool = l >= 0
	for yyj2878 := 0; ; yyj2878++ {
		if yyhl2878 {
			if yyj2878 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2878Slc = r.DecodeBytes(yys2878Slc, true, true)
		yys2878 := string(yys2878Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2878 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2878)
		} // end switch yys2878
	} // end for yyj2878
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2881 int
	var yyb2881 bool
	var yyhl2881 bool = l >= 0
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj2881++
	if yyhl2881 {
		yyb2881 = yyj2881 > l
	} else {
		yyb2881 = r.CheckBreak()
	}
	if yyb2881 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj2881++
		if yyhl2881 {
			yyb2881 = yyj2881 > l
		} else {
			yyb2881 = r.CheckBreak()
		}
		if yyb2881 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2881-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2884 := z.EncBinary()
		_ = yym2884
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2885 := !z.EncBinary()
			yy2arr2885 := z.EncBasicHandle().StructToArray
			var yyq2885 [11]bool
			_, _, _ = yysep2885, yyq2885, yy2arr2885
			const yyr2885 bool = false
			yyq2885[0] = x.Kind != ""
			yyq2885[1] = x.APIVersion != ""
			yyq2885[2] = true
			yyq2885[3] = true
			yyq2885[4] = x.Reason != ""
			yyq2885[5] = x.Message != ""
			yyq2885[6] = true
			yyq2885[7] = true
			yyq2885[8] = true
			yyq2885[9] = x.Count != 0
			yyq2885[10] = x.Type != ""
			var yynn2885 int
			if yyr2885 || yy2arr2885 {
				r.EncodeArrayStart(11)
			} else {
				yynn2885 = 0
				for _, b := range yyq2885 {
					if b {
						yynn2885++
					}
				}
				r.EncodeMapStart(yynn2885)
				yynn2885 = 0
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[0] {
					yym2887 := z.EncBinary()
					_ = yym2887
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2885[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2888 := z.EncBinary()
					_ = yym2888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[1] {
					yym2890 := z.EncBinary()
					_ = yym2890
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2885[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2891 := z.EncBinary()
					_ = yym2891
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[2] {
					yy2893 := &x.ObjectMeta
					yy2893.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2885[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2894 := &x.ObjectMeta
					yy2894.CodecEncodeSelf(e)
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[3] {
					yy2896 := &x.InvolvedObject
					yy2896.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2885[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2897 := &x.InvolvedObject
					yy2897.CodecEncodeSelf(e)
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[4] {
					yym2899 := z.EncBinary()
					_ = yym2899
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2885[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2900 := z.EncBinary()
					_ = yym2900
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[5] {
					yym2902 := z.EncBinary()
					_ = yym2902
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2885[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2903 := z.EncBinary()
					_ = yym2903
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[6] {
					yy2905 := &x.Source
					yy2905.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2885[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2906 := &x.Source
					yy2906.CodecEncodeSelf(e)
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[7] {
					yy2908 := &x.FirstTimestamp
					yym2909 := z.EncBinary()
					_ = yym2909
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2908) {
					} else if yym2909 {
						z.EncBinaryMarshal(yy2908)
					} else if !yym2909 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2908)
					} else {
						z.EncFallback(yy2908)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2885[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2910 := &x.FirstTimestamp
					yym2911 := z.EncBinary()
					_ = yym2911
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2910) {
					} else if yym2911 {
						z.EncBinaryMarshal(yy2910)
					} else if !yym2911 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2910)
					} else {
						z.EncFallback(yy2910)
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[8] {
					yy2913 := &x.LastTimestamp
					yym2914 := z.EncBinary()
					_ = yym2914
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2913) {
					} else if yym2914 {
						z.EncBinaryMarshal(yy2913)
					} else if !yym2914 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2913)
					} else {
						z.EncFallback(yy2913)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2885[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2915 := &x.LastTimestamp
					yym2916 := z.EncBinary()
					_ = yym2916
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2915) {
					} else if yym2916 {
						z.EncBinaryMarshal(yy2915)
					} else if !yym2916 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy2915)
					} else {
						z.EncFallback(yy2915)
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[9] {
					yym2918 := z.EncBinary()
					_ = yym2918
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2885[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2919 := z.EncBinary()
					_ = yym2919
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2885[10] {
					yym2921 := z.EncBinary()
					_ = yym2921
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2885[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2922 := z.EncBinary()
					_ = yym2922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr2885 || yy2arr2885 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2923 := z.DecBinary()
	_ = yym2923
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2924 := r.ContainerType()
		if yyct2924 == codecSelferValueTypeMap1234 {
			yyl2924 := r.ReadMapStart()
			if yyl2924 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2924, d)
			}
		} else if yyct2924 == codecSelferValueTypeArray1234 {
			yyl2924 := r.ReadArrayStart()
			if yyl2924 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2924, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2925Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2925Slc
	var yyhl2925 bool = l >= 0
	for yyj2925 := 0; ; yyj2925++ {
		if yyhl2925 {
			if yyj2925 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2925Slc = r.DecodeBytes(yys2925Slc, true, true)
		yys2925 := string(yys2925Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2925 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2928 := &x.ObjectMeta
				yyv2928.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv2929 := &x.InvolvedObject
				yyv2929.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv2932 := &x.Source
				yyv2932.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2933 := &x.FirstTimestamp
				yym2934 := z.DecBinary()
				_ = yym2934
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2933) {
				} else if yym2934 {
					z.DecBinaryUnmarshal(yyv2933)
				} else if !yym2934 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2933)
				} else {
					z.DecFallback(yyv2933, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv2935 := &x.LastTimestamp
				yym2936 := z.DecBinary()
				_ = yym2936
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2935) {
				} else if yym2936 {
					z.DecBinaryUnmarshal(yyv2935)
				} else if !yym2936 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2935)
				} else {
					z.DecFallback(yyv2935, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2925)
		} // end switch yys2925
	} // end for yyj2925
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2939 int
	var yyb2939 bool
	var yyhl2939 bool = l >= 0
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2942 := &x.ObjectMeta
		yyv2942.CodecDecodeSelf(d)
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv2943 := &x.InvolvedObject
		yyv2943.CodecDecodeSelf(d)
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv2946 := &x.Source
		yyv2946.CodecDecodeSelf(d)
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2947 := &x.FirstTimestamp
		yym2948 := z.DecBinary()
		_ = yym2948
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2947) {
		} else if yym2948 {
			z.DecBinaryUnmarshal(yyv2947)
		} else if !yym2948 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2947)
		} else {
			z.DecFallback(yyv2947, false)
		}
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv2949 := &x.LastTimestamp
		yym2950 := z.DecBinary()
		_ = yym2950
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2949) {
		} else if yym2950 {
			z.DecBinaryUnmarshal(yyv2949)
		} else if !yym2950 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2949)
		} else {
			z.DecFallback(yyv2949, false)
		}
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj2939++
	if yyhl2939 {
		yyb2939 = yyj2939 > l
	} else {
		yyb2939 = r.CheckBreak()
	}
	if yyb2939 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj2939++
		if yyhl2939 {
			yyb2939 = yyj2939 > l
		} else {
			yyb2939 = r.CheckBreak()
		}
		if yyb2939 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2939-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2953 := z.EncBinary()
		_ = yym2953
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2954 := !z.EncBinary()
			yy2arr2954 := z.EncBasicHandle().StructToArray
			var yyq2954 [4]bool
			_, _, _ = yysep2954, yyq2954, yy2arr2954
			const yyr2954 bool = false
			yyq2954[0] = x.Kind != ""
			yyq2954[1] = x.APIVersion != ""
			yyq2954[2] = true
			var yynn2954 int
			if yyr2954 || yy2arr2954 {
				r.EncodeArrayStart(4)
			} else {
				yynn2954 = 1
				for _, b := range yyq2954 {
					if b {
						yynn2954++
					}
				}
				r.EncodeMapStart(yynn2954)
				yynn2954 = 0
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[0] {
					yym2956 := z.EncBinary()
					_ = yym2956
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2957 := z.EncBinary()
					_ = yym2957
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[1] {
					yym2959 := z.EncBinary()
					_ = yym2959
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2954[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2960 := z.EncBinary()
					_ = yym2960
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2954[2] {
					yy2962 := &x.ListMeta
					yym2963 := z.EncBinary()
					_ = yym2963
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2962) {
					} else {
						z.EncFallback(yy2962)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2954[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2964 := &x.ListMeta
					yym2965 := z.EncBinary()
					_ = yym2965
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2964) {
					} else {
						z.EncFallback(yy2964)
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2967 := z.EncBinary()
					_ = yym2967
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2968 := z.EncBinary()
					_ = yym2968
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr2954 || yy2arr2954 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2969 := z.DecBinary()
	_ = yym2969
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2970 := r.ContainerType()
		if yyct2970 == codecSelferValueTypeMap1234 {
			yyl2970 := r.ReadMapStart()
			if yyl2970 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2970, d)
			}
		} else if yyct2970 == codecSelferValueTypeArray1234 {
			yyl2970 := r.ReadArrayStart()
			if yyl2970 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2970, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2971Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2971Slc
	var yyhl2971 bool = l >= 0
	for yyj2971 := 0; ; yyj2971++ {
		if yyhl2971 {
			if yyj2971 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2971Slc = r.DecodeBytes(yys2971Slc, true, true)
		yys2971 := string(yys2971Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2971 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2974 := &x.ListMeta
				yym2975 := z.DecBinary()
				_ = yym2975
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2974) {
				} else {
					z.DecFallback(yyv2974, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2976 := &x.Items
				yym2977 := z.DecBinary()
				_ = yym2977
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv2976), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2971)
		} // end switch yys2971
	} // end for yyj2971
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2978 int
	var yyb2978 bool
	var yyhl2978 bool = l >= 0
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2981 := &x.ListMeta
		yym2982 := z.DecBinary()
		_ = yym2982
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2981) {
		} else {
			z.DecFallback(yyv2981, false)
		}
	}
	yyj2978++
	if yyhl2978 {
		yyb2978 = yyj2978 > l
	} else {
		yyb2978 = r.CheckBreak()
	}
	if yyb2978 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2983 := &x.Items
		yym2984 := z.DecBinary()
		_ = yym2984
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv2983), d)
		}
	}
	for {
		yyj2978++
		if yyhl2978 {
			yyb2978 = yyj2978 > l
		} else {
			yyb2978 = r.CheckBreak()
		}
		if yyb2978 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2978-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2985 := z.EncBinary()
		_ = yym2985
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2986 := !z.EncBinary()
			yy2arr2986 := z.EncBasicHandle().StructToArray
			var yyq2986 [4]bool
			_, _, _ = yysep2986, yyq2986, yy2arr2986
			const yyr2986 bool = false
			yyq2986[0] = x.Kind != ""
			yyq2986[1] = x.APIVersion != ""
			yyq2986[2] = true
			var yynn2986 int
			if yyr2986 || yy2arr2986 {
				r.EncodeArrayStart(4)
			} else {
				yynn2986 = 1
				for _, b := range yyq2986 {
					if b {
						yynn2986++
					}
				}
				r.EncodeMapStart(yynn2986)
				yynn2986 = 0
			}
			if yyr2986 || yy2arr2986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2986[0] {
					yym2988 := z.EncBinary()
					_ = yym2988
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2986[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2989 := z.EncBinary()
					_ = yym2989
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2986 || yy2arr2986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2986[1] {
					yym2991 := z.EncBinary()
					_ = yym2991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2986[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2992 := z.EncBinary()
					_ = yym2992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2986 || yy2arr2986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2986[2] {
					yy2994 := &x.ListMeta
					yym2995 := z.EncBinary()
					_ = yym2995
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2994) {
					} else {
						z.EncFallback(yy2994)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2986[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2996 := &x.ListMeta
					yym2997 := z.EncBinary()
					_ = yym2997
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2996) {
					} else {
						z.EncFallback(yy2996)
					}
				}
			}
			if yyr2986 || yy2arr2986 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2999 := z.EncBinary()
					_ = yym2999
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg6_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3000 := z.EncBinary()
					_ = yym3000
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg6_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr2986 || yy2arr2986 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3001 := z.DecBinary()
	_ = yym3001
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3002 := r.ContainerType()
		if yyct3002 == codecSelferValueTypeMap1234 {
			yyl3002 := r.ReadMapStart()
			if yyl3002 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3002, d)
			}
		} else if yyct3002 == codecSelferValueTypeArray1234 {
			yyl3002 := r.ReadArrayStart()
			if yyl3002 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3002, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3003Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3003Slc
	var yyhl3003 bool = l >= 0
	for yyj3003 := 0; ; yyj3003++ {
		if yyhl3003 {
			if yyj3003 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3003Slc = r.DecodeBytes(yys3003Slc, true, true)
		yys3003 := string(yys3003Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3003 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3006 := &x.ListMeta
				yym3007 := z.DecBinary()
				_ = yym3007
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3006) {
				} else {
					z.DecFallback(yyv3006, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3008 := &x.Items
				yym3009 := z.DecBinary()
				_ = yym3009
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg6_runtime.Object)(yyv3008), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3003)
		} // end switch yys3003
	} // end for yyj3003
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3010 int
	var yyb3010 bool
	var yyhl3010 bool = l >= 0
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3013 := &x.ListMeta
		yym3014 := z.DecBinary()
		_ = yym3014
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3013) {
		} else {
			z.DecFallback(yyv3013, false)
		}
	}
	yyj3010++
	if yyhl3010 {
		yyb3010 = yyj3010 > l
	} else {
		yyb3010 = r.CheckBreak()
	}
	if yyb3010 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3015 := &x.Items
		yym3016 := z.DecBinary()
		_ = yym3016
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg6_runtime.Object)(yyv3015), d)
		}
	}
	for {
		yyj3010++
		if yyhl3010 {
			yyb3010 = yyj3010 > l
		} else {
			yyb3010 = r.CheckBreak()
		}
		if yyb3010 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3010-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3017 := z.EncBinary()
	_ = yym3017
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3018 := z.DecBinary()
	_ = yym3018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3019 := z.EncBinary()
		_ = yym3019
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3020 := !z.EncBinary()
			yy2arr3020 := z.EncBasicHandle().StructToArray
			var yyq3020 [6]bool
			_, _, _ = yysep3020, yyq3020, yy2arr3020
			const yyr3020 bool = false
			yyq3020[0] = x.Type != ""
			yyq3020[1] = len(x.Max) != 0
			yyq3020[2] = len(x.Min) != 0
			yyq3020[3] = len(x.Default) != 0
			yyq3020[4] = len(x.DefaultRequest) != 0
			yyq3020[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3020 int
			if yyr3020 || yy2arr3020 {
				r.EncodeArrayStart(6)
			} else {
				yynn3020 = 0
				for _, b := range yyq3020 {
					if b {
						yynn3020++
					}
				}
				r.EncodeMapStart(yynn3020)
				yynn3020 = 0
			}
			if yyr3020 || yy2arr3020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3020[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3020[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3020 || yy2arr3020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3020[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3020 || yy2arr3020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3020[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3020 || yy2arr3020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3020[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3020 || yy2arr3020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3020[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3020 || yy2arr3020 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3020[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3020[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3020 || yy2arr3020 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3027 := z.DecBinary()
	_ = yym3027
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3028 := r.ContainerType()
		if yyct3028 == codecSelferValueTypeMap1234 {
			yyl3028 := r.ReadMapStart()
			if yyl3028 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3028, d)
			}
		} else if yyct3028 == codecSelferValueTypeArray1234 {
			yyl3028 := r.ReadArrayStart()
			if yyl3028 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3028, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3029Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3029Slc
	var yyhl3029 bool = l >= 0
	for yyj3029 := 0; ; yyj3029++ {
		if yyhl3029 {
			if yyj3029 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3029Slc = r.DecodeBytes(yys3029Slc, true, true)
		yys3029 := string(yys3029Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3029 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3031 := &x.Max
				yyv3031.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3032 := &x.Min
				yyv3032.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3033 := &x.Default
				yyv3033.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3034 := &x.DefaultRequest
				yyv3034.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3035 := &x.MaxLimitRequestRatio
				yyv3035.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3029)
		} // end switch yys3029
	} // end for yyj3029
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3036 int
	var yyb3036 bool
	var yyhl3036 bool = l >= 0
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3038 := &x.Max
		yyv3038.CodecDecodeSelf(d)
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3039 := &x.Min
		yyv3039.CodecDecodeSelf(d)
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3040 := &x.Default
		yyv3040.CodecDecodeSelf(d)
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3041 := &x.DefaultRequest
		yyv3041.CodecDecodeSelf(d)
	}
	yyj3036++
	if yyhl3036 {
		yyb3036 = yyj3036 > l
	} else {
		yyb3036 = r.CheckBreak()
	}
	if yyb3036 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3042 := &x.MaxLimitRequestRatio
		yyv3042.CodecDecodeSelf(d)
	}
	for {
		yyj3036++
		if yyhl3036 {
			yyb3036 = yyj3036 > l
		} else {
			yyb3036 = r.CheckBreak()
		}
		if yyb3036 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3036-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3043 := z.EncBinary()
		_ = yym3043
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3044 := !z.EncBinary()
			yy2arr3044 := z.EncBasicHandle().StructToArray
			var yyq3044 [1]bool
			_, _, _ = yysep3044, yyq3044, yy2arr3044
			const yyr3044 bool = false
			var yynn3044 int
			if yyr3044 || yy2arr3044 {
				r.EncodeArrayStart(1)
			} else {
				yynn3044 = 1
				for _, b := range yyq3044 {
					if b {
						yynn3044++
					}
				}
				r.EncodeMapStart(yynn3044)
				yynn3044 = 0
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3046 := z.EncBinary()
					_ = yym3046
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym3047 := z.EncBinary()
					_ = yym3047
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3044 || yy2arr3044 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3048 := z.DecBinary()
	_ = yym3048
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3049 := r.ContainerType()
		if yyct3049 == codecSelferValueTypeMap1234 {
			yyl3049 := r.ReadMapStart()
			if yyl3049 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3049, d)
			}
		} else if yyct3049 == codecSelferValueTypeArray1234 {
			yyl3049 := r.ReadArrayStart()
			if yyl3049 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3049, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3050Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3050Slc
	var yyhl3050 bool = l >= 0
	for yyj3050 := 0; ; yyj3050++ {
		if yyhl3050 {
			if yyj3050 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3050Slc = r.DecodeBytes(yys3050Slc, true, true)
		yys3050 := string(yys3050Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3050 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv3051 := &x.Limits
				yym3052 := z.DecBinary()
				_ = yym3052
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3051), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3050)
		} // end switch yys3050
	} // end for yyj3050
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3053 int
	var yyb3053 bool
	var yyhl3053 bool = l >= 0
	yyj3053++
	if yyhl3053 {
		yyb3053 = yyj3053 > l
	} else {
		yyb3053 = r.CheckBreak()
	}
	if yyb3053 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv3054 := &x.Limits
		yym3055 := z.DecBinary()
		_ = yym3055
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv3054), d)
		}
	}
	for {
		yyj3053++
		if yyhl3053 {
			yyb3053 = yyj3053 > l
		} else {
			yyb3053 = r.CheckBreak()
		}
		if yyb3053 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3053-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3056 := z.EncBinary()
		_ = yym3056
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3057 := !z.EncBinary()
			yy2arr3057 := z.EncBasicHandle().StructToArray
			var yyq3057 [4]bool
			_, _, _ = yysep3057, yyq3057, yy2arr3057
			const yyr3057 bool = false
			yyq3057[0] = x.Kind != ""
			yyq3057[1] = x.APIVersion != ""
			yyq3057[2] = true
			yyq3057[3] = true
			var yynn3057 int
			if yyr3057 || yy2arr3057 {
				r.EncodeArrayStart(4)
			} else {
				yynn3057 = 0
				for _, b := range yyq3057 {
					if b {
						yynn3057++
					}
				}
				r.EncodeMapStart(yynn3057)
				yynn3057 = 0
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3057[0] {
					yym3059 := z.EncBinary()
					_ = yym3059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3057[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3060 := z.EncBinary()
					_ = yym3060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3057[1] {
					yym3062 := z.EncBinary()
					_ = yym3062
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3057[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3063 := z.EncBinary()
					_ = yym3063
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3057[2] {
					yy3065 := &x.ObjectMeta
					yy3065.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3057[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3066 := &x.ObjectMeta
					yy3066.CodecEncodeSelf(e)
				}
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3057[3] {
					yy3068 := &x.Spec
					yy3068.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3057[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3069 := &x.Spec
					yy3069.CodecEncodeSelf(e)
				}
			}
			if yyr3057 || yy2arr3057 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3070 := z.DecBinary()
	_ = yym3070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3071 := r.ContainerType()
		if yyct3071 == codecSelferValueTypeMap1234 {
			yyl3071 := r.ReadMapStart()
			if yyl3071 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3071, d)
			}
		} else if yyct3071 == codecSelferValueTypeArray1234 {
			yyl3071 := r.ReadArrayStart()
			if yyl3071 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3071, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3072Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3072Slc
	var yyhl3072 bool = l >= 0
	for yyj3072 := 0; ; yyj3072++ {
		if yyhl3072 {
			if yyj3072 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3072Slc = r.DecodeBytes(yys3072Slc, true, true)
		yys3072 := string(yys3072Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3072 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3075 := &x.ObjectMeta
				yyv3075.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv3076 := &x.Spec
				yyv3076.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3072)
		} // end switch yys3072
	} // end for yyj3072
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3077 int
	var yyb3077 bool
	var yyhl3077 bool = l >= 0
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3080 := &x.ObjectMeta
		yyv3080.CodecDecodeSelf(d)
	}
	yyj3077++
	if yyhl3077 {
		yyb3077 = yyj3077 > l
	} else {
		yyb3077 = r.CheckBreak()
	}
	if yyb3077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv3081 := &x.Spec
		yyv3081.CodecDecodeSelf(d)
	}
	for {
		yyj3077++
		if yyhl3077 {
			yyb3077 = yyj3077 > l
		} else {
			yyb3077 = r.CheckBreak()
		}
		if yyb3077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3082 := z.EncBinary()
		_ = yym3082
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3083 := !z.EncBinary()
			yy2arr3083 := z.EncBasicHandle().StructToArray
			var yyq3083 [4]bool
			_, _, _ = yysep3083, yyq3083, yy2arr3083
			const yyr3083 bool = false
			yyq3083[0] = x.Kind != ""
			yyq3083[1] = x.APIVersion != ""
			yyq3083[2] = true
			var yynn3083 int
			if yyr3083 || yy2arr3083 {
				r.EncodeArrayStart(4)
			} else {
				yynn3083 = 1
				for _, b := range yyq3083 {
					if b {
						yynn3083++
					}
				}
				r.EncodeMapStart(yynn3083)
				yynn3083 = 0
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3083[0] {
					yym3085 := z.EncBinary()
					_ = yym3085
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3083[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3086 := z.EncBinary()
					_ = yym3086
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3083[1] {
					yym3088 := z.EncBinary()
					_ = yym3088
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3083[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3089 := z.EncBinary()
					_ = yym3089
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3083[2] {
					yy3091 := &x.ListMeta
					yym3092 := z.EncBinary()
					_ = yym3092
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3091) {
					} else {
						z.EncFallback(yy3091)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3083[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3093 := &x.ListMeta
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3093) {
					} else {
						z.EncFallback(yy3093)
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr3083 || yy2arr3083 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3098 := z.DecBinary()
	_ = yym3098
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3099 := r.ContainerType()
		if yyct3099 == codecSelferValueTypeMap1234 {
			yyl3099 := r.ReadMapStart()
			if yyl3099 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3099, d)
			}
		} else if yyct3099 == codecSelferValueTypeArray1234 {
			yyl3099 := r.ReadArrayStart()
			if yyl3099 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3099, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3100Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3100Slc
	var yyhl3100 bool = l >= 0
	for yyj3100 := 0; ; yyj3100++ {
		if yyhl3100 {
			if yyj3100 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3100Slc = r.DecodeBytes(yys3100Slc, true, true)
		yys3100 := string(yys3100Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3100 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3103 := &x.ListMeta
				yym3104 := z.DecBinary()
				_ = yym3104
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3103) {
				} else {
					z.DecFallback(yyv3103, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3105 := &x.Items
				yym3106 := z.DecBinary()
				_ = yym3106
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv3105), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3100)
		} // end switch yys3100
	} // end for yyj3100
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3107 int
	var yyb3107 bool
	var yyhl3107 bool = l >= 0
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3110 := &x.ListMeta
		yym3111 := z.DecBinary()
		_ = yym3111
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3110) {
		} else {
			z.DecFallback(yyv3110, false)
		}
	}
	yyj3107++
	if yyhl3107 {
		yyb3107 = yyj3107 > l
	} else {
		yyb3107 = r.CheckBreak()
	}
	if yyb3107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3112 := &x.Items
		yym3113 := z.DecBinary()
		_ = yym3113
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv3112), d)
		}
	}
	for {
		yyj3107++
		if yyhl3107 {
			yyb3107 = yyj3107 > l
		} else {
			yyb3107 = r.CheckBreak()
		}
		if yyb3107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3114 := z.EncBinary()
		_ = yym3114
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3115 := !z.EncBinary()
			yy2arr3115 := z.EncBasicHandle().StructToArray
			var yyq3115 [1]bool
			_, _, _ = yysep3115, yyq3115, yy2arr3115
			const yyr3115 bool = false
			yyq3115[0] = len(x.Hard) != 0
			var yynn3115 int
			if yyr3115 || yy2arr3115 {
				r.EncodeArrayStart(1)
			} else {
				yynn3115 = 0
				for _, b := range yyq3115 {
					if b {
						yynn3115++
					}
				}
				r.EncodeMapStart(yynn3115)
				yynn3115 = 0
			}
			if yyr3115 || yy2arr3115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3115[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3115[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3115 || yy2arr3115 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3117 := z.DecBinary()
	_ = yym3117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3118 := r.ContainerType()
		if yyct3118 == codecSelferValueTypeMap1234 {
			yyl3118 := r.ReadMapStart()
			if yyl3118 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3118, d)
			}
		} else if yyct3118 == codecSelferValueTypeArray1234 {
			yyl3118 := r.ReadArrayStart()
			if yyl3118 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3118, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3119Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3119Slc
	var yyhl3119 bool = l >= 0
	for yyj3119 := 0; ; yyj3119++ {
		if yyhl3119 {
			if yyj3119 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3119Slc = r.DecodeBytes(yys3119Slc, true, true)
		yys3119 := string(yys3119Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3119 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3120 := &x.Hard
				yyv3120.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3119)
		} // end switch yys3119
	} // end for yyj3119
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3121 int
	var yyb3121 bool
	var yyhl3121 bool = l >= 0
	yyj3121++
	if yyhl3121 {
		yyb3121 = yyj3121 > l
	} else {
		yyb3121 = r.CheckBreak()
	}
	if yyb3121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3122 := &x.Hard
		yyv3122.CodecDecodeSelf(d)
	}
	for {
		yyj3121++
		if yyhl3121 {
			yyb3121 = yyj3121 > l
		} else {
			yyb3121 = r.CheckBreak()
		}
		if yyb3121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3123 := z.EncBinary()
		_ = yym3123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3124 := !z.EncBinary()
			yy2arr3124 := z.EncBasicHandle().StructToArray
			var yyq3124 [2]bool
			_, _, _ = yysep3124, yyq3124, yy2arr3124
			const yyr3124 bool = false
			yyq3124[0] = len(x.Hard) != 0
			yyq3124[1] = len(x.Used) != 0
			var yynn3124 int
			if yyr3124 || yy2arr3124 {
				r.EncodeArrayStart(2)
			} else {
				yynn3124 = 0
				for _, b := range yyq3124 {
					if b {
						yynn3124++
					}
				}
				r.EncodeMapStart(yynn3124)
				yynn3124 = 0
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3124[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3124[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3124[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3124[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3127 := z.DecBinary()
	_ = yym3127
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3128 := r.ContainerType()
		if yyct3128 == codecSelferValueTypeMap1234 {
			yyl3128 := r.ReadMapStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3128, d)
			}
		} else if yyct3128 == codecSelferValueTypeArray1234 {
			yyl3128 := r.ReadArrayStart()
			if yyl3128 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3128, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3129Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3129Slc
	var yyhl3129 bool = l >= 0
	for yyj3129 := 0; ; yyj3129++ {
		if yyhl3129 {
			if yyj3129 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3129Slc = r.DecodeBytes(yys3129Slc, true, true)
		yys3129 := string(yys3129Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3129 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv3130 := &x.Hard
				yyv3130.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv3131 := &x.Used
				yyv3131.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3129)
		} // end switch yys3129
	} // end for yyj3129
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3132 int
	var yyb3132 bool
	var yyhl3132 bool = l >= 0
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv3133 := &x.Hard
		yyv3133.CodecDecodeSelf(d)
	}
	yyj3132++
	if yyhl3132 {
		yyb3132 = yyj3132 > l
	} else {
		yyb3132 = r.CheckBreak()
	}
	if yyb3132 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv3134 := &x.Used
		yyv3134.CodecDecodeSelf(d)
	}
	for {
		yyj3132++
		if yyhl3132 {
			yyb3132 = yyj3132 > l
		} else {
			yyb3132 = r.CheckBreak()
		}
		if yyb3132 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3132-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3135 := z.EncBinary()
		_ = yym3135
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3136 := !z.EncBinary()
			yy2arr3136 := z.EncBasicHandle().StructToArray
			var yyq3136 [5]bool
			_, _, _ = yysep3136, yyq3136, yy2arr3136
			const yyr3136 bool = false
			yyq3136[0] = x.Kind != ""
			yyq3136[1] = x.APIVersion != ""
			yyq3136[2] = true
			yyq3136[3] = true
			yyq3136[4] = true
			var yynn3136 int
			if yyr3136 || yy2arr3136 {
				r.EncodeArrayStart(5)
			} else {
				yynn3136 = 0
				for _, b := range yyq3136 {
					if b {
						yynn3136++
					}
				}
				r.EncodeMapStart(yynn3136)
				yynn3136 = 0
			}
			if yyr3136 || yy2arr3136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3136[0] {
					yym3138 := z.EncBinary()
					_ = yym3138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3136[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3139 := z.EncBinary()
					_ = yym3139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3136 || yy2arr3136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3136[1] {
					yym3141 := z.EncBinary()
					_ = yym3141
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3136[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3142 := z.EncBinary()
					_ = yym3142
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3136 || yy2arr3136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3136[2] {
					yy3144 := &x.ObjectMeta
					yy3144.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3136[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3145 := &x.ObjectMeta
					yy3145.CodecEncodeSelf(e)
				}
			}
			if yyr3136 || yy2arr3136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3136[3] {
					yy3147 := &x.Spec
					yy3147.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3136[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3148 := &x.Spec
					yy3148.CodecEncodeSelf(e)
				}
			}
			if yyr3136 || yy2arr3136 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3136[4] {
					yy3150 := &x.Status
					yy3150.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3136[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3151 := &x.Status
					yy3151.CodecEncodeSelf(e)
				}
			}
			if yyr3136 || yy2arr3136 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3152 := z.DecBinary()
	_ = yym3152
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3153 := r.ContainerType()
		if yyct3153 == codecSelferValueTypeMap1234 {
			yyl3153 := r.ReadMapStart()
			if yyl3153 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3153, d)
			}
		} else if yyct3153 == codecSelferValueTypeArray1234 {
			yyl3153 := r.ReadArrayStart()
			if yyl3153 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3153, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3154Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3154Slc
	var yyhl3154 bool = l >= 0
	for yyj3154 := 0; ; yyj3154++ {
		if yyhl3154 {
			if yyj3154 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3154Slc = r.DecodeBytes(yys3154Slc, true, true)
		yys3154 := string(yys3154Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3154 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3157 := &x.ObjectMeta
				yyv3157.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv3158 := &x.Spec
				yyv3158.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv3159 := &x.Status
				yyv3159.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3154)
		} // end switch yys3154
	} // end for yyj3154
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3160 int
	var yyb3160 bool
	var yyhl3160 bool = l >= 0
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3163 := &x.ObjectMeta
		yyv3163.CodecDecodeSelf(d)
	}
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv3164 := &x.Spec
		yyv3164.CodecDecodeSelf(d)
	}
	yyj3160++
	if yyhl3160 {
		yyb3160 = yyj3160 > l
	} else {
		yyb3160 = r.CheckBreak()
	}
	if yyb3160 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv3165 := &x.Status
		yyv3165.CodecDecodeSelf(d)
	}
	for {
		yyj3160++
		if yyhl3160 {
			yyb3160 = yyj3160 > l
		} else {
			yyb3160 = r.CheckBreak()
		}
		if yyb3160 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3160-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3166 := z.EncBinary()
		_ = yym3166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3167 := !z.EncBinary()
			yy2arr3167 := z.EncBasicHandle().StructToArray
			var yyq3167 [4]bool
			_, _, _ = yysep3167, yyq3167, yy2arr3167
			const yyr3167 bool = false
			yyq3167[0] = x.Kind != ""
			yyq3167[1] = x.APIVersion != ""
			yyq3167[2] = true
			var yynn3167 int
			if yyr3167 || yy2arr3167 {
				r.EncodeArrayStart(4)
			} else {
				yynn3167 = 1
				for _, b := range yyq3167 {
					if b {
						yynn3167++
					}
				}
				r.EncodeMapStart(yynn3167)
				yynn3167 = 0
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[0] {
					yym3169 := z.EncBinary()
					_ = yym3169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3167[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3170 := z.EncBinary()
					_ = yym3170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[1] {
					yym3172 := z.EncBinary()
					_ = yym3172
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3167[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3173 := z.EncBinary()
					_ = yym3173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3167[2] {
					yy3175 := &x.ListMeta
					yym3176 := z.EncBinary()
					_ = yym3176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3175) {
					} else {
						z.EncFallback(yy3175)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3177 := &x.ListMeta
					yym3178 := z.EncBinary()
					_ = yym3178
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3177) {
					} else {
						z.EncFallback(yy3177)
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3180 := z.EncBinary()
					_ = yym3180
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3181 := z.EncBinary()
					_ = yym3181
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr3167 || yy2arr3167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3182 := z.DecBinary()
	_ = yym3182
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3183 := r.ContainerType()
		if yyct3183 == codecSelferValueTypeMap1234 {
			yyl3183 := r.ReadMapStart()
			if yyl3183 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3183, d)
			}
		} else if yyct3183 == codecSelferValueTypeArray1234 {
			yyl3183 := r.ReadArrayStart()
			if yyl3183 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3183, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3184Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3184Slc
	var yyhl3184 bool = l >= 0
	for yyj3184 := 0; ; yyj3184++ {
		if yyhl3184 {
			if yyj3184 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3184Slc = r.DecodeBytes(yys3184Slc, true, true)
		yys3184 := string(yys3184Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3184 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3187 := &x.ListMeta
				yym3188 := z.DecBinary()
				_ = yym3188
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3187) {
				} else {
					z.DecFallback(yyv3187, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3189 := &x.Items
				yym3190 := z.DecBinary()
				_ = yym3190
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv3189), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3184)
		} // end switch yys3184
	} // end for yyj3184
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3191 int
	var yyb3191 bool
	var yyhl3191 bool = l >= 0
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3194 := &x.ListMeta
		yym3195 := z.DecBinary()
		_ = yym3195
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3194) {
		} else {
			z.DecFallback(yyv3194, false)
		}
	}
	yyj3191++
	if yyhl3191 {
		yyb3191 = yyj3191 > l
	} else {
		yyb3191 = r.CheckBreak()
	}
	if yyb3191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3196 := &x.Items
		yym3197 := z.DecBinary()
		_ = yym3197
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv3196), d)
		}
	}
	for {
		yyj3191++
		if yyhl3191 {
			yyb3191 = yyj3191 > l
		} else {
			yyb3191 = r.CheckBreak()
		}
		if yyb3191 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3191-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3198 := z.EncBinary()
		_ = yym3198
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3199 := !z.EncBinary()
			yy2arr3199 := z.EncBasicHandle().StructToArray
			var yyq3199 [5]bool
			_, _, _ = yysep3199, yyq3199, yy2arr3199
			const yyr3199 bool = false
			yyq3199[0] = x.Kind != ""
			yyq3199[1] = x.APIVersion != ""
			yyq3199[2] = true
			yyq3199[3] = len(x.Data) != 0
			yyq3199[4] = x.Type != ""
			var yynn3199 int
			if yyr3199 || yy2arr3199 {
				r.EncodeArrayStart(5)
			} else {
				yynn3199 = 0
				for _, b := range yyq3199 {
					if b {
						yynn3199++
					}
				}
				r.EncodeMapStart(yynn3199)
				yynn3199 = 0
			}
			if yyr3199 || yy2arr3199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3199[0] {
					yym3201 := z.EncBinary()
					_ = yym3201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3199[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3202 := z.EncBinary()
					_ = yym3202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3199 || yy2arr3199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3199[1] {
					yym3204 := z.EncBinary()
					_ = yym3204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3199[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3205 := z.EncBinary()
					_ = yym3205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3199 || yy2arr3199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3199[2] {
					yy3207 := &x.ObjectMeta
					yy3207.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3199[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3208 := &x.ObjectMeta
					yy3208.CodecEncodeSelf(e)
				}
			}
			if yyr3199 || yy2arr3199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3199[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3210 := z.EncBinary()
						_ = yym3210
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3199[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym3211 := z.EncBinary()
						_ = yym3211
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr3199 || yy2arr3199 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3199[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3199[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3199 || yy2arr3199 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3213 := z.DecBinary()
	_ = yym3213
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3214 := r.ContainerType()
		if yyct3214 == codecSelferValueTypeMap1234 {
			yyl3214 := r.ReadMapStart()
			if yyl3214 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3214, d)
			}
		} else if yyct3214 == codecSelferValueTypeArray1234 {
			yyl3214 := r.ReadArrayStart()
			if yyl3214 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3214, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3215Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3215Slc
	var yyhl3215 bool = l >= 0
	for yyj3215 := 0; ; yyj3215++ {
		if yyhl3215 {
			if yyj3215 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3215Slc = r.DecodeBytes(yys3215Slc, true, true)
		yys3215 := string(yys3215Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3215 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3218 := &x.ObjectMeta
				yyv3218.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3219 := &x.Data
				yym3220 := z.DecBinary()
				_ = yym3220
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv3219), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3215)
		} // end switch yys3215
	} // end for yyj3215
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3222 int
	var yyb3222 bool
	var yyhl3222 bool = l >= 0
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3225 := &x.ObjectMeta
		yyv3225.CodecDecodeSelf(d)
	}
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3226 := &x.Data
		yym3227 := z.DecBinary()
		_ = yym3227
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv3226), d)
		}
	}
	yyj3222++
	if yyhl3222 {
		yyb3222 = yyj3222 > l
	} else {
		yyb3222 = r.CheckBreak()
	}
	if yyb3222 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj3222++
		if yyhl3222 {
			yyb3222 = yyj3222 > l
		} else {
			yyb3222 = r.CheckBreak()
		}
		if yyb3222 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3222-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3229 := z.EncBinary()
	_ = yym3229
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3230 := z.DecBinary()
	_ = yym3230
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3231 := z.EncBinary()
		_ = yym3231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3232 := !z.EncBinary()
			yy2arr3232 := z.EncBasicHandle().StructToArray
			var yyq3232 [4]bool
			_, _, _ = yysep3232, yyq3232, yy2arr3232
			const yyr3232 bool = false
			yyq3232[0] = x.Kind != ""
			yyq3232[1] = x.APIVersion != ""
			yyq3232[2] = true
			var yynn3232 int
			if yyr3232 || yy2arr3232 {
				r.EncodeArrayStart(4)
			} else {
				yynn3232 = 1
				for _, b := range yyq3232 {
					if b {
						yynn3232++
					}
				}
				r.EncodeMapStart(yynn3232)
				yynn3232 = 0
			}
			if yyr3232 || yy2arr3232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3232[0] {
					yym3234 := z.EncBinary()
					_ = yym3234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3232[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3235 := z.EncBinary()
					_ = yym3235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3232 || yy2arr3232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3232[1] {
					yym3237 := z.EncBinary()
					_ = yym3237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3232[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3238 := z.EncBinary()
					_ = yym3238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3232 || yy2arr3232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3232[2] {
					yy3240 := &x.ListMeta
					yym3241 := z.EncBinary()
					_ = yym3241
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3240) {
					} else {
						z.EncFallback(yy3240)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3232[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3242 := &x.ListMeta
					yym3243 := z.EncBinary()
					_ = yym3243
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3242) {
					} else {
						z.EncFallback(yy3242)
					}
				}
			}
			if yyr3232 || yy2arr3232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3245 := z.EncBinary()
					_ = yym3245
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr3232 || yy2arr3232 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3247 := z.DecBinary()
	_ = yym3247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3248 := r.ContainerType()
		if yyct3248 == codecSelferValueTypeMap1234 {
			yyl3248 := r.ReadMapStart()
			if yyl3248 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3248, d)
			}
		} else if yyct3248 == codecSelferValueTypeArray1234 {
			yyl3248 := r.ReadArrayStart()
			if yyl3248 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3248, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3249Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3249Slc
	var yyhl3249 bool = l >= 0
	for yyj3249 := 0; ; yyj3249++ {
		if yyhl3249 {
			if yyj3249 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3249Slc = r.DecodeBytes(yys3249Slc, true, true)
		yys3249 := string(yys3249Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3249 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3252 := &x.ListMeta
				yym3253 := z.DecBinary()
				_ = yym3253
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3252) {
				} else {
					z.DecFallback(yyv3252, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3254 := &x.Items
				yym3255 := z.DecBinary()
				_ = yym3255
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv3254), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3249)
		} // end switch yys3249
	} // end for yyj3249
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3256 int
	var yyb3256 bool
	var yyhl3256 bool = l >= 0
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3259 := &x.ListMeta
		yym3260 := z.DecBinary()
		_ = yym3260
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3259) {
		} else {
			z.DecFallback(yyv3259, false)
		}
	}
	yyj3256++
	if yyhl3256 {
		yyb3256 = yyj3256 > l
	} else {
		yyb3256 = r.CheckBreak()
	}
	if yyb3256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3261 := &x.Items
		yym3262 := z.DecBinary()
		_ = yym3262
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv3261), d)
		}
	}
	for {
		yyj3256++
		if yyhl3256 {
			yyb3256 = yyj3256 > l
		} else {
			yyb3256 = r.CheckBreak()
		}
		if yyb3256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3263 := z.EncBinary()
	_ = yym3263
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3264 := z.DecBinary()
	_ = yym3264
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3265 := z.EncBinary()
	_ = yym3265
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3266 := z.DecBinary()
	_ = yym3266
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3267 := z.EncBinary()
		_ = yym3267
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3268 := !z.EncBinary()
			yy2arr3268 := z.EncBasicHandle().StructToArray
			var yyq3268 [4]bool
			_, _, _ = yysep3268, yyq3268, yy2arr3268
			const yyr3268 bool = false
			yyq3268[2] = x.Message != ""
			yyq3268[3] = x.Error != ""
			var yynn3268 int
			if yyr3268 || yy2arr3268 {
				r.EncodeArrayStart(4)
			} else {
				yynn3268 = 2
				for _, b := range yyq3268 {
					if b {
						yynn3268++
					}
				}
				r.EncodeMapStart(yynn3268)
				yynn3268 = 0
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3268[2] {
					yym3272 := z.EncBinary()
					_ = yym3272
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3268[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3268[3] {
					yym3275 := z.EncBinary()
					_ = yym3275
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3268[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr3268 || yy2arr3268 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3277 := z.DecBinary()
	_ = yym3277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3278 := r.ContainerType()
		if yyct3278 == codecSelferValueTypeMap1234 {
			yyl3278 := r.ReadMapStart()
			if yyl3278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3278, d)
			}
		} else if yyct3278 == codecSelferValueTypeArray1234 {
			yyl3278 := r.ReadArrayStart()
			if yyl3278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3279Slc
	var yyhl3279 bool = l >= 0
	for yyj3279 := 0; ; yyj3279++ {
		if yyhl3279 {
			if yyj3279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3279Slc = r.DecodeBytes(yys3279Slc, true, true)
		yys3279 := string(yys3279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3279 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3279)
		} // end switch yys3279
	} // end for yyj3279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3284 int
	var yyb3284 bool
	var yyhl3284 bool = l >= 0
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3284++
	if yyhl3284 {
		yyb3284 = yyj3284 > l
	} else {
		yyb3284 = r.CheckBreak()
	}
	if yyb3284 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj3284++
		if yyhl3284 {
			yyb3284 = yyj3284 > l
		} else {
			yyb3284 = r.CheckBreak()
		}
		if yyb3284 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3284-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3289 := z.EncBinary()
		_ = yym3289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3290 := !z.EncBinary()
			yy2arr3290 := z.EncBasicHandle().StructToArray
			var yyq3290 [4]bool
			_, _, _ = yysep3290, yyq3290, yy2arr3290
			const yyr3290 bool = false
			yyq3290[0] = x.Kind != ""
			yyq3290[1] = x.APIVersion != ""
			yyq3290[2] = true
			yyq3290[3] = len(x.Conditions) != 0
			var yynn3290 int
			if yyr3290 || yy2arr3290 {
				r.EncodeArrayStart(4)
			} else {
				yynn3290 = 0
				for _, b := range yyq3290 {
					if b {
						yynn3290++
					}
				}
				r.EncodeMapStart(yynn3290)
				yynn3290 = 0
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3290[0] {
					yym3292 := z.EncBinary()
					_ = yym3292
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3290[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3293 := z.EncBinary()
					_ = yym3293
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3290[1] {
					yym3295 := z.EncBinary()
					_ = yym3295
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3296 := z.EncBinary()
					_ = yym3296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3290[2] {
					yy3298 := &x.ObjectMeta
					yy3298.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3290[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3299 := &x.ObjectMeta
					yy3299.CodecEncodeSelf(e)
				}
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3290[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3301 := z.EncBinary()
						_ = yym3301
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3290[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym3302 := z.EncBinary()
						_ = yym3302
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr3290 || yy2arr3290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3303 := z.DecBinary()
	_ = yym3303
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3304 := r.ContainerType()
		if yyct3304 == codecSelferValueTypeMap1234 {
			yyl3304 := r.ReadMapStart()
			if yyl3304 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3304, d)
			}
		} else if yyct3304 == codecSelferValueTypeArray1234 {
			yyl3304 := r.ReadArrayStart()
			if yyl3304 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3304, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3305Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3305Slc
	var yyhl3305 bool = l >= 0
	for yyj3305 := 0; ; yyj3305++ {
		if yyhl3305 {
			if yyj3305 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3305Slc = r.DecodeBytes(yys3305Slc, true, true)
		yys3305 := string(yys3305Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3305 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3308 := &x.ObjectMeta
				yyv3308.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv3309 := &x.Conditions
				yym3310 := z.DecBinary()
				_ = yym3310
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv3309), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3305)
		} // end switch yys3305
	} // end for yyj3305
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3311 int
	var yyb3311 bool
	var yyhl3311 bool = l >= 0
	yyj3311++
	if yyhl3311 {
		yyb3311 = yyj3311 > l
	} else {
		yyb3311 = r.CheckBreak()
	}
	if yyb3311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3311++
	if yyhl3311 {
		yyb3311 = yyj3311 > l
	} else {
		yyb3311 = r.CheckBreak()
	}
	if yyb3311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3311++
	if yyhl3311 {
		yyb3311 = yyj3311 > l
	} else {
		yyb3311 = r.CheckBreak()
	}
	if yyb3311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3314 := &x.ObjectMeta
		yyv3314.CodecDecodeSelf(d)
	}
	yyj3311++
	if yyhl3311 {
		yyb3311 = yyj3311 > l
	} else {
		yyb3311 = r.CheckBreak()
	}
	if yyb3311 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv3315 := &x.Conditions
		yym3316 := z.DecBinary()
		_ = yym3316
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv3315), d)
		}
	}
	for {
		yyj3311++
		if yyhl3311 {
			yyb3311 = yyj3311 > l
		} else {
			yyb3311 = r.CheckBreak()
		}
		if yyb3311 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3311-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3317 := z.EncBinary()
		_ = yym3317
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3318 := !z.EncBinary()
			yy2arr3318 := z.EncBasicHandle().StructToArray
			var yyq3318 [4]bool
			_, _, _ = yysep3318, yyq3318, yy2arr3318
			const yyr3318 bool = false
			yyq3318[0] = x.Kind != ""
			yyq3318[1] = x.APIVersion != ""
			yyq3318[2] = true
			var yynn3318 int
			if yyr3318 || yy2arr3318 {
				r.EncodeArrayStart(4)
			} else {
				yynn3318 = 1
				for _, b := range yyq3318 {
					if b {
						yynn3318++
					}
				}
				r.EncodeMapStart(yynn3318)
				yynn3318 = 0
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3318[0] {
					yym3320 := z.EncBinary()
					_ = yym3320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3318[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3321 := z.EncBinary()
					_ = yym3321
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3318[1] {
					yym3323 := z.EncBinary()
					_ = yym3323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3318[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3324 := z.EncBinary()
					_ = yym3324
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3318[2] {
					yy3326 := &x.ListMeta
					yym3327 := z.EncBinary()
					_ = yym3327
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3326) {
					} else {
						z.EncFallback(yy3326)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3318[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3328 := &x.ListMeta
					yym3329 := z.EncBinary()
					_ = yym3329
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3328) {
					} else {
						z.EncFallback(yy3328)
					}
				}
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3331 := z.EncBinary()
					_ = yym3331
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3332 := z.EncBinary()
					_ = yym3332
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr3318 || yy2arr3318 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3333 := z.DecBinary()
	_ = yym3333
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3334 := r.ContainerType()
		if yyct3334 == codecSelferValueTypeMap1234 {
			yyl3334 := r.ReadMapStart()
			if yyl3334 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3334, d)
			}
		} else if yyct3334 == codecSelferValueTypeArray1234 {
			yyl3334 := r.ReadArrayStart()
			if yyl3334 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3334, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3335Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3335Slc
	var yyhl3335 bool = l >= 0
	for yyj3335 := 0; ; yyj3335++ {
		if yyhl3335 {
			if yyj3335 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3335Slc = r.DecodeBytes(yys3335Slc, true, true)
		yys3335 := string(yys3335Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3335 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3338 := &x.ListMeta
				yym3339 := z.DecBinary()
				_ = yym3339
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3338) {
				} else {
					z.DecFallback(yyv3338, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3340 := &x.Items
				yym3341 := z.DecBinary()
				_ = yym3341
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv3340), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3335)
		} // end switch yys3335
	} // end for yyj3335
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3342 int
	var yyb3342 bool
	var yyhl3342 bool = l >= 0
	yyj3342++
	if yyhl3342 {
		yyb3342 = yyj3342 > l
	} else {
		yyb3342 = r.CheckBreak()
	}
	if yyb3342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3342++
	if yyhl3342 {
		yyb3342 = yyj3342 > l
	} else {
		yyb3342 = r.CheckBreak()
	}
	if yyb3342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3342++
	if yyhl3342 {
		yyb3342 = yyj3342 > l
	} else {
		yyb3342 = r.CheckBreak()
	}
	if yyb3342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3345 := &x.ListMeta
		yym3346 := z.DecBinary()
		_ = yym3346
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3345) {
		} else {
			z.DecFallback(yyv3345, false)
		}
	}
	yyj3342++
	if yyhl3342 {
		yyb3342 = yyj3342 > l
	} else {
		yyb3342 = r.CheckBreak()
	}
	if yyb3342 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3347 := &x.Items
		yym3348 := z.DecBinary()
		_ = yym3348
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv3347), d)
		}
	}
	for {
		yyj3342++
		if yyhl3342 {
			yyb3342 = yyj3342 > l
		} else {
			yyb3342 = r.CheckBreak()
		}
		if yyb3342 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3342-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3349 := z.EncBinary()
		_ = yym3349
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3350 := !z.EncBinary()
			yy2arr3350 := z.EncBasicHandle().StructToArray
			var yyq3350 [5]bool
			_, _, _ = yysep3350, yyq3350, yy2arr3350
			const yyr3350 bool = false
			yyq3350[0] = x.Capabilities != nil
			yyq3350[1] = x.Privileged != nil
			yyq3350[2] = x.SELinuxOptions != nil
			yyq3350[3] = x.RunAsUser != nil
			yyq3350[4] = x.RunAsNonRoot != nil
			var yynn3350 int
			if yyr3350 || yy2arr3350 {
				r.EncodeArrayStart(5)
			} else {
				yynn3350 = 0
				for _, b := range yyq3350 {
					if b {
						yynn3350++
					}
				}
				r.EncodeMapStart(yynn3350)
				yynn3350 = 0
			}
			if yyr3350 || yy2arr3350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3350[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3350[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3350 || yy2arr3350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3350[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3353 := *x.Privileged
						yym3354 := z.EncBinary()
						_ = yym3354
						if false {
						} else {
							r.EncodeBool(bool(yy3353))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3350[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy3355 := *x.Privileged
						yym3356 := z.EncBinary()
						_ = yym3356
						if false {
						} else {
							r.EncodeBool(bool(yy3355))
						}
					}
				}
			}
			if yyr3350 || yy2arr3350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3350[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3350[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3350 || yy2arr3350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3350[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3359 := *x.RunAsUser
						yym3360 := z.EncBinary()
						_ = yym3360
						if false {
						} else {
							r.EncodeInt(int64(yy3359))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3350[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy3361 := *x.RunAsUser
						yym3362 := z.EncBinary()
						_ = yym3362
						if false {
						} else {
							r.EncodeInt(int64(yy3361))
						}
					}
				}
			}
			if yyr3350 || yy2arr3350 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3350[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3364 := *x.RunAsNonRoot
						yym3365 := z.EncBinary()
						_ = yym3365
						if false {
						} else {
							r.EncodeBool(bool(yy3364))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3350[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy3366 := *x.RunAsNonRoot
						yym3367 := z.EncBinary()
						_ = yym3367
						if false {
						} else {
							r.EncodeBool(bool(yy3366))
						}
					}
				}
			}
			if yyr3350 || yy2arr3350 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3368 := z.DecBinary()
	_ = yym3368
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3369 := r.ContainerType()
		if yyct3369 == codecSelferValueTypeMap1234 {
			yyl3369 := r.ReadMapStart()
			if yyl3369 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3369, d)
			}
		} else if yyct3369 == codecSelferValueTypeArray1234 {
			yyl3369 := r.ReadArrayStart()
			if yyl3369 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3369, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3370Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3370Slc
	var yyhl3370 bool = l >= 0
	for yyj3370 := 0; ; yyj3370++ {
		if yyhl3370 {
			if yyj3370 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3370Slc = r.DecodeBytes(yys3370Slc, true, true)
		yys3370 := string(yys3370Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3370 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym3373 := z.DecBinary()
				_ = yym3373
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym3376 := z.DecBinary()
				_ = yym3376
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym3378 := z.DecBinary()
				_ = yym3378
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3370)
		} // end switch yys3370
	} // end for yyj3370
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3379 int
	var yyb3379 bool
	var yyhl3379 bool = l >= 0
	yyj3379++
	if yyhl3379 {
		yyb3379 = yyj3379 > l
	} else {
		yyb3379 = r.CheckBreak()
	}
	if yyb3379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj3379++
	if yyhl3379 {
		yyb3379 = yyj3379 > l
	} else {
		yyb3379 = r.CheckBreak()
	}
	if yyb3379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym3382 := z.DecBinary()
		_ = yym3382
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj3379++
	if yyhl3379 {
		yyb3379 = yyj3379 > l
	} else {
		yyb3379 = r.CheckBreak()
	}
	if yyb3379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj3379++
	if yyhl3379 {
		yyb3379 = yyj3379 > l
	} else {
		yyb3379 = r.CheckBreak()
	}
	if yyb3379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym3385 := z.DecBinary()
		_ = yym3385
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj3379++
	if yyhl3379 {
		yyb3379 = yyj3379 > l
	} else {
		yyb3379 = r.CheckBreak()
	}
	if yyb3379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym3387 := z.DecBinary()
		_ = yym3387
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	for {
		yyj3379++
		if yyhl3379 {
			yyb3379 = yyj3379 > l
		} else {
			yyb3379 = r.CheckBreak()
		}
		if yyb3379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3388 := z.EncBinary()
		_ = yym3388
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3389 := !z.EncBinary()
			yy2arr3389 := z.EncBasicHandle().StructToArray
			var yyq3389 [4]bool
			_, _, _ = yysep3389, yyq3389, yy2arr3389
			const yyr3389 bool = false
			yyq3389[0] = x.User != ""
			yyq3389[1] = x.Role != ""
			yyq3389[2] = x.Type != ""
			yyq3389[3] = x.Level != ""
			var yynn3389 int
			if yyr3389 || yy2arr3389 {
				r.EncodeArrayStart(4)
			} else {
				yynn3389 = 0
				for _, b := range yyq3389 {
					if b {
						yynn3389++
					}
				}
				r.EncodeMapStart(yynn3389)
				yynn3389 = 0
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3389[0] {
					yym3391 := z.EncBinary()
					_ = yym3391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3389[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3392 := z.EncBinary()
					_ = yym3392
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3389[1] {
					yym3394 := z.EncBinary()
					_ = yym3394
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3389[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3395 := z.EncBinary()
					_ = yym3395
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3389[2] {
					yym3397 := z.EncBinary()
					_ = yym3397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3389[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3398 := z.EncBinary()
					_ = yym3398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3389[3] {
					yym3400 := z.EncBinary()
					_ = yym3400
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3389[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3401 := z.EncBinary()
					_ = yym3401
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr3389 || yy2arr3389 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3402 := z.DecBinary()
	_ = yym3402
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3403 := r.ContainerType()
		if yyct3403 == codecSelferValueTypeMap1234 {
			yyl3403 := r.ReadMapStart()
			if yyl3403 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3403, d)
			}
		} else if yyct3403 == codecSelferValueTypeArray1234 {
			yyl3403 := r.ReadArrayStart()
			if yyl3403 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3403, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3404Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3404Slc
	var yyhl3404 bool = l >= 0
	for yyj3404 := 0; ; yyj3404++ {
		if yyhl3404 {
			if yyj3404 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3404Slc = r.DecodeBytes(yys3404Slc, true, true)
		yys3404 := string(yys3404Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3404 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3404)
		} // end switch yys3404
	} // end for yyj3404
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3409 int
	var yyb3409 bool
	var yyhl3409 bool = l >= 0
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj3409++
	if yyhl3409 {
		yyb3409 = yyj3409 > l
	} else {
		yyb3409 = r.CheckBreak()
	}
	if yyb3409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj3409++
		if yyhl3409 {
			yyb3409 = yyj3409 > l
		} else {
			yyb3409 = r.CheckBreak()
		}
		if yyb3409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3414 := z.EncBinary()
		_ = yym3414
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3415 := !z.EncBinary()
			yy2arr3415 := z.EncBasicHandle().StructToArray
			var yyq3415 [5]bool
			_, _, _ = yysep3415, yyq3415, yy2arr3415
			const yyr3415 bool = false
			yyq3415[0] = x.Kind != ""
			yyq3415[1] = x.APIVersion != ""
			yyq3415[2] = true
			var yynn3415 int
			if yyr3415 || yy2arr3415 {
				r.EncodeArrayStart(5)
			} else {
				yynn3415 = 2
				for _, b := range yyq3415 {
					if b {
						yynn3415++
					}
				}
				r.EncodeMapStart(yynn3415)
				yynn3415 = 0
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3415[0] {
					yym3417 := z.EncBinary()
					_ = yym3417
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3415[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3415[1] {
					yym3420 := z.EncBinary()
					_ = yym3420
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3415[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3421 := z.EncBinary()
					_ = yym3421
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3415[2] {
					yy3423 := &x.ObjectMeta
					yy3423.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3415[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3424 := &x.ObjectMeta
					yy3424.CodecEncodeSelf(e)
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3426 := z.EncBinary()
				_ = yym3426
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3427 := z.EncBinary()
				_ = yym3427
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3429 := z.EncBinary()
					_ = yym3429
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr3415 || yy2arr3415 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3431 := z.DecBinary()
	_ = yym3431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3432 := r.ContainerType()
		if yyct3432 == codecSelferValueTypeMap1234 {
			yyl3432 := r.ReadMapStart()
			if yyl3432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3432, d)
			}
		} else if yyct3432 == codecSelferValueTypeArray1234 {
			yyl3432 := r.ReadArrayStart()
			if yyl3432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3433Slc
	var yyhl3433 bool = l >= 0
	for yyj3433 := 0; ; yyj3433++ {
		if yyhl3433 {
			if yyj3433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3433Slc = r.DecodeBytes(yys3433Slc, true, true)
		yys3433 := string(yys3433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3433 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3436 := &x.ObjectMeta
				yyv3436.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv3438 := &x.Data
				yym3439 := z.DecBinary()
				_ = yym3439
				if false {
				} else {
					*yyv3438 = r.DecodeBytes(*(*[]byte)(yyv3438), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3433)
		} // end switch yys3433
	} // end for yyj3433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3440 int
	var yyb3440 bool
	var yyhl3440 bool = l >= 0
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3443 := &x.ObjectMeta
		yyv3443.CodecDecodeSelf(d)
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj3440++
	if yyhl3440 {
		yyb3440 = yyj3440 > l
	} else {
		yyb3440 = r.CheckBreak()
	}
	if yyb3440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv3445 := &x.Data
		yym3446 := z.DecBinary()
		_ = yym3446
		if false {
		} else {
			*yyv3445 = r.DecodeBytes(*(*[]byte)(yyv3445), false, false)
		}
	}
	for {
		yyj3440++
		if yyhl3440 {
			yyb3440 = yyj3440 > l
		} else {
			yyb3440 = r.CheckBreak()
		}
		if yyb3440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3447 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3447.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3448 := *v
	yyh3448, yyl3448 := z.DecSliceHelperStart()
	var yyc3448 bool
	if yyl3448 == 0 {
		if yyv3448 == nil {
			yyv3448 = []PersistentVolumeAccessMode{}
			yyc3448 = true
		} else if len(yyv3448) != 0 {
			yyv3448 = yyv3448[:0]
			yyc3448 = true
		}
	} else if yyl3448 > 0 {
		var yyrr3448, yyrl3448 int
		var yyrt3448 bool
		if yyl3448 > cap(yyv3448) {

			yyrl3448, yyrt3448 = z.DecInferLen(yyl3448, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3448 {
				if yyrl3448 <= cap(yyv3448) {
					yyv3448 = yyv3448[:yyrl3448]
				} else {
					yyv3448 = make([]PersistentVolumeAccessMode, yyrl3448)
				}
			} else {
				yyv3448 = make([]PersistentVolumeAccessMode, yyrl3448)
			}
			yyc3448 = true
			yyrr3448 = len(yyv3448)
		} else if yyl3448 != len(yyv3448) {
			yyv3448 = yyv3448[:yyl3448]
			yyc3448 = true
		}
		yyj3448 := 0
		for ; yyj3448 < yyrr3448; yyj3448++ {
			yyh3448.ElemContainerState(yyj3448)
			if r.TryDecodeAsNil() {
				yyv3448[yyj3448] = ""
			} else {
				yyv3448[yyj3448] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt3448 {
			for ; yyj3448 < yyl3448; yyj3448++ {
				yyv3448 = append(yyv3448, "")
				yyh3448.ElemContainerState(yyj3448)
				if r.TryDecodeAsNil() {
					yyv3448[yyj3448] = ""
				} else {
					yyv3448[yyj3448] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj3448 := 0
		for ; !r.CheckBreak(); yyj3448++ {

			if yyj3448 >= len(yyv3448) {
				yyv3448 = append(yyv3448, "") // var yyz3448 PersistentVolumeAccessMode
				yyc3448 = true
			}
			yyh3448.ElemContainerState(yyj3448)
			if yyj3448 < len(yyv3448) {
				if r.TryDecodeAsNil() {
					yyv3448[yyj3448] = ""
				} else {
					yyv3448[yyj3448] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3448 < len(yyv3448) {
			yyv3448 = yyv3448[:yyj3448]
			yyc3448 = true
		} else if yyj3448 == 0 && yyv3448 == nil {
			yyv3448 = []PersistentVolumeAccessMode{}
			yyc3448 = true
		}
	}
	yyh3448.End()
	if yyc3448 {
		*v = yyv3448
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3452 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3453 := &yyv3452
		yy3453.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3454 := *v
	yyh3454, yyl3454 := z.DecSliceHelperStart()
	var yyc3454 bool
	if yyl3454 == 0 {
		if yyv3454 == nil {
			yyv3454 = []PersistentVolume{}
			yyc3454 = true
		} else if len(yyv3454) != 0 {
			yyv3454 = yyv3454[:0]
			yyc3454 = true
		}
	} else if yyl3454 > 0 {
		var yyrr3454, yyrl3454 int
		var yyrt3454 bool
		if yyl3454 > cap(yyv3454) {

			yyrg3454 := len(yyv3454) > 0
			yyv23454 := yyv3454
			yyrl3454, yyrt3454 = z.DecInferLen(yyl3454, z.DecBasicHandle().MaxInitLen, 384)
			if yyrt3454 {
				if yyrl3454 <= cap(yyv3454) {
					yyv3454 = yyv3454[:yyrl3454]
				} else {
					yyv3454 = make([]PersistentVolume, yyrl3454)
				}
			} else {
				yyv3454 = make([]PersistentVolume, yyrl3454)
			}
			yyc3454 = true
			yyrr3454 = len(yyv3454)
			if yyrg3454 {
				copy(yyv3454, yyv23454)
			}
		} else if yyl3454 != len(yyv3454) {
			yyv3454 = yyv3454[:yyl3454]
			yyc3454 = true
		}
		yyj3454 := 0
		for ; yyj3454 < yyrr3454; yyj3454++ {
			yyh3454.ElemContainerState(yyj3454)
			if r.TryDecodeAsNil() {
				yyv3454[yyj3454] = PersistentVolume{}
			} else {
				yyv3455 := &yyv3454[yyj3454]
				yyv3455.CodecDecodeSelf(d)
			}

		}
		if yyrt3454 {
			for ; yyj3454 < yyl3454; yyj3454++ {
				yyv3454 = append(yyv3454, PersistentVolume{})
				yyh3454.ElemContainerState(yyj3454)
				if r.TryDecodeAsNil() {
					yyv3454[yyj3454] = PersistentVolume{}
				} else {
					yyv3456 := &yyv3454[yyj3454]
					yyv3456.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3454 := 0
		for ; !r.CheckBreak(); yyj3454++ {

			if yyj3454 >= len(yyv3454) {
				yyv3454 = append(yyv3454, PersistentVolume{}) // var yyz3454 PersistentVolume
				yyc3454 = true
			}
			yyh3454.ElemContainerState(yyj3454)
			if yyj3454 < len(yyv3454) {
				if r.TryDecodeAsNil() {
					yyv3454[yyj3454] = PersistentVolume{}
				} else {
					yyv3457 := &yyv3454[yyj3454]
					yyv3457.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3454 < len(yyv3454) {
			yyv3454 = yyv3454[:yyj3454]
			yyc3454 = true
		} else if yyj3454 == 0 && yyv3454 == nil {
			yyv3454 = []PersistentVolume{}
			yyc3454 = true
		}
	}
	yyh3454.End()
	if yyc3454 {
		*v = yyv3454
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3458 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3459 := &yyv3458
		yy3459.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3460 := *v
	yyh3460, yyl3460 := z.DecSliceHelperStart()
	var yyc3460 bool
	if yyl3460 == 0 {
		if yyv3460 == nil {
			yyv3460 = []PersistentVolumeClaim{}
			yyc3460 = true
		} else if len(yyv3460) != 0 {
			yyv3460 = yyv3460[:0]
			yyc3460 = true
		}
	} else if yyl3460 > 0 {
		var yyrr3460, yyrl3460 int
		var yyrt3460 bool
		if yyl3460 > cap(yyv3460) {

			yyrg3460 := len(yyv3460) > 0
			yyv23460 := yyv3460
			yyrl3460, yyrt3460 = z.DecInferLen(yyl3460, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt3460 {
				if yyrl3460 <= cap(yyv3460) {
					yyv3460 = yyv3460[:yyrl3460]
				} else {
					yyv3460 = make([]PersistentVolumeClaim, yyrl3460)
				}
			} else {
				yyv3460 = make([]PersistentVolumeClaim, yyrl3460)
			}
			yyc3460 = true
			yyrr3460 = len(yyv3460)
			if yyrg3460 {
				copy(yyv3460, yyv23460)
			}
		} else if yyl3460 != len(yyv3460) {
			yyv3460 = yyv3460[:yyl3460]
			yyc3460 = true
		}
		yyj3460 := 0
		for ; yyj3460 < yyrr3460; yyj3460++ {
			yyh3460.ElemContainerState(yyj3460)
			if r.TryDecodeAsNil() {
				yyv3460[yyj3460] = PersistentVolumeClaim{}
			} else {
				yyv3461 := &yyv3460[yyj3460]
				yyv3461.CodecDecodeSelf(d)
			}

		}
		if yyrt3460 {
			for ; yyj3460 < yyl3460; yyj3460++ {
				yyv3460 = append(yyv3460, PersistentVolumeClaim{})
				yyh3460.ElemContainerState(yyj3460)
				if r.TryDecodeAsNil() {
					yyv3460[yyj3460] = PersistentVolumeClaim{}
				} else {
					yyv3462 := &yyv3460[yyj3460]
					yyv3462.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3460 := 0
		for ; !r.CheckBreak(); yyj3460++ {

			if yyj3460 >= len(yyv3460) {
				yyv3460 = append(yyv3460, PersistentVolumeClaim{}) // var yyz3460 PersistentVolumeClaim
				yyc3460 = true
			}
			yyh3460.ElemContainerState(yyj3460)
			if yyj3460 < len(yyv3460) {
				if r.TryDecodeAsNil() {
					yyv3460[yyj3460] = PersistentVolumeClaim{}
				} else {
					yyv3463 := &yyv3460[yyj3460]
					yyv3463.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3460 < len(yyv3460) {
			yyv3460 = yyv3460[:yyj3460]
			yyc3460 = true
		} else if yyj3460 == 0 && yyv3460 == nil {
			yyv3460 = []PersistentVolumeClaim{}
			yyc3460 = true
		}
	}
	yyh3460.End()
	if yyc3460 {
		*v = yyv3460
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3464 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3465 := &yyv3464
		yy3465.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3466 := *v
	yyh3466, yyl3466 := z.DecSliceHelperStart()
	var yyc3466 bool
	if yyl3466 == 0 {
		if yyv3466 == nil {
			yyv3466 = []DownwardAPIVolumeFile{}
			yyc3466 = true
		} else if len(yyv3466) != 0 {
			yyv3466 = yyv3466[:0]
			yyc3466 = true
		}
	} else if yyl3466 > 0 {
		var yyrr3466, yyrl3466 int
		var yyrt3466 bool
		if yyl3466 > cap(yyv3466) {

			yyrg3466 := len(yyv3466) > 0
			yyv23466 := yyv3466
			yyrl3466, yyrt3466 = z.DecInferLen(yyl3466, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt3466 {
				if yyrl3466 <= cap(yyv3466) {
					yyv3466 = yyv3466[:yyrl3466]
				} else {
					yyv3466 = make([]DownwardAPIVolumeFile, yyrl3466)
				}
			} else {
				yyv3466 = make([]DownwardAPIVolumeFile, yyrl3466)
			}
			yyc3466 = true
			yyrr3466 = len(yyv3466)
			if yyrg3466 {
				copy(yyv3466, yyv23466)
			}
		} else if yyl3466 != len(yyv3466) {
			yyv3466 = yyv3466[:yyl3466]
			yyc3466 = true
		}
		yyj3466 := 0
		for ; yyj3466 < yyrr3466; yyj3466++ {
			yyh3466.ElemContainerState(yyj3466)
			if r.TryDecodeAsNil() {
				yyv3466[yyj3466] = DownwardAPIVolumeFile{}
			} else {
				yyv3467 := &yyv3466[yyj3466]
				yyv3467.CodecDecodeSelf(d)
			}

		}
		if yyrt3466 {
			for ; yyj3466 < yyl3466; yyj3466++ {
				yyv3466 = append(yyv3466, DownwardAPIVolumeFile{})
				yyh3466.ElemContainerState(yyj3466)
				if r.TryDecodeAsNil() {
					yyv3466[yyj3466] = DownwardAPIVolumeFile{}
				} else {
					yyv3468 := &yyv3466[yyj3466]
					yyv3468.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3466 := 0
		for ; !r.CheckBreak(); yyj3466++ {

			if yyj3466 >= len(yyv3466) {
				yyv3466 = append(yyv3466, DownwardAPIVolumeFile{}) // var yyz3466 DownwardAPIVolumeFile
				yyc3466 = true
			}
			yyh3466.ElemContainerState(yyj3466)
			if yyj3466 < len(yyv3466) {
				if r.TryDecodeAsNil() {
					yyv3466[yyj3466] = DownwardAPIVolumeFile{}
				} else {
					yyv3469 := &yyv3466[yyj3466]
					yyv3469.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3466 < len(yyv3466) {
			yyv3466 = yyv3466[:yyj3466]
			yyc3466 = true
		} else if yyj3466 == 0 && yyv3466 == nil {
			yyv3466 = []DownwardAPIVolumeFile{}
			yyc3466 = true
		}
	}
	yyh3466.End()
	if yyc3466 {
		*v = yyv3466
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3470 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3470.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3471 := *v
	yyh3471, yyl3471 := z.DecSliceHelperStart()
	var yyc3471 bool
	if yyl3471 == 0 {
		if yyv3471 == nil {
			yyv3471 = []Capability{}
			yyc3471 = true
		} else if len(yyv3471) != 0 {
			yyv3471 = yyv3471[:0]
			yyc3471 = true
		}
	} else if yyl3471 > 0 {
		var yyrr3471, yyrl3471 int
		var yyrt3471 bool
		if yyl3471 > cap(yyv3471) {

			yyrl3471, yyrt3471 = z.DecInferLen(yyl3471, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3471 {
				if yyrl3471 <= cap(yyv3471) {
					yyv3471 = yyv3471[:yyrl3471]
				} else {
					yyv3471 = make([]Capability, yyrl3471)
				}
			} else {
				yyv3471 = make([]Capability, yyrl3471)
			}
			yyc3471 = true
			yyrr3471 = len(yyv3471)
		} else if yyl3471 != len(yyv3471) {
			yyv3471 = yyv3471[:yyl3471]
			yyc3471 = true
		}
		yyj3471 := 0
		for ; yyj3471 < yyrr3471; yyj3471++ {
			yyh3471.ElemContainerState(yyj3471)
			if r.TryDecodeAsNil() {
				yyv3471[yyj3471] = ""
			} else {
				yyv3471[yyj3471] = Capability(r.DecodeString())
			}

		}
		if yyrt3471 {
			for ; yyj3471 < yyl3471; yyj3471++ {
				yyv3471 = append(yyv3471, "")
				yyh3471.ElemContainerState(yyj3471)
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = ""
				} else {
					yyv3471[yyj3471] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj3471 := 0
		for ; !r.CheckBreak(); yyj3471++ {

			if yyj3471 >= len(yyv3471) {
				yyv3471 = append(yyv3471, "") // var yyz3471 Capability
				yyc3471 = true
			}
			yyh3471.ElemContainerState(yyj3471)
			if yyj3471 < len(yyv3471) {
				if r.TryDecodeAsNil() {
					yyv3471[yyj3471] = ""
				} else {
					yyv3471[yyj3471] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3471 < len(yyv3471) {
			yyv3471 = yyv3471[:yyj3471]
			yyc3471 = true
		} else if yyj3471 == 0 && yyv3471 == nil {
			yyv3471 = []Capability{}
			yyc3471 = true
		}
	}
	yyh3471.End()
	if yyc3471 {
		*v = yyv3471
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3475 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3476 := &yyv3475
		yy3476.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3477 := *v
	yyh3477, yyl3477 := z.DecSliceHelperStart()
	var yyc3477 bool
	if yyl3477 == 0 {
		if yyv3477 == nil {
			yyv3477 = []ContainerPort{}
			yyc3477 = true
		} else if len(yyv3477) != 0 {
			yyv3477 = yyv3477[:0]
			yyc3477 = true
		}
	} else if yyl3477 > 0 {
		var yyrr3477, yyrl3477 int
		var yyrt3477 bool
		if yyl3477 > cap(yyv3477) {

			yyrg3477 := len(yyv3477) > 0
			yyv23477 := yyv3477
			yyrl3477, yyrt3477 = z.DecInferLen(yyl3477, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3477 {
				if yyrl3477 <= cap(yyv3477) {
					yyv3477 = yyv3477[:yyrl3477]
				} else {
					yyv3477 = make([]ContainerPort, yyrl3477)
				}
			} else {
				yyv3477 = make([]ContainerPort, yyrl3477)
			}
			yyc3477 = true
			yyrr3477 = len(yyv3477)
			if yyrg3477 {
				copy(yyv3477, yyv23477)
			}
		} else if yyl3477 != len(yyv3477) {
			yyv3477 = yyv3477[:yyl3477]
			yyc3477 = true
		}
		yyj3477 := 0
		for ; yyj3477 < yyrr3477; yyj3477++ {
			yyh3477.ElemContainerState(yyj3477)
			if r.TryDecodeAsNil() {
				yyv3477[yyj3477] = ContainerPort{}
			} else {
				yyv3478 := &yyv3477[yyj3477]
				yyv3478.CodecDecodeSelf(d)
			}

		}
		if yyrt3477 {
			for ; yyj3477 < yyl3477; yyj3477++ {
				yyv3477 = append(yyv3477, ContainerPort{})
				yyh3477.ElemContainerState(yyj3477)
				if r.TryDecodeAsNil() {
					yyv3477[yyj3477] = ContainerPort{}
				} else {
					yyv3479 := &yyv3477[yyj3477]
					yyv3479.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3477 := 0
		for ; !r.CheckBreak(); yyj3477++ {

			if yyj3477 >= len(yyv3477) {
				yyv3477 = append(yyv3477, ContainerPort{}) // var yyz3477 ContainerPort
				yyc3477 = true
			}
			yyh3477.ElemContainerState(yyj3477)
			if yyj3477 < len(yyv3477) {
				if r.TryDecodeAsNil() {
					yyv3477[yyj3477] = ContainerPort{}
				} else {
					yyv3480 := &yyv3477[yyj3477]
					yyv3480.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3477 < len(yyv3477) {
			yyv3477 = yyv3477[:yyj3477]
			yyc3477 = true
		} else if yyj3477 == 0 && yyv3477 == nil {
			yyv3477 = []ContainerPort{}
			yyc3477 = true
		}
	}
	yyh3477.End()
	if yyc3477 {
		*v = yyv3477
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3481 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3482 := &yyv3481
		yy3482.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3483 := *v
	yyh3483, yyl3483 := z.DecSliceHelperStart()
	var yyc3483 bool
	if yyl3483 == 0 {
		if yyv3483 == nil {
			yyv3483 = []EnvVar{}
			yyc3483 = true
		} else if len(yyv3483) != 0 {
			yyv3483 = yyv3483[:0]
			yyc3483 = true
		}
	} else if yyl3483 > 0 {
		var yyrr3483, yyrl3483 int
		var yyrt3483 bool
		if yyl3483 > cap(yyv3483) {

			yyrg3483 := len(yyv3483) > 0
			yyv23483 := yyv3483
			yyrl3483, yyrt3483 = z.DecInferLen(yyl3483, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3483 {
				if yyrl3483 <= cap(yyv3483) {
					yyv3483 = yyv3483[:yyrl3483]
				} else {
					yyv3483 = make([]EnvVar, yyrl3483)
				}
			} else {
				yyv3483 = make([]EnvVar, yyrl3483)
			}
			yyc3483 = true
			yyrr3483 = len(yyv3483)
			if yyrg3483 {
				copy(yyv3483, yyv23483)
			}
		} else if yyl3483 != len(yyv3483) {
			yyv3483 = yyv3483[:yyl3483]
			yyc3483 = true
		}
		yyj3483 := 0
		for ; yyj3483 < yyrr3483; yyj3483++ {
			yyh3483.ElemContainerState(yyj3483)
			if r.TryDecodeAsNil() {
				yyv3483[yyj3483] = EnvVar{}
			} else {
				yyv3484 := &yyv3483[yyj3483]
				yyv3484.CodecDecodeSelf(d)
			}

		}
		if yyrt3483 {
			for ; yyj3483 < yyl3483; yyj3483++ {
				yyv3483 = append(yyv3483, EnvVar{})
				yyh3483.ElemContainerState(yyj3483)
				if r.TryDecodeAsNil() {
					yyv3483[yyj3483] = EnvVar{}
				} else {
					yyv3485 := &yyv3483[yyj3483]
					yyv3485.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3483 := 0
		for ; !r.CheckBreak(); yyj3483++ {

			if yyj3483 >= len(yyv3483) {
				yyv3483 = append(yyv3483, EnvVar{}) // var yyz3483 EnvVar
				yyc3483 = true
			}
			yyh3483.ElemContainerState(yyj3483)
			if yyj3483 < len(yyv3483) {
				if r.TryDecodeAsNil() {
					yyv3483[yyj3483] = EnvVar{}
				} else {
					yyv3486 := &yyv3483[yyj3483]
					yyv3486.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3483 < len(yyv3483) {
			yyv3483 = yyv3483[:yyj3483]
			yyc3483 = true
		} else if yyj3483 == 0 && yyv3483 == nil {
			yyv3483 = []EnvVar{}
			yyc3483 = true
		}
	}
	yyh3483.End()
	if yyc3483 {
		*v = yyv3483
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3487 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3488 := &yyv3487
		yy3488.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3489 := *v
	yyh3489, yyl3489 := z.DecSliceHelperStart()
	var yyc3489 bool
	if yyl3489 == 0 {
		if yyv3489 == nil {
			yyv3489 = []VolumeMount{}
			yyc3489 = true
		} else if len(yyv3489) != 0 {
			yyv3489 = yyv3489[:0]
			yyc3489 = true
		}
	} else if yyl3489 > 0 {
		var yyrr3489, yyrl3489 int
		var yyrt3489 bool
		if yyl3489 > cap(yyv3489) {

			yyrg3489 := len(yyv3489) > 0
			yyv23489 := yyv3489
			yyrl3489, yyrt3489 = z.DecInferLen(yyl3489, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3489 {
				if yyrl3489 <= cap(yyv3489) {
					yyv3489 = yyv3489[:yyrl3489]
				} else {
					yyv3489 = make([]VolumeMount, yyrl3489)
				}
			} else {
				yyv3489 = make([]VolumeMount, yyrl3489)
			}
			yyc3489 = true
			yyrr3489 = len(yyv3489)
			if yyrg3489 {
				copy(yyv3489, yyv23489)
			}
		} else if yyl3489 != len(yyv3489) {
			yyv3489 = yyv3489[:yyl3489]
			yyc3489 = true
		}
		yyj3489 := 0
		for ; yyj3489 < yyrr3489; yyj3489++ {
			yyh3489.ElemContainerState(yyj3489)
			if r.TryDecodeAsNil() {
				yyv3489[yyj3489] = VolumeMount{}
			} else {
				yyv3490 := &yyv3489[yyj3489]
				yyv3490.CodecDecodeSelf(d)
			}

		}
		if yyrt3489 {
			for ; yyj3489 < yyl3489; yyj3489++ {
				yyv3489 = append(yyv3489, VolumeMount{})
				yyh3489.ElemContainerState(yyj3489)
				if r.TryDecodeAsNil() {
					yyv3489[yyj3489] = VolumeMount{}
				} else {
					yyv3491 := &yyv3489[yyj3489]
					yyv3491.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3489 := 0
		for ; !r.CheckBreak(); yyj3489++ {

			if yyj3489 >= len(yyv3489) {
				yyv3489 = append(yyv3489, VolumeMount{}) // var yyz3489 VolumeMount
				yyc3489 = true
			}
			yyh3489.ElemContainerState(yyj3489)
			if yyj3489 < len(yyv3489) {
				if r.TryDecodeAsNil() {
					yyv3489[yyj3489] = VolumeMount{}
				} else {
					yyv3492 := &yyv3489[yyj3489]
					yyv3492.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3489 < len(yyv3489) {
			yyv3489 = yyv3489[:yyj3489]
			yyc3489 = true
		} else if yyj3489 == 0 && yyv3489 == nil {
			yyv3489 = []VolumeMount{}
			yyc3489 = true
		}
	}
	yyh3489.End()
	if yyc3489 {
		*v = yyv3489
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3493 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3494 := &yyv3493
		yy3494.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3495 := *v
	yyh3495, yyl3495 := z.DecSliceHelperStart()
	var yyc3495 bool
	if yyl3495 == 0 {
		if yyv3495 == nil {
			yyv3495 = []Pod{}
			yyc3495 = true
		} else if len(yyv3495) != 0 {
			yyv3495 = yyv3495[:0]
			yyc3495 = true
		}
	} else if yyl3495 > 0 {
		var yyrr3495, yyrl3495 int
		var yyrt3495 bool
		if yyl3495 > cap(yyv3495) {

			yyrg3495 := len(yyv3495) > 0
			yyv23495 := yyv3495
			yyrl3495, yyrt3495 = z.DecInferLen(yyl3495, z.DecBasicHandle().MaxInitLen, 496)
			if yyrt3495 {
				if yyrl3495 <= cap(yyv3495) {
					yyv3495 = yyv3495[:yyrl3495]
				} else {
					yyv3495 = make([]Pod, yyrl3495)
				}
			} else {
				yyv3495 = make([]Pod, yyrl3495)
			}
			yyc3495 = true
			yyrr3495 = len(yyv3495)
			if yyrg3495 {
				copy(yyv3495, yyv23495)
			}
		} else if yyl3495 != len(yyv3495) {
			yyv3495 = yyv3495[:yyl3495]
			yyc3495 = true
		}
		yyj3495 := 0
		for ; yyj3495 < yyrr3495; yyj3495++ {
			yyh3495.ElemContainerState(yyj3495)
			if r.TryDecodeAsNil() {
				yyv3495[yyj3495] = Pod{}
			} else {
				yyv3496 := &yyv3495[yyj3495]
				yyv3496.CodecDecodeSelf(d)
			}

		}
		if yyrt3495 {
			for ; yyj3495 < yyl3495; yyj3495++ {
				yyv3495 = append(yyv3495, Pod{})
				yyh3495.ElemContainerState(yyj3495)
				if r.TryDecodeAsNil() {
					yyv3495[yyj3495] = Pod{}
				} else {
					yyv3497 := &yyv3495[yyj3495]
					yyv3497.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3495 := 0
		for ; !r.CheckBreak(); yyj3495++ {

			if yyj3495 >= len(yyv3495) {
				yyv3495 = append(yyv3495, Pod{}) // var yyz3495 Pod
				yyc3495 = true
			}
			yyh3495.ElemContainerState(yyj3495)
			if yyj3495 < len(yyv3495) {
				if r.TryDecodeAsNil() {
					yyv3495[yyj3495] = Pod{}
				} else {
					yyv3498 := &yyv3495[yyj3495]
					yyv3498.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3495 < len(yyv3495) {
			yyv3495 = yyv3495[:yyj3495]
			yyc3495 = true
		} else if yyj3495 == 0 && yyv3495 == nil {
			yyv3495 = []Pod{}
			yyc3495 = true
		}
	}
	yyh3495.End()
	if yyc3495 {
		*v = yyv3495
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3499 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3500 := &yyv3499
		yy3500.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3501 := *v
	yyh3501, yyl3501 := z.DecSliceHelperStart()
	var yyc3501 bool
	if yyl3501 == 0 {
		if yyv3501 == nil {
			yyv3501 = []Volume{}
			yyc3501 = true
		} else if len(yyv3501) != 0 {
			yyv3501 = yyv3501[:0]
			yyc3501 = true
		}
	} else if yyl3501 > 0 {
		var yyrr3501, yyrl3501 int
		var yyrt3501 bool
		if yyl3501 > cap(yyv3501) {

			yyrg3501 := len(yyv3501) > 0
			yyv23501 := yyv3501
			yyrl3501, yyrt3501 = z.DecInferLen(yyl3501, z.DecBasicHandle().MaxInitLen, 144)
			if yyrt3501 {
				if yyrl3501 <= cap(yyv3501) {
					yyv3501 = yyv3501[:yyrl3501]
				} else {
					yyv3501 = make([]Volume, yyrl3501)
				}
			} else {
				yyv3501 = make([]Volume, yyrl3501)
			}
			yyc3501 = true
			yyrr3501 = len(yyv3501)
			if yyrg3501 {
				copy(yyv3501, yyv23501)
			}
		} else if yyl3501 != len(yyv3501) {
			yyv3501 = yyv3501[:yyl3501]
			yyc3501 = true
		}
		yyj3501 := 0
		for ; yyj3501 < yyrr3501; yyj3501++ {
			yyh3501.ElemContainerState(yyj3501)
			if r.TryDecodeAsNil() {
				yyv3501[yyj3501] = Volume{}
			} else {
				yyv3502 := &yyv3501[yyj3501]
				yyv3502.CodecDecodeSelf(d)
			}

		}
		if yyrt3501 {
			for ; yyj3501 < yyl3501; yyj3501++ {
				yyv3501 = append(yyv3501, Volume{})
				yyh3501.ElemContainerState(yyj3501)
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = Volume{}
				} else {
					yyv3503 := &yyv3501[yyj3501]
					yyv3503.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3501 := 0
		for ; !r.CheckBreak(); yyj3501++ {

			if yyj3501 >= len(yyv3501) {
				yyv3501 = append(yyv3501, Volume{}) // var yyz3501 Volume
				yyc3501 = true
			}
			yyh3501.ElemContainerState(yyj3501)
			if yyj3501 < len(yyv3501) {
				if r.TryDecodeAsNil() {
					yyv3501[yyj3501] = Volume{}
				} else {
					yyv3504 := &yyv3501[yyj3501]
					yyv3504.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3501 < len(yyv3501) {
			yyv3501 = yyv3501[:yyj3501]
			yyc3501 = true
		} else if yyj3501 == 0 && yyv3501 == nil {
			yyv3501 = []Volume{}
			yyc3501 = true
		}
	}
	yyh3501.End()
	if yyc3501 {
		*v = yyv3501
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3505 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3506 := &yyv3505
		yy3506.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3507 := *v
	yyh3507, yyl3507 := z.DecSliceHelperStart()
	var yyc3507 bool
	if yyl3507 == 0 {
		if yyv3507 == nil {
			yyv3507 = []Container{}
			yyc3507 = true
		} else if len(yyv3507) != 0 {
			yyv3507 = yyv3507[:0]
			yyc3507 = true
		}
	} else if yyl3507 > 0 {
		var yyrr3507, yyrl3507 int
		var yyrt3507 bool
		if yyl3507 > cap(yyv3507) {

			yyrg3507 := len(yyv3507) > 0
			yyv23507 := yyv3507
			yyrl3507, yyrt3507 = z.DecInferLen(yyl3507, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt3507 {
				if yyrl3507 <= cap(yyv3507) {
					yyv3507 = yyv3507[:yyrl3507]
				} else {
					yyv3507 = make([]Container, yyrl3507)
				}
			} else {
				yyv3507 = make([]Container, yyrl3507)
			}
			yyc3507 = true
			yyrr3507 = len(yyv3507)
			if yyrg3507 {
				copy(yyv3507, yyv23507)
			}
		} else if yyl3507 != len(yyv3507) {
			yyv3507 = yyv3507[:yyl3507]
			yyc3507 = true
		}
		yyj3507 := 0
		for ; yyj3507 < yyrr3507; yyj3507++ {
			yyh3507.ElemContainerState(yyj3507)
			if r.TryDecodeAsNil() {
				yyv3507[yyj3507] = Container{}
			} else {
				yyv3508 := &yyv3507[yyj3507]
				yyv3508.CodecDecodeSelf(d)
			}

		}
		if yyrt3507 {
			for ; yyj3507 < yyl3507; yyj3507++ {
				yyv3507 = append(yyv3507, Container{})
				yyh3507.ElemContainerState(yyj3507)
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = Container{}
				} else {
					yyv3509 := &yyv3507[yyj3507]
					yyv3509.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3507 := 0
		for ; !r.CheckBreak(); yyj3507++ {

			if yyj3507 >= len(yyv3507) {
				yyv3507 = append(yyv3507, Container{}) // var yyz3507 Container
				yyc3507 = true
			}
			yyh3507.ElemContainerState(yyj3507)
			if yyj3507 < len(yyv3507) {
				if r.TryDecodeAsNil() {
					yyv3507[yyj3507] = Container{}
				} else {
					yyv3510 := &yyv3507[yyj3507]
					yyv3510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3507 < len(yyv3507) {
			yyv3507 = yyv3507[:yyj3507]
			yyc3507 = true
		} else if yyj3507 == 0 && yyv3507 == nil {
			yyv3507 = []Container{}
			yyc3507 = true
		}
	}
	yyh3507.End()
	if yyc3507 {
		*v = yyv3507
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3511 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3512 := &yyv3511
		yy3512.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3513 := *v
	yyh3513, yyl3513 := z.DecSliceHelperStart()
	var yyc3513 bool
	if yyl3513 == 0 {
		if yyv3513 == nil {
			yyv3513 = []LocalObjectReference{}
			yyc3513 = true
		} else if len(yyv3513) != 0 {
			yyv3513 = yyv3513[:0]
			yyc3513 = true
		}
	} else if yyl3513 > 0 {
		var yyrr3513, yyrl3513 int
		var yyrt3513 bool
		if yyl3513 > cap(yyv3513) {

			yyrg3513 := len(yyv3513) > 0
			yyv23513 := yyv3513
			yyrl3513, yyrt3513 = z.DecInferLen(yyl3513, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3513 {
				if yyrl3513 <= cap(yyv3513) {
					yyv3513 = yyv3513[:yyrl3513]
				} else {
					yyv3513 = make([]LocalObjectReference, yyrl3513)
				}
			} else {
				yyv3513 = make([]LocalObjectReference, yyrl3513)
			}
			yyc3513 = true
			yyrr3513 = len(yyv3513)
			if yyrg3513 {
				copy(yyv3513, yyv23513)
			}
		} else if yyl3513 != len(yyv3513) {
			yyv3513 = yyv3513[:yyl3513]
			yyc3513 = true
		}
		yyj3513 := 0
		for ; yyj3513 < yyrr3513; yyj3513++ {
			yyh3513.ElemContainerState(yyj3513)
			if r.TryDecodeAsNil() {
				yyv3513[yyj3513] = LocalObjectReference{}
			} else {
				yyv3514 := &yyv3513[yyj3513]
				yyv3514.CodecDecodeSelf(d)
			}

		}
		if yyrt3513 {
			for ; yyj3513 < yyl3513; yyj3513++ {
				yyv3513 = append(yyv3513, LocalObjectReference{})
				yyh3513.ElemContainerState(yyj3513)
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = LocalObjectReference{}
				} else {
					yyv3515 := &yyv3513[yyj3513]
					yyv3515.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3513 := 0
		for ; !r.CheckBreak(); yyj3513++ {

			if yyj3513 >= len(yyv3513) {
				yyv3513 = append(yyv3513, LocalObjectReference{}) // var yyz3513 LocalObjectReference
				yyc3513 = true
			}
			yyh3513.ElemContainerState(yyj3513)
			if yyj3513 < len(yyv3513) {
				if r.TryDecodeAsNil() {
					yyv3513[yyj3513] = LocalObjectReference{}
				} else {
					yyv3516 := &yyv3513[yyj3513]
					yyv3516.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3513 < len(yyv3513) {
			yyv3513 = yyv3513[:yyj3513]
			yyc3513 = true
		} else if yyj3513 == 0 && yyv3513 == nil {
			yyv3513 = []LocalObjectReference{}
			yyc3513 = true
		}
	}
	yyh3513.End()
	if yyc3513 {
		*v = yyv3513
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3517 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3518 := &yyv3517
		yy3518.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3519 := *v
	yyh3519, yyl3519 := z.DecSliceHelperStart()
	var yyc3519 bool
	if yyl3519 == 0 {
		if yyv3519 == nil {
			yyv3519 = []PodCondition{}
			yyc3519 = true
		} else if len(yyv3519) != 0 {
			yyv3519 = yyv3519[:0]
			yyc3519 = true
		}
	} else if yyl3519 > 0 {
		var yyrr3519, yyrl3519 int
		var yyrt3519 bool
		if yyl3519 > cap(yyv3519) {

			yyrg3519 := len(yyv3519) > 0
			yyv23519 := yyv3519
			yyrl3519, yyrt3519 = z.DecInferLen(yyl3519, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3519 {
				if yyrl3519 <= cap(yyv3519) {
					yyv3519 = yyv3519[:yyrl3519]
				} else {
					yyv3519 = make([]PodCondition, yyrl3519)
				}
			} else {
				yyv3519 = make([]PodCondition, yyrl3519)
			}
			yyc3519 = true
			yyrr3519 = len(yyv3519)
			if yyrg3519 {
				copy(yyv3519, yyv23519)
			}
		} else if yyl3519 != len(yyv3519) {
			yyv3519 = yyv3519[:yyl3519]
			yyc3519 = true
		}
		yyj3519 := 0
		for ; yyj3519 < yyrr3519; yyj3519++ {
			yyh3519.ElemContainerState(yyj3519)
			if r.TryDecodeAsNil() {
				yyv3519[yyj3519] = PodCondition{}
			} else {
				yyv3520 := &yyv3519[yyj3519]
				yyv3520.CodecDecodeSelf(d)
			}

		}
		if yyrt3519 {
			for ; yyj3519 < yyl3519; yyj3519++ {
				yyv3519 = append(yyv3519, PodCondition{})
				yyh3519.ElemContainerState(yyj3519)
				if r.TryDecodeAsNil() {
					yyv3519[yyj3519] = PodCondition{}
				} else {
					yyv3521 := &yyv3519[yyj3519]
					yyv3521.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3519 := 0
		for ; !r.CheckBreak(); yyj3519++ {

			if yyj3519 >= len(yyv3519) {
				yyv3519 = append(yyv3519, PodCondition{}) // var yyz3519 PodCondition
				yyc3519 = true
			}
			yyh3519.ElemContainerState(yyj3519)
			if yyj3519 < len(yyv3519) {
				if r.TryDecodeAsNil() {
					yyv3519[yyj3519] = PodCondition{}
				} else {
					yyv3522 := &yyv3519[yyj3519]
					yyv3522.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3519 < len(yyv3519) {
			yyv3519 = yyv3519[:yyj3519]
			yyc3519 = true
		} else if yyj3519 == 0 && yyv3519 == nil {
			yyv3519 = []PodCondition{}
			yyc3519 = true
		}
	}
	yyh3519.End()
	if yyc3519 {
		*v = yyv3519
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3523 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3524 := &yyv3523
		yy3524.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3525 := *v
	yyh3525, yyl3525 := z.DecSliceHelperStart()
	var yyc3525 bool
	if yyl3525 == 0 {
		if yyv3525 == nil {
			yyv3525 = []ContainerStatus{}
			yyc3525 = true
		} else if len(yyv3525) != 0 {
			yyv3525 = yyv3525[:0]
			yyc3525 = true
		}
	} else if yyl3525 > 0 {
		var yyrr3525, yyrl3525 int
		var yyrt3525 bool
		if yyl3525 > cap(yyv3525) {

			yyrg3525 := len(yyv3525) > 0
			yyv23525 := yyv3525
			yyrl3525, yyrt3525 = z.DecInferLen(yyl3525, z.DecBasicHandle().MaxInitLen, 128)
			if yyrt3525 {
				if yyrl3525 <= cap(yyv3525) {
					yyv3525 = yyv3525[:yyrl3525]
				} else {
					yyv3525 = make([]ContainerStatus, yyrl3525)
				}
			} else {
				yyv3525 = make([]ContainerStatus, yyrl3525)
			}
			yyc3525 = true
			yyrr3525 = len(yyv3525)
			if yyrg3525 {
				copy(yyv3525, yyv23525)
			}
		} else if yyl3525 != len(yyv3525) {
			yyv3525 = yyv3525[:yyl3525]
			yyc3525 = true
		}
		yyj3525 := 0
		for ; yyj3525 < yyrr3525; yyj3525++ {
			yyh3525.ElemContainerState(yyj3525)
			if r.TryDecodeAsNil() {
				yyv3525[yyj3525] = ContainerStatus{}
			} else {
				yyv3526 := &yyv3525[yyj3525]
				yyv3526.CodecDecodeSelf(d)
			}

		}
		if yyrt3525 {
			for ; yyj3525 < yyl3525; yyj3525++ {
				yyv3525 = append(yyv3525, ContainerStatus{})
				yyh3525.ElemContainerState(yyj3525)
				if r.TryDecodeAsNil() {
					yyv3525[yyj3525] = ContainerStatus{}
				} else {
					yyv3527 := &yyv3525[yyj3525]
					yyv3527.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3525 := 0
		for ; !r.CheckBreak(); yyj3525++ {

			if yyj3525 >= len(yyv3525) {
				yyv3525 = append(yyv3525, ContainerStatus{}) // var yyz3525 ContainerStatus
				yyc3525 = true
			}
			yyh3525.ElemContainerState(yyj3525)
			if yyj3525 < len(yyv3525) {
				if r.TryDecodeAsNil() {
					yyv3525[yyj3525] = ContainerStatus{}
				} else {
					yyv3528 := &yyv3525[yyj3525]
					yyv3528.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3525 < len(yyv3525) {
			yyv3525 = yyv3525[:yyj3525]
			yyc3525 = true
		} else if yyj3525 == 0 && yyv3525 == nil {
			yyv3525 = []ContainerStatus{}
			yyc3525 = true
		}
	}
	yyh3525.End()
	if yyc3525 {
		*v = yyv3525
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3529 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3530 := &yyv3529
		yy3530.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3531 := *v
	yyh3531, yyl3531 := z.DecSliceHelperStart()
	var yyc3531 bool
	if yyl3531 == 0 {
		if yyv3531 == nil {
			yyv3531 = []PodTemplate{}
			yyc3531 = true
		} else if len(yyv3531) != 0 {
			yyv3531 = yyv3531[:0]
			yyc3531 = true
		}
	} else if yyl3531 > 0 {
		var yyrr3531, yyrl3531 int
		var yyrt3531 bool
		if yyl3531 > cap(yyv3531) {

			yyrg3531 := len(yyv3531) > 0
			yyv23531 := yyv3531
			yyrl3531, yyrt3531 = z.DecInferLen(yyl3531, z.DecBasicHandle().MaxInitLen, 520)
			if yyrt3531 {
				if yyrl3531 <= cap(yyv3531) {
					yyv3531 = yyv3531[:yyrl3531]
				} else {
					yyv3531 = make([]PodTemplate, yyrl3531)
				}
			} else {
				yyv3531 = make([]PodTemplate, yyrl3531)
			}
			yyc3531 = true
			yyrr3531 = len(yyv3531)
			if yyrg3531 {
				copy(yyv3531, yyv23531)
			}
		} else if yyl3531 != len(yyv3531) {
			yyv3531 = yyv3531[:yyl3531]
			yyc3531 = true
		}
		yyj3531 := 0
		for ; yyj3531 < yyrr3531; yyj3531++ {
			yyh3531.ElemContainerState(yyj3531)
			if r.TryDecodeAsNil() {
				yyv3531[yyj3531] = PodTemplate{}
			} else {
				yyv3532 := &yyv3531[yyj3531]
				yyv3532.CodecDecodeSelf(d)
			}

		}
		if yyrt3531 {
			for ; yyj3531 < yyl3531; yyj3531++ {
				yyv3531 = append(yyv3531, PodTemplate{})
				yyh3531.ElemContainerState(yyj3531)
				if r.TryDecodeAsNil() {
					yyv3531[yyj3531] = PodTemplate{}
				} else {
					yyv3533 := &yyv3531[yyj3531]
					yyv3533.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3531 := 0
		for ; !r.CheckBreak(); yyj3531++ {

			if yyj3531 >= len(yyv3531) {
				yyv3531 = append(yyv3531, PodTemplate{}) // var yyz3531 PodTemplate
				yyc3531 = true
			}
			yyh3531.ElemContainerState(yyj3531)
			if yyj3531 < len(yyv3531) {
				if r.TryDecodeAsNil() {
					yyv3531[yyj3531] = PodTemplate{}
				} else {
					yyv3534 := &yyv3531[yyj3531]
					yyv3534.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3531 < len(yyv3531) {
			yyv3531 = yyv3531[:yyj3531]
			yyc3531 = true
		} else if yyj3531 == 0 && yyv3531 == nil {
			yyv3531 = []PodTemplate{}
			yyc3531 = true
		}
	}
	yyh3531.End()
	if yyc3531 {
		*v = yyv3531
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3535 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3536 := &yyv3535
		yy3536.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3537 := *v
	yyh3537, yyl3537 := z.DecSliceHelperStart()
	var yyc3537 bool
	if yyl3537 == 0 {
		if yyv3537 == nil {
			yyv3537 = []ReplicationController{}
			yyc3537 = true
		} else if len(yyv3537) != 0 {
			yyv3537 = yyv3537[:0]
			yyc3537 = true
		}
	} else if yyl3537 > 0 {
		var yyrr3537, yyrl3537 int
		var yyrt3537 bool
		if yyl3537 > cap(yyv3537) {

			yyrg3537 := len(yyv3537) > 0
			yyv23537 := yyv3537
			yyrl3537, yyrt3537 = z.DecInferLen(yyl3537, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3537 {
				if yyrl3537 <= cap(yyv3537) {
					yyv3537 = yyv3537[:yyrl3537]
				} else {
					yyv3537 = make([]ReplicationController, yyrl3537)
				}
			} else {
				yyv3537 = make([]ReplicationController, yyrl3537)
			}
			yyc3537 = true
			yyrr3537 = len(yyv3537)
			if yyrg3537 {
				copy(yyv3537, yyv23537)
			}
		} else if yyl3537 != len(yyv3537) {
			yyv3537 = yyv3537[:yyl3537]
			yyc3537 = true
		}
		yyj3537 := 0
		for ; yyj3537 < yyrr3537; yyj3537++ {
			yyh3537.ElemContainerState(yyj3537)
			if r.TryDecodeAsNil() {
				yyv3537[yyj3537] = ReplicationController{}
			} else {
				yyv3538 := &yyv3537[yyj3537]
				yyv3538.CodecDecodeSelf(d)
			}

		}
		if yyrt3537 {
			for ; yyj3537 < yyl3537; yyj3537++ {
				yyv3537 = append(yyv3537, ReplicationController{})
				yyh3537.ElemContainerState(yyj3537)
				if r.TryDecodeAsNil() {
					yyv3537[yyj3537] = ReplicationController{}
				} else {
					yyv3539 := &yyv3537[yyj3537]
					yyv3539.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3537 := 0
		for ; !r.CheckBreak(); yyj3537++ {

			if yyj3537 >= len(yyv3537) {
				yyv3537 = append(yyv3537, ReplicationController{}) // var yyz3537 ReplicationController
				yyc3537 = true
			}
			yyh3537.ElemContainerState(yyj3537)
			if yyj3537 < len(yyv3537) {
				if r.TryDecodeAsNil() {
					yyv3537[yyj3537] = ReplicationController{}
				} else {
					yyv3540 := &yyv3537[yyj3537]
					yyv3540.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3537 < len(yyv3537) {
			yyv3537 = yyv3537[:yyj3537]
			yyc3537 = true
		} else if yyj3537 == 0 && yyv3537 == nil {
			yyv3537 = []ReplicationController{}
			yyc3537 = true
		}
	}
	yyh3537.End()
	if yyc3537 {
		*v = yyv3537
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3541 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3542 := &yyv3541
		yy3542.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3543 := *v
	yyh3543, yyl3543 := z.DecSliceHelperStart()
	var yyc3543 bool
	if yyl3543 == 0 {
		if yyv3543 == nil {
			yyv3543 = []Service{}
			yyc3543 = true
		} else if len(yyv3543) != 0 {
			yyv3543 = yyv3543[:0]
			yyc3543 = true
		}
	} else if yyl3543 > 0 {
		var yyrr3543, yyrl3543 int
		var yyrt3543 bool
		if yyl3543 > cap(yyv3543) {

			yyrg3543 := len(yyv3543) > 0
			yyv23543 := yyv3543
			yyrl3543, yyrt3543 = z.DecInferLen(yyl3543, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt3543 {
				if yyrl3543 <= cap(yyv3543) {
					yyv3543 = yyv3543[:yyrl3543]
				} else {
					yyv3543 = make([]Service, yyrl3543)
				}
			} else {
				yyv3543 = make([]Service, yyrl3543)
			}
			yyc3543 = true
			yyrr3543 = len(yyv3543)
			if yyrg3543 {
				copy(yyv3543, yyv23543)
			}
		} else if yyl3543 != len(yyv3543) {
			yyv3543 = yyv3543[:yyl3543]
			yyc3543 = true
		}
		yyj3543 := 0
		for ; yyj3543 < yyrr3543; yyj3543++ {
			yyh3543.ElemContainerState(yyj3543)
			if r.TryDecodeAsNil() {
				yyv3543[yyj3543] = Service{}
			} else {
				yyv3544 := &yyv3543[yyj3543]
				yyv3544.CodecDecodeSelf(d)
			}

		}
		if yyrt3543 {
			for ; yyj3543 < yyl3543; yyj3543++ {
				yyv3543 = append(yyv3543, Service{})
				yyh3543.ElemContainerState(yyj3543)
				if r.TryDecodeAsNil() {
					yyv3543[yyj3543] = Service{}
				} else {
					yyv3545 := &yyv3543[yyj3543]
					yyv3545.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3543 := 0
		for ; !r.CheckBreak(); yyj3543++ {

			if yyj3543 >= len(yyv3543) {
				yyv3543 = append(yyv3543, Service{}) // var yyz3543 Service
				yyc3543 = true
			}
			yyh3543.ElemContainerState(yyj3543)
			if yyj3543 < len(yyv3543) {
				if r.TryDecodeAsNil() {
					yyv3543[yyj3543] = Service{}
				} else {
					yyv3546 := &yyv3543[yyj3543]
					yyv3546.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3543 < len(yyv3543) {
			yyv3543 = yyv3543[:yyj3543]
			yyc3543 = true
		} else if yyj3543 == 0 && yyv3543 == nil {
			yyv3543 = []Service{}
			yyc3543 = true
		}
	}
	yyh3543.End()
	if yyc3543 {
		*v = yyv3543
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3547 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3548 := &yyv3547
		yy3548.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3549 := *v
	yyh3549, yyl3549 := z.DecSliceHelperStart()
	var yyc3549 bool
	if yyl3549 == 0 {
		if yyv3549 == nil {
			yyv3549 = []LoadBalancerIngress{}
			yyc3549 = true
		} else if len(yyv3549) != 0 {
			yyv3549 = yyv3549[:0]
			yyc3549 = true
		}
	} else if yyl3549 > 0 {
		var yyrr3549, yyrl3549 int
		var yyrt3549 bool
		if yyl3549 > cap(yyv3549) {

			yyrg3549 := len(yyv3549) > 0
			yyv23549 := yyv3549
			yyrl3549, yyrt3549 = z.DecInferLen(yyl3549, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3549 {
				if yyrl3549 <= cap(yyv3549) {
					yyv3549 = yyv3549[:yyrl3549]
				} else {
					yyv3549 = make([]LoadBalancerIngress, yyrl3549)
				}
			} else {
				yyv3549 = make([]LoadBalancerIngress, yyrl3549)
			}
			yyc3549 = true
			yyrr3549 = len(yyv3549)
			if yyrg3549 {
				copy(yyv3549, yyv23549)
			}
		} else if yyl3549 != len(yyv3549) {
			yyv3549 = yyv3549[:yyl3549]
			yyc3549 = true
		}
		yyj3549 := 0
		for ; yyj3549 < yyrr3549; yyj3549++ {
			yyh3549.ElemContainerState(yyj3549)
			if r.TryDecodeAsNil() {
				yyv3549[yyj3549] = LoadBalancerIngress{}
			} else {
				yyv3550 := &yyv3549[yyj3549]
				yyv3550.CodecDecodeSelf(d)
			}

		}
		if yyrt3549 {
			for ; yyj3549 < yyl3549; yyj3549++ {
				yyv3549 = append(yyv3549, LoadBalancerIngress{})
				yyh3549.ElemContainerState(yyj3549)
				if r.TryDecodeAsNil() {
					yyv3549[yyj3549] = LoadBalancerIngress{}
				} else {
					yyv3551 := &yyv3549[yyj3549]
					yyv3551.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3549 := 0
		for ; !r.CheckBreak(); yyj3549++ {

			if yyj3549 >= len(yyv3549) {
				yyv3549 = append(yyv3549, LoadBalancerIngress{}) // var yyz3549 LoadBalancerIngress
				yyc3549 = true
			}
			yyh3549.ElemContainerState(yyj3549)
			if yyj3549 < len(yyv3549) {
				if r.TryDecodeAsNil() {
					yyv3549[yyj3549] = LoadBalancerIngress{}
				} else {
					yyv3552 := &yyv3549[yyj3549]
					yyv3552.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3549 < len(yyv3549) {
			yyv3549 = yyv3549[:yyj3549]
			yyc3549 = true
		} else if yyj3549 == 0 && yyv3549 == nil {
			yyv3549 = []LoadBalancerIngress{}
			yyc3549 = true
		}
	}
	yyh3549.End()
	if yyc3549 {
		*v = yyv3549
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3553 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3554 := &yyv3553
		yy3554.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3555 := *v
	yyh3555, yyl3555 := z.DecSliceHelperStart()
	var yyc3555 bool
	if yyl3555 == 0 {
		if yyv3555 == nil {
			yyv3555 = []ServicePort{}
			yyc3555 = true
		} else if len(yyv3555) != 0 {
			yyv3555 = yyv3555[:0]
			yyc3555 = true
		}
	} else if yyl3555 > 0 {
		var yyrr3555, yyrl3555 int
		var yyrt3555 bool
		if yyl3555 > cap(yyv3555) {

			yyrg3555 := len(yyv3555) > 0
			yyv23555 := yyv3555
			yyrl3555, yyrt3555 = z.DecInferLen(yyl3555, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt3555 {
				if yyrl3555 <= cap(yyv3555) {
					yyv3555 = yyv3555[:yyrl3555]
				} else {
					yyv3555 = make([]ServicePort, yyrl3555)
				}
			} else {
				yyv3555 = make([]ServicePort, yyrl3555)
			}
			yyc3555 = true
			yyrr3555 = len(yyv3555)
			if yyrg3555 {
				copy(yyv3555, yyv23555)
			}
		} else if yyl3555 != len(yyv3555) {
			yyv3555 = yyv3555[:yyl3555]
			yyc3555 = true
		}
		yyj3555 := 0
		for ; yyj3555 < yyrr3555; yyj3555++ {
			yyh3555.ElemContainerState(yyj3555)
			if r.TryDecodeAsNil() {
				yyv3555[yyj3555] = ServicePort{}
			} else {
				yyv3556 := &yyv3555[yyj3555]
				yyv3556.CodecDecodeSelf(d)
			}

		}
		if yyrt3555 {
			for ; yyj3555 < yyl3555; yyj3555++ {
				yyv3555 = append(yyv3555, ServicePort{})
				yyh3555.ElemContainerState(yyj3555)
				if r.TryDecodeAsNil() {
					yyv3555[yyj3555] = ServicePort{}
				} else {
					yyv3557 := &yyv3555[yyj3555]
					yyv3557.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3555 := 0
		for ; !r.CheckBreak(); yyj3555++ {

			if yyj3555 >= len(yyv3555) {
				yyv3555 = append(yyv3555, ServicePort{}) // var yyz3555 ServicePort
				yyc3555 = true
			}
			yyh3555.ElemContainerState(yyj3555)
			if yyj3555 < len(yyv3555) {
				if r.TryDecodeAsNil() {
					yyv3555[yyj3555] = ServicePort{}
				} else {
					yyv3558 := &yyv3555[yyj3555]
					yyv3558.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3555 < len(yyv3555) {
			yyv3555 = yyv3555[:yyj3555]
			yyc3555 = true
		} else if yyj3555 == 0 && yyv3555 == nil {
			yyv3555 = []ServicePort{}
			yyc3555 = true
		}
	}
	yyh3555.End()
	if yyc3555 {
		*v = yyv3555
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3559 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3560 := &yyv3559
		yy3560.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3561 := *v
	yyh3561, yyl3561 := z.DecSliceHelperStart()
	var yyc3561 bool
	if yyl3561 == 0 {
		if yyv3561 == nil {
			yyv3561 = []ObjectReference{}
			yyc3561 = true
		} else if len(yyv3561) != 0 {
			yyv3561 = yyv3561[:0]
			yyc3561 = true
		}
	} else if yyl3561 > 0 {
		var yyrr3561, yyrl3561 int
		var yyrt3561 bool
		if yyl3561 > cap(yyv3561) {

			yyrg3561 := len(yyv3561) > 0
			yyv23561 := yyv3561
			yyrl3561, yyrt3561 = z.DecInferLen(yyl3561, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3561 {
				if yyrl3561 <= cap(yyv3561) {
					yyv3561 = yyv3561[:yyrl3561]
				} else {
					yyv3561 = make([]ObjectReference, yyrl3561)
				}
			} else {
				yyv3561 = make([]ObjectReference, yyrl3561)
			}
			yyc3561 = true
			yyrr3561 = len(yyv3561)
			if yyrg3561 {
				copy(yyv3561, yyv23561)
			}
		} else if yyl3561 != len(yyv3561) {
			yyv3561 = yyv3561[:yyl3561]
			yyc3561 = true
		}
		yyj3561 := 0
		for ; yyj3561 < yyrr3561; yyj3561++ {
			yyh3561.ElemContainerState(yyj3561)
			if r.TryDecodeAsNil() {
				yyv3561[yyj3561] = ObjectReference{}
			} else {
				yyv3562 := &yyv3561[yyj3561]
				yyv3562.CodecDecodeSelf(d)
			}

		}
		if yyrt3561 {
			for ; yyj3561 < yyl3561; yyj3561++ {
				yyv3561 = append(yyv3561, ObjectReference{})
				yyh3561.ElemContainerState(yyj3561)
				if r.TryDecodeAsNil() {
					yyv3561[yyj3561] = ObjectReference{}
				} else {
					yyv3563 := &yyv3561[yyj3561]
					yyv3563.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3561 := 0
		for ; !r.CheckBreak(); yyj3561++ {

			if yyj3561 >= len(yyv3561) {
				yyv3561 = append(yyv3561, ObjectReference{}) // var yyz3561 ObjectReference
				yyc3561 = true
			}
			yyh3561.ElemContainerState(yyj3561)
			if yyj3561 < len(yyv3561) {
				if r.TryDecodeAsNil() {
					yyv3561[yyj3561] = ObjectReference{}
				} else {
					yyv3564 := &yyv3561[yyj3561]
					yyv3564.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3561 < len(yyv3561) {
			yyv3561 = yyv3561[:yyj3561]
			yyc3561 = true
		} else if yyj3561 == 0 && yyv3561 == nil {
			yyv3561 = []ObjectReference{}
			yyc3561 = true
		}
	}
	yyh3561.End()
	if yyc3561 {
		*v = yyv3561
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3565 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3566 := &yyv3565
		yy3566.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3567 := *v
	yyh3567, yyl3567 := z.DecSliceHelperStart()
	var yyc3567 bool
	if yyl3567 == 0 {
		if yyv3567 == nil {
			yyv3567 = []ServiceAccount{}
			yyc3567 = true
		} else if len(yyv3567) != 0 {
			yyv3567 = yyv3567[:0]
			yyc3567 = true
		}
	} else if yyl3567 > 0 {
		var yyrr3567, yyrl3567 int
		var yyrt3567 bool
		if yyl3567 > cap(yyv3567) {

			yyrg3567 := len(yyv3567) > 0
			yyv23567 := yyv3567
			yyrl3567, yyrt3567 = z.DecInferLen(yyl3567, z.DecBasicHandle().MaxInitLen, 240)
			if yyrt3567 {
				if yyrl3567 <= cap(yyv3567) {
					yyv3567 = yyv3567[:yyrl3567]
				} else {
					yyv3567 = make([]ServiceAccount, yyrl3567)
				}
			} else {
				yyv3567 = make([]ServiceAccount, yyrl3567)
			}
			yyc3567 = true
			yyrr3567 = len(yyv3567)
			if yyrg3567 {
				copy(yyv3567, yyv23567)
			}
		} else if yyl3567 != len(yyv3567) {
			yyv3567 = yyv3567[:yyl3567]
			yyc3567 = true
		}
		yyj3567 := 0
		for ; yyj3567 < yyrr3567; yyj3567++ {
			yyh3567.ElemContainerState(yyj3567)
			if r.TryDecodeAsNil() {
				yyv3567[yyj3567] = ServiceAccount{}
			} else {
				yyv3568 := &yyv3567[yyj3567]
				yyv3568.CodecDecodeSelf(d)
			}

		}
		if yyrt3567 {
			for ; yyj3567 < yyl3567; yyj3567++ {
				yyv3567 = append(yyv3567, ServiceAccount{})
				yyh3567.ElemContainerState(yyj3567)
				if r.TryDecodeAsNil() {
					yyv3567[yyj3567] = ServiceAccount{}
				} else {
					yyv3569 := &yyv3567[yyj3567]
					yyv3569.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3567 := 0
		for ; !r.CheckBreak(); yyj3567++ {

			if yyj3567 >= len(yyv3567) {
				yyv3567 = append(yyv3567, ServiceAccount{}) // var yyz3567 ServiceAccount
				yyc3567 = true
			}
			yyh3567.ElemContainerState(yyj3567)
			if yyj3567 < len(yyv3567) {
				if r.TryDecodeAsNil() {
					yyv3567[yyj3567] = ServiceAccount{}
				} else {
					yyv3570 := &yyv3567[yyj3567]
					yyv3570.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3567 < len(yyv3567) {
			yyv3567 = yyv3567[:yyj3567]
			yyc3567 = true
		} else if yyj3567 == 0 && yyv3567 == nil {
			yyv3567 = []ServiceAccount{}
			yyc3567 = true
		}
	}
	yyh3567.End()
	if yyc3567 {
		*v = yyv3567
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3571 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3572 := &yyv3571
		yy3572.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3573 := *v
	yyh3573, yyl3573 := z.DecSliceHelperStart()
	var yyc3573 bool
	if yyl3573 == 0 {
		if yyv3573 == nil {
			yyv3573 = []EndpointSubset{}
			yyc3573 = true
		} else if len(yyv3573) != 0 {
			yyv3573 = yyv3573[:0]
			yyc3573 = true
		}
	} else if yyl3573 > 0 {
		var yyrr3573, yyrl3573 int
		var yyrt3573 bool
		if yyl3573 > cap(yyv3573) {

			yyrg3573 := len(yyv3573) > 0
			yyv23573 := yyv3573
			yyrl3573, yyrt3573 = z.DecInferLen(yyl3573, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt3573 {
				if yyrl3573 <= cap(yyv3573) {
					yyv3573 = yyv3573[:yyrl3573]
				} else {
					yyv3573 = make([]EndpointSubset, yyrl3573)
				}
			} else {
				yyv3573 = make([]EndpointSubset, yyrl3573)
			}
			yyc3573 = true
			yyrr3573 = len(yyv3573)
			if yyrg3573 {
				copy(yyv3573, yyv23573)
			}
		} else if yyl3573 != len(yyv3573) {
			yyv3573 = yyv3573[:yyl3573]
			yyc3573 = true
		}
		yyj3573 := 0
		for ; yyj3573 < yyrr3573; yyj3573++ {
			yyh3573.ElemContainerState(yyj3573)
			if r.TryDecodeAsNil() {
				yyv3573[yyj3573] = EndpointSubset{}
			} else {
				yyv3574 := &yyv3573[yyj3573]
				yyv3574.CodecDecodeSelf(d)
			}

		}
		if yyrt3573 {
			for ; yyj3573 < yyl3573; yyj3573++ {
				yyv3573 = append(yyv3573, EndpointSubset{})
				yyh3573.ElemContainerState(yyj3573)
				if r.TryDecodeAsNil() {
					yyv3573[yyj3573] = EndpointSubset{}
				} else {
					yyv3575 := &yyv3573[yyj3573]
					yyv3575.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3573 := 0
		for ; !r.CheckBreak(); yyj3573++ {

			if yyj3573 >= len(yyv3573) {
				yyv3573 = append(yyv3573, EndpointSubset{}) // var yyz3573 EndpointSubset
				yyc3573 = true
			}
			yyh3573.ElemContainerState(yyj3573)
			if yyj3573 < len(yyv3573) {
				if r.TryDecodeAsNil() {
					yyv3573[yyj3573] = EndpointSubset{}
				} else {
					yyv3576 := &yyv3573[yyj3573]
					yyv3576.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3573 < len(yyv3573) {
			yyv3573 = yyv3573[:yyj3573]
			yyc3573 = true
		} else if yyj3573 == 0 && yyv3573 == nil {
			yyv3573 = []EndpointSubset{}
			yyc3573 = true
		}
	}
	yyh3573.End()
	if yyc3573 {
		*v = yyv3573
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3577 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3578 := &yyv3577
		yy3578.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3579 := *v
	yyh3579, yyl3579 := z.DecSliceHelperStart()
	var yyc3579 bool
	if yyl3579 == 0 {
		if yyv3579 == nil {
			yyv3579 = []EndpointAddress{}
			yyc3579 = true
		} else if len(yyv3579) != 0 {
			yyv3579 = yyv3579[:0]
			yyc3579 = true
		}
	} else if yyl3579 > 0 {
		var yyrr3579, yyrl3579 int
		var yyrt3579 bool
		if yyl3579 > cap(yyv3579) {

			yyrg3579 := len(yyv3579) > 0
			yyv23579 := yyv3579
			yyrl3579, yyrt3579 = z.DecInferLen(yyl3579, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt3579 {
				if yyrl3579 <= cap(yyv3579) {
					yyv3579 = yyv3579[:yyrl3579]
				} else {
					yyv3579 = make([]EndpointAddress, yyrl3579)
				}
			} else {
				yyv3579 = make([]EndpointAddress, yyrl3579)
			}
			yyc3579 = true
			yyrr3579 = len(yyv3579)
			if yyrg3579 {
				copy(yyv3579, yyv23579)
			}
		} else if yyl3579 != len(yyv3579) {
			yyv3579 = yyv3579[:yyl3579]
			yyc3579 = true
		}
		yyj3579 := 0
		for ; yyj3579 < yyrr3579; yyj3579++ {
			yyh3579.ElemContainerState(yyj3579)
			if r.TryDecodeAsNil() {
				yyv3579[yyj3579] = EndpointAddress{}
			} else {
				yyv3580 := &yyv3579[yyj3579]
				yyv3580.CodecDecodeSelf(d)
			}

		}
		if yyrt3579 {
			for ; yyj3579 < yyl3579; yyj3579++ {
				yyv3579 = append(yyv3579, EndpointAddress{})
				yyh3579.ElemContainerState(yyj3579)
				if r.TryDecodeAsNil() {
					yyv3579[yyj3579] = EndpointAddress{}
				} else {
					yyv3581 := &yyv3579[yyj3579]
					yyv3581.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3579 := 0
		for ; !r.CheckBreak(); yyj3579++ {

			if yyj3579 >= len(yyv3579) {
				yyv3579 = append(yyv3579, EndpointAddress{}) // var yyz3579 EndpointAddress
				yyc3579 = true
			}
			yyh3579.ElemContainerState(yyj3579)
			if yyj3579 < len(yyv3579) {
				if r.TryDecodeAsNil() {
					yyv3579[yyj3579] = EndpointAddress{}
				} else {
					yyv3582 := &yyv3579[yyj3579]
					yyv3582.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3579 < len(yyv3579) {
			yyv3579 = yyv3579[:yyj3579]
			yyc3579 = true
		} else if yyj3579 == 0 && yyv3579 == nil {
			yyv3579 = []EndpointAddress{}
			yyc3579 = true
		}
	}
	yyh3579.End()
	if yyc3579 {
		*v = yyv3579
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3583 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3584 := &yyv3583
		yy3584.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3585 := *v
	yyh3585, yyl3585 := z.DecSliceHelperStart()
	var yyc3585 bool
	if yyl3585 == 0 {
		if yyv3585 == nil {
			yyv3585 = []EndpointPort{}
			yyc3585 = true
		} else if len(yyv3585) != 0 {
			yyv3585 = yyv3585[:0]
			yyc3585 = true
		}
	} else if yyl3585 > 0 {
		var yyrr3585, yyrl3585 int
		var yyrt3585 bool
		if yyl3585 > cap(yyv3585) {

			yyrg3585 := len(yyv3585) > 0
			yyv23585 := yyv3585
			yyrl3585, yyrt3585 = z.DecInferLen(yyl3585, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt3585 {
				if yyrl3585 <= cap(yyv3585) {
					yyv3585 = yyv3585[:yyrl3585]
				} else {
					yyv3585 = make([]EndpointPort, yyrl3585)
				}
			} else {
				yyv3585 = make([]EndpointPort, yyrl3585)
			}
			yyc3585 = true
			yyrr3585 = len(yyv3585)
			if yyrg3585 {
				copy(yyv3585, yyv23585)
			}
		} else if yyl3585 != len(yyv3585) {
			yyv3585 = yyv3585[:yyl3585]
			yyc3585 = true
		}
		yyj3585 := 0
		for ; yyj3585 < yyrr3585; yyj3585++ {
			yyh3585.ElemContainerState(yyj3585)
			if r.TryDecodeAsNil() {
				yyv3585[yyj3585] = EndpointPort{}
			} else {
				yyv3586 := &yyv3585[yyj3585]
				yyv3586.CodecDecodeSelf(d)
			}

		}
		if yyrt3585 {
			for ; yyj3585 < yyl3585; yyj3585++ {
				yyv3585 = append(yyv3585, EndpointPort{})
				yyh3585.ElemContainerState(yyj3585)
				if r.TryDecodeAsNil() {
					yyv3585[yyj3585] = EndpointPort{}
				} else {
					yyv3587 := &yyv3585[yyj3585]
					yyv3587.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3585 := 0
		for ; !r.CheckBreak(); yyj3585++ {

			if yyj3585 >= len(yyv3585) {
				yyv3585 = append(yyv3585, EndpointPort{}) // var yyz3585 EndpointPort
				yyc3585 = true
			}
			yyh3585.ElemContainerState(yyj3585)
			if yyj3585 < len(yyv3585) {
				if r.TryDecodeAsNil() {
					yyv3585[yyj3585] = EndpointPort{}
				} else {
					yyv3588 := &yyv3585[yyj3585]
					yyv3588.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3585 < len(yyv3585) {
			yyv3585 = yyv3585[:yyj3585]
			yyc3585 = true
		} else if yyj3585 == 0 && yyv3585 == nil {
			yyv3585 = []EndpointPort{}
			yyc3585 = true
		}
	}
	yyh3585.End()
	if yyc3585 {
		*v = yyv3585
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3589 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3590 := &yyv3589
		yy3590.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3591 := *v
	yyh3591, yyl3591 := z.DecSliceHelperStart()
	var yyc3591 bool
	if yyl3591 == 0 {
		if yyv3591 == nil {
			yyv3591 = []Endpoints{}
			yyc3591 = true
		} else if len(yyv3591) != 0 {
			yyv3591 = yyv3591[:0]
			yyc3591 = true
		}
	} else if yyl3591 > 0 {
		var yyrr3591, yyrl3591 int
		var yyrt3591 bool
		if yyl3591 > cap(yyv3591) {

			yyrg3591 := len(yyv3591) > 0
			yyv23591 := yyv3591
			yyrl3591, yyrt3591 = z.DecInferLen(yyl3591, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3591 {
				if yyrl3591 <= cap(yyv3591) {
					yyv3591 = yyv3591[:yyrl3591]
				} else {
					yyv3591 = make([]Endpoints, yyrl3591)
				}
			} else {
				yyv3591 = make([]Endpoints, yyrl3591)
			}
			yyc3591 = true
			yyrr3591 = len(yyv3591)
			if yyrg3591 {
				copy(yyv3591, yyv23591)
			}
		} else if yyl3591 != len(yyv3591) {
			yyv3591 = yyv3591[:yyl3591]
			yyc3591 = true
		}
		yyj3591 := 0
		for ; yyj3591 < yyrr3591; yyj3591++ {
			yyh3591.ElemContainerState(yyj3591)
			if r.TryDecodeAsNil() {
				yyv3591[yyj3591] = Endpoints{}
			} else {
				yyv3592 := &yyv3591[yyj3591]
				yyv3592.CodecDecodeSelf(d)
			}

		}
		if yyrt3591 {
			for ; yyj3591 < yyl3591; yyj3591++ {
				yyv3591 = append(yyv3591, Endpoints{})
				yyh3591.ElemContainerState(yyj3591)
				if r.TryDecodeAsNil() {
					yyv3591[yyj3591] = Endpoints{}
				} else {
					yyv3593 := &yyv3591[yyj3591]
					yyv3593.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3591 := 0
		for ; !r.CheckBreak(); yyj3591++ {

			if yyj3591 >= len(yyv3591) {
				yyv3591 = append(yyv3591, Endpoints{}) // var yyz3591 Endpoints
				yyc3591 = true
			}
			yyh3591.ElemContainerState(yyj3591)
			if yyj3591 < len(yyv3591) {
				if r.TryDecodeAsNil() {
					yyv3591[yyj3591] = Endpoints{}
				} else {
					yyv3594 := &yyv3591[yyj3591]
					yyv3594.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3591 < len(yyv3591) {
			yyv3591 = yyv3591[:yyj3591]
			yyc3591 = true
		} else if yyj3591 == 0 && yyv3591 == nil {
			yyv3591 = []Endpoints{}
			yyc3591 = true
		}
	}
	yyh3591.End()
	if yyc3591 {
		*v = yyv3591
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3595 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3596 := &yyv3595
		yy3596.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3597 := *v
	yyh3597, yyl3597 := z.DecSliceHelperStart()
	var yyc3597 bool
	if yyl3597 == 0 {
		if yyv3597 == nil {
			yyv3597 = []NodeCondition{}
			yyc3597 = true
		} else if len(yyv3597) != 0 {
			yyv3597 = yyv3597[:0]
			yyc3597 = true
		}
	} else if yyl3597 > 0 {
		var yyrr3597, yyrl3597 int
		var yyrt3597 bool
		if yyl3597 > cap(yyv3597) {

			yyrg3597 := len(yyv3597) > 0
			yyv23597 := yyv3597
			yyrl3597, yyrt3597 = z.DecInferLen(yyl3597, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt3597 {
				if yyrl3597 <= cap(yyv3597) {
					yyv3597 = yyv3597[:yyrl3597]
				} else {
					yyv3597 = make([]NodeCondition, yyrl3597)
				}
			} else {
				yyv3597 = make([]NodeCondition, yyrl3597)
			}
			yyc3597 = true
			yyrr3597 = len(yyv3597)
			if yyrg3597 {
				copy(yyv3597, yyv23597)
			}
		} else if yyl3597 != len(yyv3597) {
			yyv3597 = yyv3597[:yyl3597]
			yyc3597 = true
		}
		yyj3597 := 0
		for ; yyj3597 < yyrr3597; yyj3597++ {
			yyh3597.ElemContainerState(yyj3597)
			if r.TryDecodeAsNil() {
				yyv3597[yyj3597] = NodeCondition{}
			} else {
				yyv3598 := &yyv3597[yyj3597]
				yyv3598.CodecDecodeSelf(d)
			}

		}
		if yyrt3597 {
			for ; yyj3597 < yyl3597; yyj3597++ {
				yyv3597 = append(yyv3597, NodeCondition{})
				yyh3597.ElemContainerState(yyj3597)
				if r.TryDecodeAsNil() {
					yyv3597[yyj3597] = NodeCondition{}
				} else {
					yyv3599 := &yyv3597[yyj3597]
					yyv3599.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3597 := 0
		for ; !r.CheckBreak(); yyj3597++ {

			if yyj3597 >= len(yyv3597) {
				yyv3597 = append(yyv3597, NodeCondition{}) // var yyz3597 NodeCondition
				yyc3597 = true
			}
			yyh3597.ElemContainerState(yyj3597)
			if yyj3597 < len(yyv3597) {
				if r.TryDecodeAsNil() {
					yyv3597[yyj3597] = NodeCondition{}
				} else {
					yyv3600 := &yyv3597[yyj3597]
					yyv3600.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3597 < len(yyv3597) {
			yyv3597 = yyv3597[:yyj3597]
			yyc3597 = true
		} else if yyj3597 == 0 && yyv3597 == nil {
			yyv3597 = []NodeCondition{}
			yyc3597 = true
		}
	}
	yyh3597.End()
	if yyc3597 {
		*v = yyv3597
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3601 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3602 := &yyv3601
		yy3602.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3603 := *v
	yyh3603, yyl3603 := z.DecSliceHelperStart()
	var yyc3603 bool
	if yyl3603 == 0 {
		if yyv3603 == nil {
			yyv3603 = []NodeAddress{}
			yyc3603 = true
		} else if len(yyv3603) != 0 {
			yyv3603 = yyv3603[:0]
			yyc3603 = true
		}
	} else if yyl3603 > 0 {
		var yyrr3603, yyrl3603 int
		var yyrt3603 bool
		if yyl3603 > cap(yyv3603) {

			yyrg3603 := len(yyv3603) > 0
			yyv23603 := yyv3603
			yyrl3603, yyrt3603 = z.DecInferLen(yyl3603, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt3603 {
				if yyrl3603 <= cap(yyv3603) {
					yyv3603 = yyv3603[:yyrl3603]
				} else {
					yyv3603 = make([]NodeAddress, yyrl3603)
				}
			} else {
				yyv3603 = make([]NodeAddress, yyrl3603)
			}
			yyc3603 = true
			yyrr3603 = len(yyv3603)
			if yyrg3603 {
				copy(yyv3603, yyv23603)
			}
		} else if yyl3603 != len(yyv3603) {
			yyv3603 = yyv3603[:yyl3603]
			yyc3603 = true
		}
		yyj3603 := 0
		for ; yyj3603 < yyrr3603; yyj3603++ {
			yyh3603.ElemContainerState(yyj3603)
			if r.TryDecodeAsNil() {
				yyv3603[yyj3603] = NodeAddress{}
			} else {
				yyv3604 := &yyv3603[yyj3603]
				yyv3604.CodecDecodeSelf(d)
			}

		}
		if yyrt3603 {
			for ; yyj3603 < yyl3603; yyj3603++ {
				yyv3603 = append(yyv3603, NodeAddress{})
				yyh3603.ElemContainerState(yyj3603)
				if r.TryDecodeAsNil() {
					yyv3603[yyj3603] = NodeAddress{}
				} else {
					yyv3605 := &yyv3603[yyj3603]
					yyv3605.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3603 := 0
		for ; !r.CheckBreak(); yyj3603++ {

			if yyj3603 >= len(yyv3603) {
				yyv3603 = append(yyv3603, NodeAddress{}) // var yyz3603 NodeAddress
				yyc3603 = true
			}
			yyh3603.ElemContainerState(yyj3603)
			if yyj3603 < len(yyv3603) {
				if r.TryDecodeAsNil() {
					yyv3603[yyj3603] = NodeAddress{}
				} else {
					yyv3606 := &yyv3603[yyj3603]
					yyv3606.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3603 < len(yyv3603) {
			yyv3603 = yyv3603[:yyj3603]
			yyc3603 = true
		} else if yyj3603 == 0 && yyv3603 == nil {
			yyv3603 = []NodeAddress{}
			yyc3603 = true
		}
	}
	yyh3603.End()
	if yyc3603 {
		*v = yyv3603
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3607, yyv3607 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk3607.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy3608 := &yyv3607
		yym3609 := z.EncBinary()
		_ = yym3609
		if false {
		} else if z.HasExtensions() && z.EncExt(yy3608) {
		} else if !yym3609 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy3608)
		} else {
			z.EncFallback(yy3608)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3610 := *v
	yyl3610 := r.ReadMapStart()
	yybh3610 := z.DecBasicHandle()
	if yyv3610 == nil {
		yyrl3610, _ := z.DecInferLen(yyl3610, yybh3610.MaxInitLen, 40)
		yyv3610 = make(map[ResourceName]pkg3_resource.Quantity, yyrl3610)
		*v = yyv3610
	}
	var yymk3610 ResourceName
	var yymv3610 pkg3_resource.Quantity
	var yymg3610 bool
	if yybh3610.MapValueReset {
		yymg3610 = true
	}
	if yyl3610 > 0 {
		for yyj3610 := 0; yyj3610 < yyl3610; yyj3610++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3610 = ""
			} else {
				yymk3610 = ResourceName(r.DecodeString())
			}

			if yymg3610 {
				yymv3610 = yyv3610[yymk3610]
			} else {
				yymv3610 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3610 = pkg3_resource.Quantity{}
			} else {
				yyv3612 := &yymv3610
				yym3613 := z.DecBinary()
				_ = yym3613
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3612) {
				} else if !yym3613 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3612)
				} else {
					z.DecFallback(yyv3612, false)
				}
			}

			if yyv3610 != nil {
				yyv3610[yymk3610] = yymv3610
			}
		}
	} else if yyl3610 < 0 {
		for yyj3610 := 0; !r.CheckBreak(); yyj3610++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3610 = ""
			} else {
				yymk3610 = ResourceName(r.DecodeString())
			}

			if yymg3610 {
				yymv3610 = yyv3610[yymk3610]
			} else {
				yymv3610 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3610 = pkg3_resource.Quantity{}
			} else {
				yyv3615 := &yymv3610
				yym3616 := z.DecBinary()
				_ = yym3616
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3615) {
				} else if !yym3616 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3615)
				} else {
					z.DecFallback(yyv3615, false)
				}
			}

			if yyv3610 != nil {
				yyv3610[yymk3610] = yymv3610
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3617 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3618 := &yyv3617
		yy3618.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3619 := *v
	yyh3619, yyl3619 := z.DecSliceHelperStart()
	var yyc3619 bool
	if yyl3619 == 0 {
		if yyv3619 == nil {
			yyv3619 = []Node{}
			yyc3619 = true
		} else if len(yyv3619) != 0 {
			yyv3619 = yyv3619[:0]
			yyc3619 = true
		}
	} else if yyl3619 > 0 {
		var yyrr3619, yyrl3619 int
		var yyrt3619 bool
		if yyl3619 > cap(yyv3619) {

			yyrg3619 := len(yyv3619) > 0
			yyv23619 := yyv3619
			yyrl3619, yyrt3619 = z.DecInferLen(yyl3619, z.DecBasicHandle().MaxInitLen, 456)
			if yyrt3619 {
				if yyrl3619 <= cap(yyv3619) {
					yyv3619 = yyv3619[:yyrl3619]
				} else {
					yyv3619 = make([]Node, yyrl3619)
				}
			} else {
				yyv3619 = make([]Node, yyrl3619)
			}
			yyc3619 = true
			yyrr3619 = len(yyv3619)
			if yyrg3619 {
				copy(yyv3619, yyv23619)
			}
		} else if yyl3619 != len(yyv3619) {
			yyv3619 = yyv3619[:yyl3619]
			yyc3619 = true
		}
		yyj3619 := 0
		for ; yyj3619 < yyrr3619; yyj3619++ {
			yyh3619.ElemContainerState(yyj3619)
			if r.TryDecodeAsNil() {
				yyv3619[yyj3619] = Node{}
			} else {
				yyv3620 := &yyv3619[yyj3619]
				yyv3620.CodecDecodeSelf(d)
			}

		}
		if yyrt3619 {
			for ; yyj3619 < yyl3619; yyj3619++ {
				yyv3619 = append(yyv3619, Node{})
				yyh3619.ElemContainerState(yyj3619)
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = Node{}
				} else {
					yyv3621 := &yyv3619[yyj3619]
					yyv3621.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3619 := 0
		for ; !r.CheckBreak(); yyj3619++ {

			if yyj3619 >= len(yyv3619) {
				yyv3619 = append(yyv3619, Node{}) // var yyz3619 Node
				yyc3619 = true
			}
			yyh3619.ElemContainerState(yyj3619)
			if yyj3619 < len(yyv3619) {
				if r.TryDecodeAsNil() {
					yyv3619[yyj3619] = Node{}
				} else {
					yyv3622 := &yyv3619[yyj3619]
					yyv3622.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3619 < len(yyv3619) {
			yyv3619 = yyv3619[:yyj3619]
			yyc3619 = true
		} else if yyj3619 == 0 && yyv3619 == nil {
			yyv3619 = []Node{}
			yyc3619 = true
		}
	}
	yyh3619.End()
	if yyc3619 {
		*v = yyv3619
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3623 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv3623.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3624 := *v
	yyh3624, yyl3624 := z.DecSliceHelperStart()
	var yyc3624 bool
	if yyl3624 == 0 {
		if yyv3624 == nil {
			yyv3624 = []FinalizerName{}
			yyc3624 = true
		} else if len(yyv3624) != 0 {
			yyv3624 = yyv3624[:0]
			yyc3624 = true
		}
	} else if yyl3624 > 0 {
		var yyrr3624, yyrl3624 int
		var yyrt3624 bool
		if yyl3624 > cap(yyv3624) {

			yyrl3624, yyrt3624 = z.DecInferLen(yyl3624, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3624 {
				if yyrl3624 <= cap(yyv3624) {
					yyv3624 = yyv3624[:yyrl3624]
				} else {
					yyv3624 = make([]FinalizerName, yyrl3624)
				}
			} else {
				yyv3624 = make([]FinalizerName, yyrl3624)
			}
			yyc3624 = true
			yyrr3624 = len(yyv3624)
		} else if yyl3624 != len(yyv3624) {
			yyv3624 = yyv3624[:yyl3624]
			yyc3624 = true
		}
		yyj3624 := 0
		for ; yyj3624 < yyrr3624; yyj3624++ {
			yyh3624.ElemContainerState(yyj3624)
			if r.TryDecodeAsNil() {
				yyv3624[yyj3624] = ""
			} else {
				yyv3624[yyj3624] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt3624 {
			for ; yyj3624 < yyl3624; yyj3624++ {
				yyv3624 = append(yyv3624, "")
				yyh3624.ElemContainerState(yyj3624)
				if r.TryDecodeAsNil() {
					yyv3624[yyj3624] = ""
				} else {
					yyv3624[yyj3624] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj3624 := 0
		for ; !r.CheckBreak(); yyj3624++ {

			if yyj3624 >= len(yyv3624) {
				yyv3624 = append(yyv3624, "") // var yyz3624 FinalizerName
				yyc3624 = true
			}
			yyh3624.ElemContainerState(yyj3624)
			if yyj3624 < len(yyv3624) {
				if r.TryDecodeAsNil() {
					yyv3624[yyj3624] = ""
				} else {
					yyv3624[yyj3624] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3624 < len(yyv3624) {
			yyv3624 = yyv3624[:yyj3624]
			yyc3624 = true
		} else if yyj3624 == 0 && yyv3624 == nil {
			yyv3624 = []FinalizerName{}
			yyc3624 = true
		}
	}
	yyh3624.End()
	if yyc3624 {
		*v = yyv3624
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3629 := &yyv3628
		yy3629.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3630 := *v
	yyh3630, yyl3630 := z.DecSliceHelperStart()
	var yyc3630 bool
	if yyl3630 == 0 {
		if yyv3630 == nil {
			yyv3630 = []Namespace{}
			yyc3630 = true
		} else if len(yyv3630) != 0 {
			yyv3630 = yyv3630[:0]
			yyc3630 = true
		}
	} else if yyl3630 > 0 {
		var yyrr3630, yyrl3630 int
		var yyrt3630 bool
		if yyl3630 > cap(yyv3630) {

			yyrg3630 := len(yyv3630) > 0
			yyv23630 := yyv3630
			yyrl3630, yyrt3630 = z.DecInferLen(yyl3630, z.DecBasicHandle().MaxInitLen, 232)
			if yyrt3630 {
				if yyrl3630 <= cap(yyv3630) {
					yyv3630 = yyv3630[:yyrl3630]
				} else {
					yyv3630 = make([]Namespace, yyrl3630)
				}
			} else {
				yyv3630 = make([]Namespace, yyrl3630)
			}
			yyc3630 = true
			yyrr3630 = len(yyv3630)
			if yyrg3630 {
				copy(yyv3630, yyv23630)
			}
		} else if yyl3630 != len(yyv3630) {
			yyv3630 = yyv3630[:yyl3630]
			yyc3630 = true
		}
		yyj3630 := 0
		for ; yyj3630 < yyrr3630; yyj3630++ {
			yyh3630.ElemContainerState(yyj3630)
			if r.TryDecodeAsNil() {
				yyv3630[yyj3630] = Namespace{}
			} else {
				yyv3631 := &yyv3630[yyj3630]
				yyv3631.CodecDecodeSelf(d)
			}

		}
		if yyrt3630 {
			for ; yyj3630 < yyl3630; yyj3630++ {
				yyv3630 = append(yyv3630, Namespace{})
				yyh3630.ElemContainerState(yyj3630)
				if r.TryDecodeAsNil() {
					yyv3630[yyj3630] = Namespace{}
				} else {
					yyv3632 := &yyv3630[yyj3630]
					yyv3632.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3630 := 0
		for ; !r.CheckBreak(); yyj3630++ {

			if yyj3630 >= len(yyv3630) {
				yyv3630 = append(yyv3630, Namespace{}) // var yyz3630 Namespace
				yyc3630 = true
			}
			yyh3630.ElemContainerState(yyj3630)
			if yyj3630 < len(yyv3630) {
				if r.TryDecodeAsNil() {
					yyv3630[yyj3630] = Namespace{}
				} else {
					yyv3633 := &yyv3630[yyj3630]
					yyv3633.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3630 < len(yyv3630) {
			yyv3630 = yyv3630[:yyj3630]
			yyc3630 = true
		} else if yyj3630 == 0 && yyv3630 == nil {
			yyv3630 = []Namespace{}
			yyc3630 = true
		}
	}
	yyh3630.End()
	if yyc3630 {
		*v = yyv3630
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3634 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3635 := &yyv3634
		yy3635.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3636 := *v
	yyh3636, yyl3636 := z.DecSliceHelperStart()
	var yyc3636 bool
	if yyl3636 == 0 {
		if yyv3636 == nil {
			yyv3636 = []Event{}
			yyc3636 = true
		} else if len(yyv3636) != 0 {
			yyv3636 = yyv3636[:0]
			yyc3636 = true
		}
	} else if yyl3636 > 0 {
		var yyrr3636, yyrl3636 int
		var yyrt3636 bool
		if yyl3636 > cap(yyv3636) {

			yyrg3636 := len(yyv3636) > 0
			yyv23636 := yyv3636
			yyrl3636, yyrt3636 = z.DecInferLen(yyl3636, z.DecBasicHandle().MaxInitLen, 440)
			if yyrt3636 {
				if yyrl3636 <= cap(yyv3636) {
					yyv3636 = yyv3636[:yyrl3636]
				} else {
					yyv3636 = make([]Event, yyrl3636)
				}
			} else {
				yyv3636 = make([]Event, yyrl3636)
			}
			yyc3636 = true
			yyrr3636 = len(yyv3636)
			if yyrg3636 {
				copy(yyv3636, yyv23636)
			}
		} else if yyl3636 != len(yyv3636) {
			yyv3636 = yyv3636[:yyl3636]
			yyc3636 = true
		}
		yyj3636 := 0
		for ; yyj3636 < yyrr3636; yyj3636++ {
			yyh3636.ElemContainerState(yyj3636)
			if r.TryDecodeAsNil() {
				yyv3636[yyj3636] = Event{}
			} else {
				yyv3637 := &yyv3636[yyj3636]
				yyv3637.CodecDecodeSelf(d)
			}

		}
		if yyrt3636 {
			for ; yyj3636 < yyl3636; yyj3636++ {
				yyv3636 = append(yyv3636, Event{})
				yyh3636.ElemContainerState(yyj3636)
				if r.TryDecodeAsNil() {
					yyv3636[yyj3636] = Event{}
				} else {
					yyv3638 := &yyv3636[yyj3636]
					yyv3638.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3636 := 0
		for ; !r.CheckBreak(); yyj3636++ {

			if yyj3636 >= len(yyv3636) {
				yyv3636 = append(yyv3636, Event{}) // var yyz3636 Event
				yyc3636 = true
			}
			yyh3636.ElemContainerState(yyj3636)
			if yyj3636 < len(yyv3636) {
				if r.TryDecodeAsNil() {
					yyv3636[yyj3636] = Event{}
				} else {
					yyv3639 := &yyv3636[yyj3636]
					yyv3639.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3636 < len(yyv3636) {
			yyv3636 = yyv3636[:yyj3636]
			yyc3636 = true
		} else if yyj3636 == 0 && yyv3636 == nil {
			yyv3636 = []Event{}
			yyc3636 = true
		}
	}
	yyh3636.End()
	if yyc3636 {
		*v = yyv3636
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg6_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3640 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv3640 == nil {
			r.EncodeNil()
		} else {
			yym3641 := z.EncBinary()
			_ = yym3641
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv3640) {
			} else {
				z.EncFallback(yyv3640)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg6_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3642 := *v
	yyh3642, yyl3642 := z.DecSliceHelperStart()
	var yyc3642 bool
	if yyl3642 == 0 {
		if yyv3642 == nil {
			yyv3642 = []pkg6_runtime.Object{}
			yyc3642 = true
		} else if len(yyv3642) != 0 {
			yyv3642 = yyv3642[:0]
			yyc3642 = true
		}
	} else if yyl3642 > 0 {
		var yyrr3642, yyrl3642 int
		var yyrt3642 bool
		if yyl3642 > cap(yyv3642) {

			yyrg3642 := len(yyv3642) > 0
			yyv23642 := yyv3642
			yyrl3642, yyrt3642 = z.DecInferLen(yyl3642, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt3642 {
				if yyrl3642 <= cap(yyv3642) {
					yyv3642 = yyv3642[:yyrl3642]
				} else {
					yyv3642 = make([]pkg6_runtime.Object, yyrl3642)
				}
			} else {
				yyv3642 = make([]pkg6_runtime.Object, yyrl3642)
			}
			yyc3642 = true
			yyrr3642 = len(yyv3642)
			if yyrg3642 {
				copy(yyv3642, yyv23642)
			}
		} else if yyl3642 != len(yyv3642) {
			yyv3642 = yyv3642[:yyl3642]
			yyc3642 = true
		}
		yyj3642 := 0
		for ; yyj3642 < yyrr3642; yyj3642++ {
			yyh3642.ElemContainerState(yyj3642)
			if r.TryDecodeAsNil() {
				yyv3642[yyj3642] = nil
			} else {
				yyv3643 := &yyv3642[yyj3642]
				yym3644 := z.DecBinary()
				_ = yym3644
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3643) {
				} else {
					z.DecFallback(yyv3643, true)
				}
			}

		}
		if yyrt3642 {
			for ; yyj3642 < yyl3642; yyj3642++ {
				yyv3642 = append(yyv3642, nil)
				yyh3642.ElemContainerState(yyj3642)
				if r.TryDecodeAsNil() {
					yyv3642[yyj3642] = nil
				} else {
					yyv3645 := &yyv3642[yyj3642]
					yym3646 := z.DecBinary()
					_ = yym3646
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3645) {
					} else {
						z.DecFallback(yyv3645, true)
					}
				}

			}
		}

	} else {
		yyj3642 := 0
		for ; !r.CheckBreak(); yyj3642++ {

			if yyj3642 >= len(yyv3642) {
				yyv3642 = append(yyv3642, nil) // var yyz3642 pkg6_runtime.Object
				yyc3642 = true
			}
			yyh3642.ElemContainerState(yyj3642)
			if yyj3642 < len(yyv3642) {
				if r.TryDecodeAsNil() {
					yyv3642[yyj3642] = nil
				} else {
					yyv3647 := &yyv3642[yyj3642]
					yym3648 := z.DecBinary()
					_ = yym3648
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv3647) {
					} else {
						z.DecFallback(yyv3647, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3642 < len(yyv3642) {
			yyv3642 = yyv3642[:yyj3642]
			yyc3642 = true
		} else if yyj3642 == 0 && yyv3642 == nil {
			yyv3642 = []pkg6_runtime.Object{}
			yyc3642 = true
		}
	}
	yyh3642.End()
	if yyc3642 {
		*v = yyv3642
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3649 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3650 := &yyv3649
		yy3650.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3651 := *v
	yyh3651, yyl3651 := z.DecSliceHelperStart()
	var yyc3651 bool
	if yyl3651 == 0 {
		if yyv3651 == nil {
			yyv3651 = []LimitRangeItem{}
			yyc3651 = true
		} else if len(yyv3651) != 0 {
			yyv3651 = yyv3651[:0]
			yyc3651 = true
		}
	} else if yyl3651 > 0 {
		var yyrr3651, yyrl3651 int
		var yyrt3651 bool
		if yyl3651 > cap(yyv3651) {

			yyrg3651 := len(yyv3651) > 0
			yyv23651 := yyv3651
			yyrl3651, yyrt3651 = z.DecInferLen(yyl3651, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt3651 {
				if yyrl3651 <= cap(yyv3651) {
					yyv3651 = yyv3651[:yyrl3651]
				} else {
					yyv3651 = make([]LimitRangeItem, yyrl3651)
				}
			} else {
				yyv3651 = make([]LimitRangeItem, yyrl3651)
			}
			yyc3651 = true
			yyrr3651 = len(yyv3651)
			if yyrg3651 {
				copy(yyv3651, yyv23651)
			}
		} else if yyl3651 != len(yyv3651) {
			yyv3651 = yyv3651[:yyl3651]
			yyc3651 = true
		}
		yyj3651 := 0
		for ; yyj3651 < yyrr3651; yyj3651++ {
			yyh3651.ElemContainerState(yyj3651)
			if r.TryDecodeAsNil() {
				yyv3651[yyj3651] = LimitRangeItem{}
			} else {
				yyv3652 := &yyv3651[yyj3651]
				yyv3652.CodecDecodeSelf(d)
			}

		}
		if yyrt3651 {
			for ; yyj3651 < yyl3651; yyj3651++ {
				yyv3651 = append(yyv3651, LimitRangeItem{})
				yyh3651.ElemContainerState(yyj3651)
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = LimitRangeItem{}
				} else {
					yyv3653 := &yyv3651[yyj3651]
					yyv3653.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3651 := 0
		for ; !r.CheckBreak(); yyj3651++ {

			if yyj3651 >= len(yyv3651) {
				yyv3651 = append(yyv3651, LimitRangeItem{}) // var yyz3651 LimitRangeItem
				yyc3651 = true
			}
			yyh3651.ElemContainerState(yyj3651)
			if yyj3651 < len(yyv3651) {
				if r.TryDecodeAsNil() {
					yyv3651[yyj3651] = LimitRangeItem{}
				} else {
					yyv3654 := &yyv3651[yyj3651]
					yyv3654.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3651 < len(yyv3651) {
			yyv3651 = yyv3651[:yyj3651]
			yyc3651 = true
		} else if yyj3651 == 0 && yyv3651 == nil {
			yyv3651 = []LimitRangeItem{}
			yyc3651 = true
		}
	}
	yyh3651.End()
	if yyc3651 {
		*v = yyv3651
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3655 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3656 := &yyv3655
		yy3656.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3657 := *v
	yyh3657, yyl3657 := z.DecSliceHelperStart()
	var yyc3657 bool
	if yyl3657 == 0 {
		if yyv3657 == nil {
			yyv3657 = []LimitRange{}
			yyc3657 = true
		} else if len(yyv3657) != 0 {
			yyv3657 = yyv3657[:0]
			yyc3657 = true
		}
	} else if yyl3657 > 0 {
		var yyrr3657, yyrl3657 int
		var yyrt3657 bool
		if yyl3657 > cap(yyv3657) {

			yyrg3657 := len(yyv3657) > 0
			yyv23657 := yyv3657
			yyrl3657, yyrt3657 = z.DecInferLen(yyl3657, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3657 {
				if yyrl3657 <= cap(yyv3657) {
					yyv3657 = yyv3657[:yyrl3657]
				} else {
					yyv3657 = make([]LimitRange, yyrl3657)
				}
			} else {
				yyv3657 = make([]LimitRange, yyrl3657)
			}
			yyc3657 = true
			yyrr3657 = len(yyv3657)
			if yyrg3657 {
				copy(yyv3657, yyv23657)
			}
		} else if yyl3657 != len(yyv3657) {
			yyv3657 = yyv3657[:yyl3657]
			yyc3657 = true
		}
		yyj3657 := 0
		for ; yyj3657 < yyrr3657; yyj3657++ {
			yyh3657.ElemContainerState(yyj3657)
			if r.TryDecodeAsNil() {
				yyv3657[yyj3657] = LimitRange{}
			} else {
				yyv3658 := &yyv3657[yyj3657]
				yyv3658.CodecDecodeSelf(d)
			}

		}
		if yyrt3657 {
			for ; yyj3657 < yyl3657; yyj3657++ {
				yyv3657 = append(yyv3657, LimitRange{})
				yyh3657.ElemContainerState(yyj3657)
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = LimitRange{}
				} else {
					yyv3659 := &yyv3657[yyj3657]
					yyv3659.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3657 := 0
		for ; !r.CheckBreak(); yyj3657++ {

			if yyj3657 >= len(yyv3657) {
				yyv3657 = append(yyv3657, LimitRange{}) // var yyz3657 LimitRange
				yyc3657 = true
			}
			yyh3657.ElemContainerState(yyj3657)
			if yyj3657 < len(yyv3657) {
				if r.TryDecodeAsNil() {
					yyv3657[yyj3657] = LimitRange{}
				} else {
					yyv3660 := &yyv3657[yyj3657]
					yyv3660.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3657 < len(yyv3657) {
			yyv3657 = yyv3657[:yyj3657]
			yyc3657 = true
		} else if yyj3657 == 0 && yyv3657 == nil {
			yyv3657 = []LimitRange{}
			yyc3657 = true
		}
	}
	yyh3657.End()
	if yyc3657 {
		*v = yyv3657
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3661 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3662 := &yyv3661
		yy3662.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3663 := *v
	yyh3663, yyl3663 := z.DecSliceHelperStart()
	var yyc3663 bool
	if yyl3663 == 0 {
		if yyv3663 == nil {
			yyv3663 = []ResourceQuota{}
			yyc3663 = true
		} else if len(yyv3663) != 0 {
			yyv3663 = yyv3663[:0]
			yyc3663 = true
		}
	} else if yyl3663 > 0 {
		var yyrr3663, yyrl3663 int
		var yyrt3663 bool
		if yyl3663 > cap(yyv3663) {

			yyrg3663 := len(yyv3663) > 0
			yyv23663 := yyv3663
			yyrl3663, yyrt3663 = z.DecInferLen(yyl3663, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3663 {
				if yyrl3663 <= cap(yyv3663) {
					yyv3663 = yyv3663[:yyrl3663]
				} else {
					yyv3663 = make([]ResourceQuota, yyrl3663)
				}
			} else {
				yyv3663 = make([]ResourceQuota, yyrl3663)
			}
			yyc3663 = true
			yyrr3663 = len(yyv3663)
			if yyrg3663 {
				copy(yyv3663, yyv23663)
			}
		} else if yyl3663 != len(yyv3663) {
			yyv3663 = yyv3663[:yyl3663]
			yyc3663 = true
		}
		yyj3663 := 0
		for ; yyj3663 < yyrr3663; yyj3663++ {
			yyh3663.ElemContainerState(yyj3663)
			if r.TryDecodeAsNil() {
				yyv3663[yyj3663] = ResourceQuota{}
			} else {
				yyv3664 := &yyv3663[yyj3663]
				yyv3664.CodecDecodeSelf(d)
			}

		}
		if yyrt3663 {
			for ; yyj3663 < yyl3663; yyj3663++ {
				yyv3663 = append(yyv3663, ResourceQuota{})
				yyh3663.ElemContainerState(yyj3663)
				if r.TryDecodeAsNil() {
					yyv3663[yyj3663] = ResourceQuota{}
				} else {
					yyv3665 := &yyv3663[yyj3663]
					yyv3665.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3663 := 0
		for ; !r.CheckBreak(); yyj3663++ {

			if yyj3663 >= len(yyv3663) {
				yyv3663 = append(yyv3663, ResourceQuota{}) // var yyz3663 ResourceQuota
				yyc3663 = true
			}
			yyh3663.ElemContainerState(yyj3663)
			if yyj3663 < len(yyv3663) {
				if r.TryDecodeAsNil() {
					yyv3663[yyj3663] = ResourceQuota{}
				} else {
					yyv3666 := &yyv3663[yyj3663]
					yyv3666.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3663 < len(yyv3663) {
			yyv3663 = yyv3663[:yyj3663]
			yyc3663 = true
		} else if yyj3663 == 0 && yyv3663 == nil {
			yyv3663 = []ResourceQuota{}
			yyc3663 = true
		}
	}
	yyh3663.End()
	if yyc3663 {
		*v = yyv3663
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk3667, yyv3667 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym3668 := z.EncBinary()
		_ = yym3668
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk3667))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv3667 == nil {
			r.EncodeNil()
		} else {
			yym3669 := z.EncBinary()
			_ = yym3669
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv3667))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3670 := *v
	yyl3670 := r.ReadMapStart()
	yybh3670 := z.DecBasicHandle()
	if yyv3670 == nil {
		yyrl3670, _ := z.DecInferLen(yyl3670, yybh3670.MaxInitLen, 40)
		yyv3670 = make(map[string][]uint8, yyrl3670)
		*v = yyv3670
	}
	var yymk3670 string
	var yymv3670 []uint8
	var yymg3670 bool
	if yybh3670.MapValueReset {
		yymg3670 = true
	}
	if yyl3670 > 0 {
		for yyj3670 := 0; yyj3670 < yyl3670; yyj3670++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3670 = ""
			} else {
				yymk3670 = string(r.DecodeString())
			}

			if yymg3670 {
				yymv3670 = yyv3670[yymk3670]
			} else {
				yymv3670 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3670 = nil
			} else {
				yyv3672 := &yymv3670
				yym3673 := z.DecBinary()
				_ = yym3673
				if false {
				} else {
					*yyv3672 = r.DecodeBytes(*(*[]byte)(yyv3672), false, false)
				}
			}

			if yyv3670 != nil {
				yyv3670[yymk3670] = yymv3670
			}
		}
	} else if yyl3670 < 0 {
		for yyj3670 := 0; !r.CheckBreak(); yyj3670++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk3670 = ""
			} else {
				yymk3670 = string(r.DecodeString())
			}

			if yymg3670 {
				yymv3670 = yyv3670[yymk3670]
			} else {
				yymv3670 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv3670 = nil
			} else {
				yyv3675 := &yymv3670
				yym3676 := z.DecBinary()
				_ = yym3676
				if false {
				} else {
					*yyv3675 = r.DecodeBytes(*(*[]byte)(yyv3675), false, false)
				}
			}

			if yyv3670 != nil {
				yyv3670[yymk3670] = yymv3670
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3677 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3678 := &yyv3677
		yy3678.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3679 := *v
	yyh3679, yyl3679 := z.DecSliceHelperStart()
	var yyc3679 bool
	if yyl3679 == 0 {
		if yyv3679 == nil {
			yyv3679 = []Secret{}
			yyc3679 = true
		} else if len(yyv3679) != 0 {
			yyv3679 = yyv3679[:0]
			yyc3679 = true
		}
	} else if yyl3679 > 0 {
		var yyrr3679, yyrl3679 int
		var yyrt3679 bool
		if yyl3679 > cap(yyv3679) {

			yyrg3679 := len(yyv3679) > 0
			yyv23679 := yyv3679
			yyrl3679, yyrt3679 = z.DecInferLen(yyl3679, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3679 {
				if yyrl3679 <= cap(yyv3679) {
					yyv3679 = yyv3679[:yyrl3679]
				} else {
					yyv3679 = make([]Secret, yyrl3679)
				}
			} else {
				yyv3679 = make([]Secret, yyrl3679)
			}
			yyc3679 = true
			yyrr3679 = len(yyv3679)
			if yyrg3679 {
				copy(yyv3679, yyv23679)
			}
		} else if yyl3679 != len(yyv3679) {
			yyv3679 = yyv3679[:yyl3679]
			yyc3679 = true
		}
		yyj3679 := 0
		for ; yyj3679 < yyrr3679; yyj3679++ {
			yyh3679.ElemContainerState(yyj3679)
			if r.TryDecodeAsNil() {
				yyv3679[yyj3679] = Secret{}
			} else {
				yyv3680 := &yyv3679[yyj3679]
				yyv3680.CodecDecodeSelf(d)
			}

		}
		if yyrt3679 {
			for ; yyj3679 < yyl3679; yyj3679++ {
				yyv3679 = append(yyv3679, Secret{})
				yyh3679.ElemContainerState(yyj3679)
				if r.TryDecodeAsNil() {
					yyv3679[yyj3679] = Secret{}
				} else {
					yyv3681 := &yyv3679[yyj3679]
					yyv3681.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3679 := 0
		for ; !r.CheckBreak(); yyj3679++ {

			if yyj3679 >= len(yyv3679) {
				yyv3679 = append(yyv3679, Secret{}) // var yyz3679 Secret
				yyc3679 = true
			}
			yyh3679.ElemContainerState(yyj3679)
			if yyj3679 < len(yyv3679) {
				if r.TryDecodeAsNil() {
					yyv3679[yyj3679] = Secret{}
				} else {
					yyv3682 := &yyv3679[yyj3679]
					yyv3682.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3679 < len(yyv3679) {
			yyv3679 = yyv3679[:yyj3679]
			yyc3679 = true
		} else if yyj3679 == 0 && yyv3679 == nil {
			yyv3679 = []Secret{}
			yyc3679 = true
		}
	}
	yyh3679.End()
	if yyc3679 {
		*v = yyv3679
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3683 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3684 := &yyv3683
		yy3684.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3685 := *v
	yyh3685, yyl3685 := z.DecSliceHelperStart()
	var yyc3685 bool
	if yyl3685 == 0 {
		if yyv3685 == nil {
			yyv3685 = []ComponentCondition{}
			yyc3685 = true
		} else if len(yyv3685) != 0 {
			yyv3685 = yyv3685[:0]
			yyc3685 = true
		}
	} else if yyl3685 > 0 {
		var yyrr3685, yyrl3685 int
		var yyrt3685 bool
		if yyl3685 > cap(yyv3685) {

			yyrg3685 := len(yyv3685) > 0
			yyv23685 := yyv3685
			yyrl3685, yyrt3685 = z.DecInferLen(yyl3685, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt3685 {
				if yyrl3685 <= cap(yyv3685) {
					yyv3685 = yyv3685[:yyrl3685]
				} else {
					yyv3685 = make([]ComponentCondition, yyrl3685)
				}
			} else {
				yyv3685 = make([]ComponentCondition, yyrl3685)
			}
			yyc3685 = true
			yyrr3685 = len(yyv3685)
			if yyrg3685 {
				copy(yyv3685, yyv23685)
			}
		} else if yyl3685 != len(yyv3685) {
			yyv3685 = yyv3685[:yyl3685]
			yyc3685 = true
		}
		yyj3685 := 0
		for ; yyj3685 < yyrr3685; yyj3685++ {
			yyh3685.ElemContainerState(yyj3685)
			if r.TryDecodeAsNil() {
				yyv3685[yyj3685] = ComponentCondition{}
			} else {
				yyv3686 := &yyv3685[yyj3685]
				yyv3686.CodecDecodeSelf(d)
			}

		}
		if yyrt3685 {
			for ; yyj3685 < yyl3685; yyj3685++ {
				yyv3685 = append(yyv3685, ComponentCondition{})
				yyh3685.ElemContainerState(yyj3685)
				if r.TryDecodeAsNil() {
					yyv3685[yyj3685] = ComponentCondition{}
				} else {
					yyv3687 := &yyv3685[yyj3685]
					yyv3687.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3685 := 0
		for ; !r.CheckBreak(); yyj3685++ {

			if yyj3685 >= len(yyv3685) {
				yyv3685 = append(yyv3685, ComponentCondition{}) // var yyz3685 ComponentCondition
				yyc3685 = true
			}
			yyh3685.ElemContainerState(yyj3685)
			if yyj3685 < len(yyv3685) {
				if r.TryDecodeAsNil() {
					yyv3685[yyj3685] = ComponentCondition{}
				} else {
					yyv3688 := &yyv3685[yyj3685]
					yyv3688.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3685 < len(yyv3685) {
			yyv3685 = yyv3685[:yyj3685]
			yyc3685 = true
		} else if yyj3685 == 0 && yyv3685 == nil {
			yyv3685 = []ComponentCondition{}
			yyc3685 = true
		}
	}
	yyh3685.End()
	if yyc3685 {
		*v = yyv3685
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv3689 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy3690 := &yyv3689
		yy3690.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv3691 := *v
	yyh3691, yyl3691 := z.DecSliceHelperStart()
	var yyc3691 bool
	if yyl3691 == 0 {
		if yyv3691 == nil {
			yyv3691 = []ComponentStatus{}
			yyc3691 = true
		} else if len(yyv3691) != 0 {
			yyv3691 = yyv3691[:0]
			yyc3691 = true
		}
	} else if yyl3691 > 0 {
		var yyrr3691, yyrl3691 int
		var yyrt3691 bool
		if yyl3691 > cap(yyv3691) {

			yyrg3691 := len(yyv3691) > 0
			yyv23691 := yyv3691
			yyrl3691, yyrt3691 = z.DecInferLen(yyl3691, z.DecBasicHandle().MaxInitLen, 216)
			if yyrt3691 {
				if yyrl3691 <= cap(yyv3691) {
					yyv3691 = yyv3691[:yyrl3691]
				} else {
					yyv3691 = make([]ComponentStatus, yyrl3691)
				}
			} else {
				yyv3691 = make([]ComponentStatus, yyrl3691)
			}
			yyc3691 = true
			yyrr3691 = len(yyv3691)
			if yyrg3691 {
				copy(yyv3691, yyv23691)
			}
		} else if yyl3691 != len(yyv3691) {
			yyv3691 = yyv3691[:yyl3691]
			yyc3691 = true
		}
		yyj3691 := 0
		for ; yyj3691 < yyrr3691; yyj3691++ {
			yyh3691.ElemContainerState(yyj3691)
			if r.TryDecodeAsNil() {
				yyv3691[yyj3691] = ComponentStatus{}
			} else {
				yyv3692 := &yyv3691[yyj3691]
				yyv3692.CodecDecodeSelf(d)
			}

		}
		if yyrt3691 {
			for ; yyj3691 < yyl3691; yyj3691++ {
				yyv3691 = append(yyv3691, ComponentStatus{})
				yyh3691.ElemContainerState(yyj3691)
				if r.TryDecodeAsNil() {
					yyv3691[yyj3691] = ComponentStatus{}
				} else {
					yyv3693 := &yyv3691[yyj3691]
					yyv3693.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj3691 := 0
		for ; !r.CheckBreak(); yyj3691++ {

			if yyj3691 >= len(yyv3691) {
				yyv3691 = append(yyv3691, ComponentStatus{}) // var yyz3691 ComponentStatus
				yyc3691 = true
			}
			yyh3691.ElemContainerState(yyj3691)
			if yyj3691 < len(yyv3691) {
				if r.TryDecodeAsNil() {
					yyv3691[yyj3691] = ComponentStatus{}
				} else {
					yyv3694 := &yyv3691[yyj3691]
					yyv3694.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj3691 < len(yyv3691) {
			yyv3691 = yyv3691[:yyj3691]
			yyc3691 = true
		} else if yyj3691 == 0 && yyv3691 == nil {
			yyv3691 = []ComponentStatus{}
			yyc3691 = true
		}
	}
	yyh3691.End()
	if yyc3691 {
		*v = yyv3691
	}
}
