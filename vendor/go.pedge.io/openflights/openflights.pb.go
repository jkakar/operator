// Code generated by protoc-gen-go.
// source: openflights.proto
// DO NOT EDIT!

package openflights

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"
import google_protobuf1 "go.pedge.io/pb/go/google/protobuf"
import google_protobuf2 "go.pedge.io/pb/go/google/protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// DST represents the DST value for a timezone.
type DST int32

const (
	DST_DST_NONE DST = 0
	DST_DST_A    DST = 1
	DST_DST_E    DST = 2
	DST_DST_N    DST = 3
	DST_DST_O    DST = 4
	DST_DST_S    DST = 5
	DST_DST_U    DST = 6
	DST_DST_Z    DST = 7
)

var DST_name = map[int32]string{
	0: "DST_NONE",
	1: "DST_A",
	2: "DST_E",
	3: "DST_N",
	4: "DST_O",
	5: "DST_S",
	6: "DST_U",
	7: "DST_Z",
}
var DST_value = map[string]int32{
	"DST_NONE": 0,
	"DST_A":    1,
	"DST_E":    2,
	"DST_N":    3,
	"DST_O":    4,
	"DST_S":    5,
	"DST_U":    6,
	"DST_Z":    7,
}

func (x DST) String() string {
	return proto.EnumName(DST_name, int32(x))
}
func (DST) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// CSVStore stores information on flights in CSV format.
type CSVStore struct {
	Airports []byte `protobuf:"bytes,1,opt,name=airports,proto3" json:"airports,omitempty"`
	Airlines []byte `protobuf:"bytes,2,opt,name=airlines,proto3" json:"airlines,omitempty"`
	Routes   []byte `protobuf:"bytes,3,opt,name=routes,proto3" json:"routes,omitempty"`
}

func (m *CSVStore) Reset()                    { *m = CSVStore{} }
func (m *CSVStore) String() string            { return proto.CompactTextString(m) }
func (*CSVStore) ProtoMessage()               {}
func (*CSVStore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// IDStore stores maps from id to object.
type IDStore struct {
	IdToAirport map[string]*Airport `protobuf:"bytes,1,rep,name=id_to_airport" json:"id_to_airport,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IdToAirline map[string]*Airline `protobuf:"bytes,2,rep,name=id_to_airline" json:"id_to_airline,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Route       []*Route            `protobuf:"bytes,3,rep,name=route" json:"route,omitempty"`
}

func (m *IDStore) Reset()                    { *m = IDStore{} }
func (m *IDStore) String() string            { return proto.CompactTextString(m) }
func (*IDStore) ProtoMessage()               {}
func (*IDStore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IDStore) GetIdToAirport() map[string]*Airport {
	if m != nil {
		return m.IdToAirport
	}
	return nil
}

func (m *IDStore) GetIdToAirline() map[string]*Airline {
	if m != nil {
		return m.IdToAirline
	}
	return nil
}

func (m *IDStore) GetRoute() []*Route {
	if m != nil {
		return m.Route
	}
	return nil
}

// Airport represents an airport.
type Airport struct {
	Id                    string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name                  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	City                  string `protobuf:"bytes,3,opt,name=city" json:"city,omitempty"`
	Country               string `protobuf:"bytes,4,opt,name=country" json:"country,omitempty"`
	IataFaa               string `protobuf:"bytes,5,opt,name=iata_faa" json:"iata_faa,omitempty"`
	Icao                  string `protobuf:"bytes,6,opt,name=icao" json:"icao,omitempty"`
	LatitudeMicros        int32  `protobuf:"zigzag32,7,opt,name=latitude_micros" json:"latitude_micros,omitempty"`
	LongitudeMicros       int32  `protobuf:"zigzag32,8,opt,name=longitude_micros" json:"longitude_micros,omitempty"`
	AltitudeFeet          uint32 `protobuf:"varint,9,opt,name=altitude_feet" json:"altitude_feet,omitempty"`
	TimezoneOffsetMinutes int32  `protobuf:"zigzag32,10,opt,name=timezone_offset_minutes" json:"timezone_offset_minutes,omitempty"`
	Dst                   DST    `protobuf:"varint,11,opt,name=dst,enum=openflights.DST" json:"dst,omitempty"`
	Timezone              string `protobuf:"bytes,12,opt,name=timezone" json:"timezone,omitempty"`
}

func (m *Airport) Reset()                    { *m = Airport{} }
func (m *Airport) String() string            { return proto.CompactTextString(m) }
func (*Airport) ProtoMessage()               {}
func (*Airport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// Airline represents an airline.
type Airline struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Alias    string `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`
	Iata     string `protobuf:"bytes,4,opt,name=iata" json:"iata,omitempty"`
	Icao     string `protobuf:"bytes,5,opt,name=icao" json:"icao,omitempty"`
	Callsign string `protobuf:"bytes,6,opt,name=callsign" json:"callsign,omitempty"`
	Country  string `protobuf:"bytes,7,opt,name=country" json:"country,omitempty"`
	Active   bool   `protobuf:"varint,8,opt,name=active" json:"active,omitempty"`
}

func (m *Airline) Reset()                    { *m = Airline{} }
func (m *Airline) String() string            { return proto.CompactTextString(m) }
func (*Airline) ProtoMessage()               {}
func (*Airline) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// Route represents a route.
type Route struct {
	Airline            *Airline `protobuf:"bytes,1,opt,name=airline" json:"airline,omitempty"`
	SourceAirport      *Airport `protobuf:"bytes,2,opt,name=source_airport" json:"source_airport,omitempty"`
	DestinationAirport *Airport `protobuf:"bytes,3,opt,name=destination_airport" json:"destination_airport,omitempty"`
	Codeshare          bool     `protobuf:"varint,4,opt,name=codeshare" json:"codeshare,omitempty"`
	Stops              uint32   `protobuf:"varint,5,opt,name=stops" json:"stops,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Route) GetAirline() *Airline {
	if m != nil {
		return m.Airline
	}
	return nil
}

func (m *Route) GetSourceAirport() *Airport {
	if m != nil {
		return m.SourceAirport
	}
	return nil
}

func (m *Route) GetDestinationAirport() *Airport {
	if m != nil {
		return m.DestinationAirport
	}
	return nil
}

// Airports is the protobuf plural for Airport.
type Airports struct {
	Airport []*Airport `protobuf:"bytes,1,rep,name=airport" json:"airport,omitempty"`
}

func (m *Airports) Reset()                    { *m = Airports{} }
func (m *Airports) String() string            { return proto.CompactTextString(m) }
func (*Airports) ProtoMessage()               {}
func (*Airports) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Airports) GetAirport() []*Airport {
	if m != nil {
		return m.Airport
	}
	return nil
}

// Airlines is the protobuf plural for Airline.
type Airlines struct {
	Airline []*Airline `protobuf:"bytes,1,rep,name=airline" json:"airline,omitempty"`
}

func (m *Airlines) Reset()                    { *m = Airlines{} }
func (m *Airlines) String() string            { return proto.CompactTextString(m) }
func (*Airlines) ProtoMessage()               {}
func (*Airlines) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Airlines) GetAirline() []*Airline {
	if m != nil {
		return m.Airline
	}
	return nil
}

// Routes is the protobuf plural for Airport.
type Routes struct {
	Route []*Route `protobuf:"bytes,1,rep,name=route" json:"route,omitempty"`
}

func (m *Routes) Reset()                    { *m = Routes{} }
func (m *Routes) String() string            { return proto.CompactTextString(m) }
func (*Routes) ProtoMessage()               {}
func (*Routes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Routes) GetRoute() []*Route {
	if m != nil {
		return m.Route
	}
	return nil
}

type GetAirportRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetAirportRequest) Reset()                    { *m = GetAirportRequest{} }
func (m *GetAirportRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAirportRequest) ProtoMessage()               {}
func (*GetAirportRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetAirlineRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetAirlineRequest) Reset()                    { *m = GetAirlineRequest{} }
func (m *GetAirlineRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAirlineRequest) ProtoMessage()               {}
func (*GetAirlineRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type GetRoutesRequest struct {
	AirlineId            string `protobuf:"bytes,1,opt,name=airline_id" json:"airline_id,omitempty"`
	SourceAirportId      string `protobuf:"bytes,2,opt,name=source_airport_id" json:"source_airport_id,omitempty"`
	DestinationAirportId string `protobuf:"bytes,3,opt,name=destination_airport_id" json:"destination_airport_id,omitempty"`
}

func (m *GetRoutesRequest) Reset()                    { *m = GetRoutesRequest{} }
func (m *GetRoutesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRoutesRequest) ProtoMessage()               {}
func (*GetRoutesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetDistanceRequest struct {
	SourceAirportId      string `protobuf:"bytes,1,opt,name=source_airport_id" json:"source_airport_id,omitempty"`
	DestinationAirportId string `protobuf:"bytes,2,opt,name=destination_airport_id" json:"destination_airport_id,omitempty"`
}

func (m *GetDistanceRequest) Reset()                    { *m = GetDistanceRequest{} }
func (m *GetDistanceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDistanceRequest) ProtoMessage()               {}
func (*GetDistanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type GetMilesRequest struct {
	// vie-ord-mem/jfk-vie
	Route    string `protobuf:"bytes,1,opt,name=route" json:"route,omitempty"`
	MinMiles uint32 `protobuf:"varint,2,opt,name=min_miles" json:"min_miles,omitempty"`
	// 100 = 100%, default = 100%
	Percentage uint32 `protobuf:"varint,3,opt,name=percentage" json:"percentage,omitempty"`
}

func (m *GetMilesRequest) Reset()                    { *m = GetMilesRequest{} }
func (m *GetMilesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMilesRequest) ProtoMessage()               {}
func (*GetMilesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GetMilesResponse struct {
	Segment          []*GetMilesResponse_Segment `protobuf:"bytes,1,rep,name=segment" json:"segment,omitempty"`
	TotalMiles       uint32                      `protobuf:"varint,2,opt,name=total_miles" json:"total_miles,omitempty"`
	TotalActualMiles uint32                      `protobuf:"varint,3,opt,name=total_actual_miles" json:"total_actual_miles,omitempty"`
}

func (m *GetMilesResponse) Reset()                    { *m = GetMilesResponse{} }
func (m *GetMilesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMilesResponse) ProtoMessage()               {}
func (*GetMilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetMilesResponse) GetSegment() []*GetMilesResponse_Segment {
	if m != nil {
		return m.Segment
	}
	return nil
}

type GetMilesResponse_Segment struct {
	SourceAirportId      string `protobuf:"bytes,1,opt,name=source_airport_id" json:"source_airport_id,omitempty"`
	DestinationAirportId string `protobuf:"bytes,2,opt,name=destination_airport_id" json:"destination_airport_id,omitempty"`
	Miles                uint32 `protobuf:"varint,3,opt,name=miles" json:"miles,omitempty"`
	ActualMiles          uint32 `protobuf:"varint,4,opt,name=actual_miles" json:"actual_miles,omitempty"`
}

func (m *GetMilesResponse_Segment) Reset()                    { *m = GetMilesResponse_Segment{} }
func (m *GetMilesResponse_Segment) String() string            { return proto.CompactTextString(m) }
func (*GetMilesResponse_Segment) ProtoMessage()               {}
func (*GetMilesResponse_Segment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13, 0} }

func init() {
	proto.RegisterType((*CSVStore)(nil), "openflights.CSVStore")
	proto.RegisterType((*IDStore)(nil), "openflights.IDStore")
	proto.RegisterType((*Airport)(nil), "openflights.Airport")
	proto.RegisterType((*Airline)(nil), "openflights.Airline")
	proto.RegisterType((*Route)(nil), "openflights.Route")
	proto.RegisterType((*Airports)(nil), "openflights.Airports")
	proto.RegisterType((*Airlines)(nil), "openflights.Airlines")
	proto.RegisterType((*Routes)(nil), "openflights.Routes")
	proto.RegisterType((*GetAirportRequest)(nil), "openflights.GetAirportRequest")
	proto.RegisterType((*GetAirlineRequest)(nil), "openflights.GetAirlineRequest")
	proto.RegisterType((*GetRoutesRequest)(nil), "openflights.GetRoutesRequest")
	proto.RegisterType((*GetDistanceRequest)(nil), "openflights.GetDistanceRequest")
	proto.RegisterType((*GetMilesRequest)(nil), "openflights.GetMilesRequest")
	proto.RegisterType((*GetMilesResponse)(nil), "openflights.GetMilesResponse")
	proto.RegisterType((*GetMilesResponse_Segment)(nil), "openflights.GetMilesResponse.Segment")
	proto.RegisterEnum("openflights.DST", DST_name, DST_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	GetAllAirports(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (API_GetAllAirportsClient, error)
	GetAllAirlines(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (API_GetAllAirlinesClient, error)
	GetAllRoutes(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (API_GetAllRoutesClient, error)
	GetAirport(ctx context.Context, in *GetAirportRequest, opts ...grpc.CallOption) (*Airport, error)
	GetAirline(ctx context.Context, in *GetAirlineRequest, opts ...grpc.CallOption) (*Airline, error)
	GetRoutes(ctx context.Context, in *GetRoutesRequest, opts ...grpc.CallOption) (*Routes, error)
	GetDistance(ctx context.Context, in *GetDistanceRequest, opts ...grpc.CallOption) (*google_protobuf2.UInt32Value, error)
	GetMiles(ctx context.Context, in *GetMilesRequest, opts ...grpc.CallOption) (*GetMilesResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetAllAirports(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (API_GetAllAirportsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/openflights.API/GetAllAirports", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetAllAirportsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetAllAirportsClient interface {
	Recv() (*Airport, error)
	grpc.ClientStream
}

type aPIGetAllAirportsClient struct {
	grpc.ClientStream
}

func (x *aPIGetAllAirportsClient) Recv() (*Airport, error) {
	m := new(Airport)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetAllAirlines(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (API_GetAllAirlinesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[1], c.cc, "/openflights.API/GetAllAirlines", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetAllAirlinesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetAllAirlinesClient interface {
	Recv() (*Airline, error)
	grpc.ClientStream
}

type aPIGetAllAirlinesClient struct {
	grpc.ClientStream
}

func (x *aPIGetAllAirlinesClient) Recv() (*Airline, error) {
	m := new(Airline)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetAllRoutes(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (API_GetAllRoutesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[2], c.cc, "/openflights.API/GetAllRoutes", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetAllRoutesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetAllRoutesClient interface {
	Recv() (*Route, error)
	grpc.ClientStream
}

type aPIGetAllRoutesClient struct {
	grpc.ClientStream
}

func (x *aPIGetAllRoutesClient) Recv() (*Route, error) {
	m := new(Route)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetAirport(ctx context.Context, in *GetAirportRequest, opts ...grpc.CallOption) (*Airport, error) {
	out := new(Airport)
	err := grpc.Invoke(ctx, "/openflights.API/GetAirport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetAirline(ctx context.Context, in *GetAirlineRequest, opts ...grpc.CallOption) (*Airline, error) {
	out := new(Airline)
	err := grpc.Invoke(ctx, "/openflights.API/GetAirline", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetRoutes(ctx context.Context, in *GetRoutesRequest, opts ...grpc.CallOption) (*Routes, error) {
	out := new(Routes)
	err := grpc.Invoke(ctx, "/openflights.API/GetRoutes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetDistance(ctx context.Context, in *GetDistanceRequest, opts ...grpc.CallOption) (*google_protobuf2.UInt32Value, error) {
	out := new(google_protobuf2.UInt32Value)
	err := grpc.Invoke(ctx, "/openflights.API/GetDistance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetMiles(ctx context.Context, in *GetMilesRequest, opts ...grpc.CallOption) (*GetMilesResponse, error) {
	out := new(GetMilesResponse)
	err := grpc.Invoke(ctx, "/openflights.API/GetMiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	GetAllAirports(*google_protobuf1.Empty, API_GetAllAirportsServer) error
	GetAllAirlines(*google_protobuf1.Empty, API_GetAllAirlinesServer) error
	GetAllRoutes(*google_protobuf1.Empty, API_GetAllRoutesServer) error
	GetAirport(context.Context, *GetAirportRequest) (*Airport, error)
	GetAirline(context.Context, *GetAirlineRequest) (*Airline, error)
	GetRoutes(context.Context, *GetRoutesRequest) (*Routes, error)
	GetDistance(context.Context, *GetDistanceRequest) (*google_protobuf2.UInt32Value, error)
	GetMiles(context.Context, *GetMilesRequest) (*GetMilesResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetAllAirports_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetAllAirports(m, &aPIGetAllAirportsServer{stream})
}

type API_GetAllAirportsServer interface {
	Send(*Airport) error
	grpc.ServerStream
}

type aPIGetAllAirportsServer struct {
	grpc.ServerStream
}

func (x *aPIGetAllAirportsServer) Send(m *Airport) error {
	return x.ServerStream.SendMsg(m)
}

func _API_GetAllAirlines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetAllAirlines(m, &aPIGetAllAirlinesServer{stream})
}

type API_GetAllAirlinesServer interface {
	Send(*Airline) error
	grpc.ServerStream
}

type aPIGetAllAirlinesServer struct {
	grpc.ServerStream
}

func (x *aPIGetAllAirlinesServer) Send(m *Airline) error {
	return x.ServerStream.SendMsg(m)
}

func _API_GetAllRoutes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(google_protobuf1.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetAllRoutes(m, &aPIGetAllRoutesServer{stream})
}

type API_GetAllRoutesServer interface {
	Send(*Route) error
	grpc.ServerStream
}

type aPIGetAllRoutesServer struct {
	grpc.ServerStream
}

func (x *aPIGetAllRoutesServer) Send(m *Route) error {
	return x.ServerStream.SendMsg(m)
}

func _API_GetAirport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetAirportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetAirport(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetAirline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetAirlineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetAirline(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetRoutes(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetDistance(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _API_GetMiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetMilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).GetMiles(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openflights.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirport",
			Handler:    _API_GetAirport_Handler,
		},
		{
			MethodName: "GetAirline",
			Handler:    _API_GetAirline_Handler,
		},
		{
			MethodName: "GetRoutes",
			Handler:    _API_GetRoutes_Handler,
		},
		{
			MethodName: "GetDistance",
			Handler:    _API_GetDistance_Handler,
		},
		{
			MethodName: "GetMiles",
			Handler:    _API_GetMiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllAirports",
			Handler:       _API_GetAllAirports_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllAirlines",
			Handler:       _API_GetAllAirlines_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllRoutes",
			Handler:       _API_GetAllRoutes_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 1045 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0x66, 0xed, 0xd8, 0x6b, 0x1f, 0xdb, 0xc9, 0x7a, 0x52, 0xd2, 0xc5, 0xe4, 0x07, 0x16, 0x55,
	0xaa, 0x0a, 0xf2, 0x52, 0x57, 0xaa, 0xaa, 0x0a, 0x55, 0x8a, 0x9a, 0xa8, 0xf8, 0xa2, 0x09, 0xaa,
	0xdb, 0x5e, 0xe4, 0xc6, 0x4c, 0xd7, 0x63, 0x77, 0xc4, 0x7a, 0xc7, 0xec, 0x8c, 0x8b, 0x42, 0x94,
	0x0b, 0xb8, 0x44, 0xdc, 0xf1, 0x1e, 0x48, 0xdc, 0xf3, 0x16, 0xbc, 0x02, 0xe2, 0x31, 0x10, 0x33,
	0xb3, 0xb3, 0xf6, 0xae, 0xb3, 0x4e, 0x69, 0xaf, 0x3c, 0x3f, 0xe7, 0xfb, 0xce, 0xf9, 0xce, 0x9e,
	0x73, 0xc6, 0xd0, 0x66, 0x33, 0x12, 0x8d, 0x43, 0x3a, 0x79, 0x2d, 0x78, 0x77, 0x16, 0x33, 0xc1,
	0x50, 0x23, 0x73, 0xd4, 0xd9, 0x9d, 0x30, 0x36, 0x09, 0x89, 0x8f, 0x67, 0xd4, 0xc7, 0x51, 0xc4,
	0x04, 0x16, 0x94, 0x45, 0xc6, 0xb4, 0xf3, 0xb1, 0xb9, 0xd5, 0xbb, 0x57, 0xf3, 0xb1, 0x4f, 0xa6,
	0x33, 0x71, 0x6e, 0x2e, 0xf7, 0x57, 0x2f, 0x7f, 0x88, 0xf1, 0x6c, 0x46, 0x62, 0x03, 0xf6, 0x1e,
	0x41, 0xed, 0xf1, 0xe0, 0xe5, 0x40, 0xb0, 0x98, 0x20, 0x07, 0x6a, 0x98, 0xc6, 0x33, 0x16, 0x0b,
	0xee, 0x5a, 0x9f, 0x58, 0xb7, 0x9b, 0xe6, 0x24, 0xa4, 0x11, 0xe1, 0x6e, 0x49, 0x9f, 0x6c, 0x42,
	0x35, 0x66, 0x73, 0x21, 0xf7, 0x65, 0xb5, 0xf7, 0xfe, 0x2c, 0x81, 0xdd, 0x3f, 0x4a, 0xf0, 0x5f,
	0x41, 0x8b, 0x8e, 0x86, 0x82, 0x0d, 0x0d, 0x8b, 0x24, 0x29, 0xdf, 0x6e, 0xf4, 0x6e, 0x75, 0xb3,
	0xf2, 0x8c, 0x71, 0xb7, 0x3f, 0x7a, 0xce, 0x0e, 0x13, 0xbb, 0xe3, 0x48, 0xc4, 0xe7, 0x39, 0xb4,
	0xf2, 0x28, 0x1d, 0xbe, 0x15, 0xad, 0xec, 0x12, 0xf4, 0xa7, 0x50, 0xd1, 0x71, 0xc9, 0xb0, 0x14,
	0x0a, 0xe5, 0x50, 0xcf, 0xd4, 0x4d, 0xe7, 0x6b, 0x70, 0xae, 0x38, 0x6d, 0x40, 0xf9, 0x3b, 0x72,
	0xae, 0xd5, 0xd6, 0xd1, 0x67, 0x50, 0x79, 0x83, 0xc3, 0x39, 0xd1, 0x52, 0x1b, 0xbd, 0x1b, 0x39,
	0x0e, 0x03, 0x7b, 0x58, 0x7a, 0x60, 0x65, 0x98, 0x96, 0x01, 0xbc, 0x13, 0x93, 0x82, 0x29, 0x26,
	0xef, 0x5f, 0x0b, 0x6c, 0xc3, 0x8c, 0x00, 0x4a, 0x74, 0x64, 0x08, 0x9a, 0xb0, 0x11, 0xe1, 0x69,
	0x82, 0xd7, 0xbb, 0x80, 0x8a, 0x73, 0x9d, 0xf2, 0x3a, 0xda, 0x02, 0x3b, 0x60, 0x73, 0xe5, 0xd4,
	0xdd, 0xd0, 0x07, 0xf2, 0x2b, 0x51, 0x2c, 0xf0, 0x70, 0x8c, 0xb1, 0x5b, 0x49, 0x01, 0x34, 0xc0,
	0xcc, 0xad, 0xea, 0xdd, 0x4d, 0xd8, 0x0a, 0x65, 0xc5, 0x88, 0xf9, 0x88, 0x0c, 0xa7, 0x34, 0x88,
	0x19, 0x77, 0x6d, 0x79, 0xd1, 0x46, 0x2e, 0x38, 0x21, 0x8b, 0x26, 0xb9, 0x9b, 0x9a, 0xbe, 0xf9,
	0x10, 0x5a, 0x38, 0x34, 0x90, 0x31, 0x21, 0xc2, 0xad, 0xcb, 0xe3, 0x16, 0x3a, 0x80, 0x9b, 0x82,
	0x4e, 0xc9, 0x8f, 0x2c, 0x22, 0x43, 0x36, 0x1e, 0x73, 0x22, 0x24, 0x2c, 0xd2, 0xe5, 0x00, 0x1a,
	0xb7, 0x07, 0xe5, 0x11, 0x17, 0x6e, 0x43, 0x6e, 0x36, 0x7b, 0x4e, 0x4e, 0xf6, 0xd1, 0xe0, 0xb9,
	0x8a, 0x34, 0xc5, 0xbb, 0x4d, 0x15, 0x9b, 0xf7, 0x53, 0x92, 0x00, 0x95, 0x90, 0x6b, 0x12, 0xd0,
	0x82, 0x0a, 0x0e, 0x29, 0xe6, 0x26, 0x03, 0x4a, 0x9e, 0x14, 0x6c, 0xe4, 0xa7, 0x62, 0x2b, 0x69,
	0x32, 0x02, 0x1c, 0x86, 0x9c, 0x4e, 0x22, 0x23, 0x3f, 0x93, 0x2f, 0x5b, 0x1f, 0xc8, 0x1a, 0xc6,
	0x81, 0xa0, 0x6f, 0x88, 0x16, 0x5b, 0xf3, 0xfe, 0xb0, 0xa0, 0xa2, 0x4b, 0x04, 0xdd, 0x02, 0x3b,
	0xad, 0x3e, 0x6b, 0xfd, 0x97, 0x43, 0x5f, 0xc0, 0x26, 0x67, 0xf3, 0x38, 0x20, 0x8b, 0x4a, 0xbf,
	0xa6, 0x62, 0xd0, 0x5d, 0xd8, 0x1e, 0x11, 0x2e, 0x68, 0xa4, 0xbb, 0x76, 0x01, 0x29, 0x5f, 0x03,
	0x69, 0x43, 0x3d, 0x60, 0x12, 0xf4, 0x1a, 0xc7, 0x44, 0xab, 0xac, 0xa9, 0x14, 0x70, 0xc1, 0x66,
	0x5c, 0xcb, 0x6c, 0x79, 0x77, 0xa1, 0x66, 0x8c, 0xb9, 0x89, 0x3a, 0xd3, 0x71, 0x85, 0xa4, 0x06,
	0xa2, 0x9b, 0x39, 0x2f, 0xb4, 0xbc, 0x4e, 0xa8, 0xf7, 0x39, 0x54, 0x75, 0x62, 0xf8, 0xb2, 0xbf,
	0xac, 0x75, 0xfd, 0xe5, 0x1d, 0x40, 0xfb, 0x09, 0x11, 0xc6, 0xdb, 0x33, 0xf2, 0xfd, 0x5c, 0x8a,
	0xce, 0x7e, 0xd3, 0xa5, 0x81, 0xe2, 0x2e, 0x32, 0xc0, 0xe0, 0x48, 0x83, 0xc4, 0x63, 0x7a, 0x2f,
	0x0d, 0x4c, 0xa4, 0xc3, 0x45, 0x71, 0x7c, 0x04, 0xed, 0x7c, 0xfe, 0xd5, 0x55, 0x52, 0x29, 0xfb,
	0xb0, 0x53, 0x90, 0x6c, 0x75, 0xaf, 0x4b, 0xc7, 0x3b, 0x05, 0x24, 0x5d, 0x1c, 0x51, 0x2e, 0x70,
	0x14, 0x2c, 0x82, 0x28, 0x24, 0xb4, 0xde, 0x42, 0xa8, 0x1d, 0x7a, 0x4f, 0x60, 0x4b, 0x12, 0x3e,
	0xa5, 0xe1, 0x32, 0xe4, 0xd6, 0x32, 0x57, 0x8a, 0x41, 0x7e, 0x4c, 0xd9, 0x24, 0xb2, 0x51, 0x42,
	0x33, 0x45, 0x5b, 0x4a, 0x94, 0x9c, 0xc1, 0x01, 0x89, 0x04, 0x9e, 0x10, 0x1d, 0x59, 0xcb, 0xfb,
	0xc7, 0xd2, 0xea, 0x0d, 0x13, 0x9f, 0xc9, 0x01, 0x4f, 0xd0, 0x7d, 0xb0, 0x39, 0x99, 0x4c, 0xa5,
	0x61, 0xe1, 0x30, 0x5d, 0xb5, 0xef, 0x0e, 0x12, 0x63, 0xb4, 0x0d, 0x0d, 0x21, 0x9f, 0x89, 0x30,
	0xe7, 0xb5, 0x03, 0x28, 0x39, 0x94, 0xd5, 0x3f, 0x5f, 0xdc, 0x69, 0xef, 0x1d, 0x0a, 0x76, 0x8a,
	0x7d, 0xff, 0x64, 0x28, 0xe5, 0x19, 0x52, 0x74, 0x03, 0x9a, 0x39, 0x57, 0xaa, 0x92, 0x5b, 0x77,
	0xbe, 0x85, 0xb2, 0x9a, 0x05, 0x4d, 0xa8, 0xc9, 0x9f, 0xe1, 0xc9, 0xe9, 0xc9, 0xb1, 0xf3, 0x01,
	0xaa, 0x43, 0x45, 0xed, 0x0e, 0x1d, 0x2b, 0x5d, 0x1e, 0x3b, 0xa5, 0x74, 0x79, 0xe2, 0x94, 0xd3,
	0xe5, 0xa9, 0xb3, 0x91, 0x2e, 0x07, 0x4e, 0x25, 0x5d, 0xbe, 0x70, 0xaa, 0xe9, 0xf2, 0xcc, 0xb1,
	0x7b, 0xbf, 0x57, 0xa1, 0x7c, 0xf8, 0x4d, 0x1f, 0x0d, 0x60, 0x53, 0x15, 0x5c, 0x18, 0x2e, 0x5a,
	0x65, 0xa7, 0x9b, 0xbc, 0x87, 0xdd, 0xf4, 0x3d, 0xec, 0x1e, 0xab, 0xc7, 0xb2, 0x53, 0xdc, 0x31,
	0xed, 0x9f, 0xff, 0xfa, 0xfb, 0xb7, 0x52, 0x03, 0xd5, 0xfd, 0xf4, 0x5d, 0xfc, 0xd2, 0xca, 0x91,
	0x26, 0xcd, 0xf4, 0xbf, 0x49, 0x75, 0x4f, 0xe5, 0x48, 0x35, 0x81, 0x24, 0x7d, 0x0a, 0xcd, 0x84,
	0xd4, 0xb4, 0xdb, 0x3a, 0xca, 0xa2, 0xbe, 0xdb, 0xd2, 0x84, 0x75, 0x64, 0xfb, 0xc9, 0xcb, 0x2c,
	0xe9, 0xce, 0x00, 0x96, 0xad, 0x88, 0xf6, 0x57, 0x6b, 0x26, 0xdf, 0xa3, 0x6b, 0xc4, 0xef, 0x68,
	0x5a, 0x07, 0x6d, 0x2e, 0xc4, 0xfb, 0x17, 0x74, 0x74, 0xb9, 0xe4, 0xd6, 0xa3, 0xb0, 0x88, 0x3b,
	0xd3, 0xde, 0x6b, 0x72, 0x90, 0xe3, 0xd6, 0x39, 0x48, 0xb8, 0x7f, 0xb1, 0xa0, 0xbe, 0x98, 0x00,
	0x68, 0x6f, 0x95, 0x3b, 0x37, 0x19, 0x3a, 0xdb, 0x57, 0x73, 0xc1, 0xbd, 0xbe, 0x66, 0x7e, 0x8c,
	0x0e, 0x4d, 0x32, 0xfc, 0x8b, 0xe5, 0xf4, 0xb8, 0xf4, 0x2f, 0xae, 0x14, 0xb6, 0x3c, 0x2b, 0xae,
	0xe8, 0x4b, 0xf4, 0xab, 0x05, 0x8d, 0xcc, 0xac, 0x40, 0x07, 0xab, 0xe1, 0xac, 0x4c, 0x91, 0xce,
	0xee, 0x95, 0x8f, 0xf6, 0xa2, 0x1f, 0x89, 0x7b, 0xbd, 0x97, 0xea, 0xaf, 0x80, 0xf7, 0x48, 0x47,
	0xf6, 0x00, 0xdd, 0xf7, 0x47, 0x06, 0xf7, 0x6e, 0xe1, 0x9c, 0x41, 0x2d, 0x6d, 0x77, 0xb4, 0xbb,
	0x66, 0x0a, 0x24, 0x71, 0xec, 0x5d, 0x3b, 0x23, 0xd2, 0x02, 0xf4, 0xaa, 0xbe, 0xee, 0xca, 0x87,
	0xd6, 0x9d, 0x57, 0x55, 0x1d, 0xf1, 0xbd, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xc4, 0xef, 0x7b,
	0xb5, 0x89, 0x0a, 0x00, 0x00,
}
