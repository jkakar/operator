// Code generated by protoc-gen-go.
// source: google/protobuf/type.proto
// DO NOT EDIT!

package google_protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Syntax specifies the syntax in which a service element was defined.
type Syntax int32

const (
	// Syntax "proto2"
	Syntax_SYNTAX_PROTO2 Syntax = 0
	// Syntax "proto3"
	Syntax_SYNTAX_PROTO3 Syntax = 1
)

var Syntax_name = map[int32]string{
	0: "SYNTAX_PROTO2",
	1: "SYNTAX_PROTO3",
}
var Syntax_value = map[string]int32{
	"SYNTAX_PROTO2": 0,
	"SYNTAX_PROTO3": 1,
}

func (x Syntax) String() string {
	return proto.EnumName(Syntax_name, int32(x))
}
func (Syntax) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

// Kind represents a basic field type.
type Field_Kind int32

const (
	// Field type unknown.
	Field_TYPE_UNKNOWN Field_Kind = 0
	// Field type double.
	Field_TYPE_DOUBLE Field_Kind = 1
	// Field type float.
	Field_TYPE_FLOAT Field_Kind = 2
	// Field type int64.
	Field_TYPE_INT64 Field_Kind = 3
	// Field type uint64.
	Field_TYPE_UINT64 Field_Kind = 4
	// Field type int32.
	Field_TYPE_INT32 Field_Kind = 5
	// Field type fixed64.
	Field_TYPE_FIXED64 Field_Kind = 6
	// Field type fixed32.
	Field_TYPE_FIXED32 Field_Kind = 7
	// Field type bool.
	Field_TYPE_BOOL Field_Kind = 8
	// Field type string.
	Field_TYPE_STRING Field_Kind = 9
	// Field type group (deprecated proto2 type)
	Field_TYPE_GROUP Field_Kind = 10
	// Field type message.
	Field_TYPE_MESSAGE Field_Kind = 11
	// Field type bytes.
	Field_TYPE_BYTES Field_Kind = 12
	// Field type uint32.
	Field_TYPE_UINT32 Field_Kind = 13
	// Field type enum.
	Field_TYPE_ENUM Field_Kind = 14
	// Field type sfixed32.
	Field_TYPE_SFIXED32 Field_Kind = 15
	// Field type sfixed64.
	Field_TYPE_SFIXED64 Field_Kind = 16
	// Field type sint32.
	Field_TYPE_SINT32 Field_Kind = 17
	// Field type sint64.
	Field_TYPE_SINT64 Field_Kind = 18
)

var Field_Kind_name = map[int32]string{
	0:  "TYPE_UNKNOWN",
	1:  "TYPE_DOUBLE",
	2:  "TYPE_FLOAT",
	3:  "TYPE_INT64",
	4:  "TYPE_UINT64",
	5:  "TYPE_INT32",
	6:  "TYPE_FIXED64",
	7:  "TYPE_FIXED32",
	8:  "TYPE_BOOL",
	9:  "TYPE_STRING",
	10: "TYPE_GROUP",
	11: "TYPE_MESSAGE",
	12: "TYPE_BYTES",
	13: "TYPE_UINT32",
	14: "TYPE_ENUM",
	15: "TYPE_SFIXED32",
	16: "TYPE_SFIXED64",
	17: "TYPE_SINT32",
	18: "TYPE_SINT64",
}
var Field_Kind_value = map[string]int32{
	"TYPE_UNKNOWN":  0,
	"TYPE_DOUBLE":   1,
	"TYPE_FLOAT":    2,
	"TYPE_INT64":    3,
	"TYPE_UINT64":   4,
	"TYPE_INT32":    5,
	"TYPE_FIXED64":  6,
	"TYPE_FIXED32":  7,
	"TYPE_BOOL":     8,
	"TYPE_STRING":   9,
	"TYPE_GROUP":    10,
	"TYPE_MESSAGE":  11,
	"TYPE_BYTES":    12,
	"TYPE_UINT32":   13,
	"TYPE_ENUM":     14,
	"TYPE_SFIXED32": 15,
	"TYPE_SFIXED64": 16,
	"TYPE_SINT32":   17,
	"TYPE_SINT64":   18,
}

func (x Field_Kind) String() string {
	return proto.EnumName(Field_Kind_name, int32(x))
}
func (Field_Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1, 0} }

// Cardinality represents whether a field is optional, required, or
// repeated.
type Field_Cardinality int32

const (
	// The field cardinality is unknown. Typically an error condition.
	Field_CARDINALITY_UNKNOWN Field_Cardinality = 0
	// For optional fields.
	Field_CARDINALITY_OPTIONAL Field_Cardinality = 1
	// For required fields. Not used for proto3.
	Field_CARDINALITY_REQUIRED Field_Cardinality = 2
	// For repeated fields.
	Field_CARDINALITY_REPEATED Field_Cardinality = 3
)

var Field_Cardinality_name = map[int32]string{
	0: "CARDINALITY_UNKNOWN",
	1: "CARDINALITY_OPTIONAL",
	2: "CARDINALITY_REQUIRED",
	3: "CARDINALITY_REPEATED",
}
var Field_Cardinality_value = map[string]int32{
	"CARDINALITY_UNKNOWN":  0,
	"CARDINALITY_OPTIONAL": 1,
	"CARDINALITY_REQUIRED": 2,
	"CARDINALITY_REPEATED": 3,
}

func (x Field_Cardinality) String() string {
	return proto.EnumName(Field_Cardinality_name, int32(x))
}
func (Field_Cardinality) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1, 1} }

// A light-weight descriptor for a proto message type.
type Type struct {
	// The fully qualified message name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The list of fields.
	Fields []*Field `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
	// The list of oneof definitions.
	Oneofs []string `protobuf:"bytes,3,rep,name=oneofs" json:"oneofs,omitempty"`
	// The proto options.
	Options []*Option `protobuf:"bytes,4,rep,name=options" json:"options,omitempty"`
	// The source context.
	SourceContext *SourceContext `protobuf:"bytes,5,opt,name=source_context" json:"source_context,omitempty"`
	// The source syntax.
	Syntax Syntax `protobuf:"varint,6,opt,name=syntax,enum=google.protobuf.Syntax" json:"syntax,omitempty"`
}

func (m *Type) Reset()                    { *m = Type{} }
func (m *Type) String() string            { return proto.CompactTextString(m) }
func (*Type) ProtoMessage()               {}
func (*Type) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *Type) GetFields() []*Field {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *Type) GetOptions() []*Option {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Type) GetSourceContext() *SourceContext {
	if m != nil {
		return m.SourceContext
	}
	return nil
}

// Field represents a single field of a message type.
type Field struct {
	// The field kind.
	Kind Field_Kind `protobuf:"varint,1,opt,name=kind,enum=google.protobuf.Field_Kind" json:"kind,omitempty"`
	// The field cardinality, i.e. optional/required/repeated.
	Cardinality Field_Cardinality `protobuf:"varint,2,opt,name=cardinality,enum=google.protobuf.Field_Cardinality" json:"cardinality,omitempty"`
	// The proto field number.
	Number int32 `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	// The field name.
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// The type URL (without the scheme) when the type is MESSAGE or ENUM,
	// such as `type.googleapis.com/google.protobuf.Empty`.
	TypeUrl string `protobuf:"bytes,6,opt,name=type_url" json:"type_url,omitempty"`
	// Index in Type.oneofs. Starts at 1. Zero means no oneof mapping.
	OneofIndex int32 `protobuf:"varint,7,opt,name=oneof_index" json:"oneof_index,omitempty"`
	// Whether to use alternative packed wire representation.
	Packed bool `protobuf:"varint,8,opt,name=packed" json:"packed,omitempty"`
	// The proto options.
	Options []*Option `protobuf:"bytes,9,rep,name=options" json:"options,omitempty"`
	// The JSON name for this field.
	JsonName string `protobuf:"bytes,10,opt,name=json_name" json:"json_name,omitempty"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (m *Field) String() string            { return proto.CompactTextString(m) }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *Field) GetOptions() []*Option {
	if m != nil {
		return m.Options
	}
	return nil
}

// Enum type definition.
type Enum struct {
	// Enum type name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Enum value definitions.
	Enumvalue []*EnumValue `protobuf:"bytes,2,rep,name=enumvalue" json:"enumvalue,omitempty"`
	// Proto options for the enum type.
	Options []*Option `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
	// The source context.
	SourceContext *SourceContext `protobuf:"bytes,4,opt,name=source_context" json:"source_context,omitempty"`
	// The source syntax.
	Syntax Syntax `protobuf:"varint,5,opt,name=syntax,enum=google.protobuf.Syntax" json:"syntax,omitempty"`
}

func (m *Enum) Reset()                    { *m = Enum{} }
func (m *Enum) String() string            { return proto.CompactTextString(m) }
func (*Enum) ProtoMessage()               {}
func (*Enum) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *Enum) GetEnumvalue() []*EnumValue {
	if m != nil {
		return m.Enumvalue
	}
	return nil
}

func (m *Enum) GetOptions() []*Option {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Enum) GetSourceContext() *SourceContext {
	if m != nil {
		return m.SourceContext
	}
	return nil
}

// Enum value definition.
type EnumValue struct {
	// Enum value name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Enum value number.
	Number int32 `protobuf:"varint,2,opt,name=number" json:"number,omitempty"`
	// Proto options for the enum value.
	Options []*Option `protobuf:"bytes,3,rep,name=options" json:"options,omitempty"`
}

func (m *EnumValue) Reset()                    { *m = EnumValue{} }
func (m *EnumValue) String() string            { return proto.CompactTextString(m) }
func (*EnumValue) ProtoMessage()               {}
func (*EnumValue) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *EnumValue) GetOptions() []*Option {
	if m != nil {
		return m.Options
	}
	return nil
}

// Proto option attached to messages/fields/enums etc.
type Option struct {
	// Proto option name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Proto option value.
	Value *Any `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Option) Reset()                    { *m = Option{} }
func (m *Option) String() string            { return proto.CompactTextString(m) }
func (*Option) ProtoMessage()               {}
func (*Option) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *Option) GetValue() *Any {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Type)(nil), "google.protobuf.Type")
	proto.RegisterType((*Field)(nil), "google.protobuf.Field")
	proto.RegisterType((*Enum)(nil), "google.protobuf.Enum")
	proto.RegisterType((*EnumValue)(nil), "google.protobuf.EnumValue")
	proto.RegisterType((*Option)(nil), "google.protobuf.Option")
	proto.RegisterEnum("google.protobuf.Syntax", Syntax_name, Syntax_value)
	proto.RegisterEnum("google.protobuf.Field_Kind", Field_Kind_name, Field_Kind_value)
	proto.RegisterEnum("google.protobuf.Field_Cardinality", Field_Cardinality_name, Field_Cardinality_value)
}

var fileDescriptor8 = []byte{
	// 698 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x41, 0x6f, 0xda, 0x4c,
	0x10, 0xfd, 0x0c, 0xb6, 0x83, 0xc7, 0x09, 0xd9, 0x38, 0xd1, 0x17, 0x97, 0x4a, 0x51, 0xe4, 0x56,
	0x2d, 0xad, 0x54, 0x22, 0x91, 0x2a, 0x3d, 0xf4, 0x64, 0x82, 0x83, 0xac, 0x10, 0xdb, 0xc5, 0xa6,
	0x09, 0x27, 0xe4, 0x80, 0x13, 0xd1, 0x38, 0x5e, 0x84, 0x4d, 0x0b, 0xff, 0xa6, 0xea, 0xb1, 0x3f,
	0xa2, 0xe7, 0x9e, 0x7a, 0xed, 0xdf, 0xe9, 0x7a, 0x1d, 0x0c, 0x98, 0x34, 0x6a, 0x6e, 0xec, 0xbc,
	0x37, 0xf3, 0xde, 0x3e, 0xef, 0x00, 0xa5, 0x6b, 0x8c, 0xaf, 0x7d, 0xef, 0x60, 0x38, 0xc2, 0x11,
	0xbe, 0x1c, 0x5f, 0x1d, 0x44, 0xd3, 0xa1, 0x57, 0xa1, 0x27, 0x69, 0x33, 0xc1, 0x2a, 0x33, 0xac,
	0xf4, 0x24, 0x4b, 0x76, 0x83, 0x69, 0x82, 0x96, 0x9e, 0x67, 0xa1, 0x10, 0x8f, 0x47, 0x3d, 0xaf,
	0xdb, 0xc3, 0x41, 0xe4, 0x4d, 0xa2, 0x84, 0xa5, 0xfc, 0x66, 0x80, 0x75, 0x88, 0x80, 0xb4, 0x0e,
	0x6c, 0xe0, 0xde, 0x7a, 0x32, 0xb3, 0xcf, 0x94, 0x05, 0xe9, 0x05, 0xf0, 0x57, 0x03, 0xcf, 0xef,
	0x87, 0x72, 0x6e, 0x3f, 0x5f, 0x16, 0xab, 0xff, 0x57, 0x32, 0xca, 0x95, 0x93, 0x18, 0x96, 0x8a,
	0xc0, 0xe3, 0xc0, 0xc3, 0x57, 0xa1, 0x9c, 0x27, 0x3c, 0x41, 0x2a, 0xc3, 0x1a, 0x1e, 0x46, 0x03,
	0x1c, 0x84, 0x32, 0x4b, 0x1b, 0x77, 0x57, 0x1a, 0x4d, 0x8a, 0x4b, 0x47, 0x50, 0x5c, 0x36, 0x24,
	0x73, 0x44, 0x59, 0xac, 0xee, 0xad, 0x34, 0xd8, 0x94, 0x76, 0x9c, 0xb0, 0xa4, 0x97, 0xc0, 0x87,
	0xd3, 0x20, 0x72, 0x27, 0x32, 0x4f, 0xf8, 0xc5, 0x7b, 0x04, 0x6c, 0x0a, 0x2b, 0x3f, 0x38, 0xe0,
	0x12, 0x93, 0xaf, 0x80, 0xbd, 0x19, 0x04, 0x7d, 0x7a, 0xb5, 0x62, 0xf5, 0xe9, 0xfd, 0x57, 0xa9,
	0x9c, 0x12, 0x8a, 0xf4, 0x0e, 0xc4, 0x9e, 0x3b, 0xea, 0x0f, 0x02, 0xd7, 0x1f, 0x44, 0x53, 0x72,
	0xf9, 0xb8, 0x43, 0xf9, 0x4b, 0xc7, 0xf1, 0x9c, 0x19, 0x07, 0x11, 0x8c, 0x6f, 0x2f, 0xbd, 0x11,
	0x09, 0x82, 0x29, 0x73, 0x69, 0x9c, 0x2c, 0x8d, 0x13, 0x41, 0x21, 0xfe, 0x8a, 0xdd, 0xf1, 0xc8,
	0xa7, 0xb6, 0x05, 0x69, 0x1b, 0x44, 0x1a, 0x5c, 0x97, 0xa8, 0x7a, 0x13, 0x79, 0x8d, 0x36, 0x91,
	0x21, 0x43, 0xb7, 0x77, 0xe3, 0xf5, 0xe5, 0x02, 0x39, 0x17, 0x16, 0xd3, 0x14, 0x1e, 0x4e, 0x73,
	0x0b, 0x84, 0x4f, 0x21, 0x0e, 0xba, 0x54, 0x13, 0x62, 0x05, 0xe5, 0x67, 0x0e, 0x58, 0x7a, 0x27,
	0x04, 0xeb, 0x4e, 0xc7, 0xd2, 0xba, 0x6d, 0xe3, 0xd4, 0x30, 0xcf, 0x0d, 0xf4, 0x9f, 0xb4, 0x09,
	0x22, 0xad, 0xd4, 0xcd, 0x76, 0xad, 0xa9, 0x21, 0x86, 0x08, 0x03, 0x2d, 0x9c, 0x34, 0x4d, 0xd5,
	0x41, 0xb9, 0xf4, 0xac, 0x1b, 0xce, 0xd1, 0x5b, 0x94, 0x4f, 0x1b, 0xda, 0x49, 0x81, 0x5d, 0x24,
	0x1c, 0x56, 0x11, 0x97, 0x6a, 0x9c, 0xe8, 0x17, 0x5a, 0x9d, 0x30, 0xf8, 0xe5, 0x0a, 0xe1, 0xac,
	0x49, 0x1b, 0x20, 0xd0, 0x4a, 0xcd, 0x34, 0x9b, 0xa8, 0x90, 0xce, 0xb4, 0x9d, 0x96, 0x6e, 0x34,
	0x90, 0x90, 0xce, 0x6c, 0xb4, 0xcc, 0xb6, 0x85, 0x20, 0x9d, 0x70, 0xa6, 0xd9, 0xb6, 0xda, 0xd0,
	0x90, 0x98, 0x32, 0x6a, 0x1d, 0x47, 0xb3, 0xd1, 0xfa, 0x92, 0x2d, 0x22, 0xb1, 0x91, 0x4a, 0x68,
	0x46, 0xfb, 0x0c, 0x15, 0x49, 0x2a, 0x1b, 0x89, 0xc4, 0xcc, 0xc4, 0x66, 0xa6, 0x44, 0x9c, 0xa2,
	0xb9, 0x91, 0x64, 0xca, 0xd6, 0x52, 0x81, 0x30, 0x24, 0x25, 0x02, 0x71, 0xf1, 0x5b, 0xef, 0xc2,
	0xf6, 0xb1, 0xda, 0xaa, 0xeb, 0x86, 0xda, 0xd4, 0x9d, 0xce, 0x42, 0xae, 0x32, 0xec, 0x2c, 0x02,
	0xa6, 0xe5, 0xe8, 0x26, 0xf9, 0x4d, 0x02, 0xce, 0x20, 0x2d, 0xed, 0x43, 0x5b, 0x6f, 0x69, 0x75,
	0x12, 0xf5, 0x0a, 0x62, 0x69, 0xaa, 0x43, 0x90, 0xbc, 0xf2, 0x8b, 0xac, 0xa6, 0x46, 0x1e, 0x55,
	0x66, 0x35, 0xdf, 0x80, 0xe0, 0x91, 0xea, 0x67, 0xd7, 0x1f, 0x7b, 0x77, 0xdb, 0x59, 0x5a, 0x79,
	0x16, 0x71, 0xdf, 0xc7, 0x98, 0xb1, 0xf8, 0x86, 0xf2, 0x8f, 0xdd, 0x48, 0xf6, 0x91, 0x1b, 0xc9,
	0x3d, 0xbc, 0x91, 0x36, 0x08, 0x73, 0x5f, 0xcb, 0x97, 0x9a, 0xaf, 0x4f, 0x8e, 0x6e, 0xc2, 0x3f,
	0xbb, 0x56, 0xde, 0x03, 0x7f, 0xe7, 0x7f, 0x79, 0xe2, 0x33, 0xe0, 0x66, 0x11, 0xc5, 0x97, 0xd8,
	0x59, 0xe9, 0x57, 0x83, 0xe9, 0xeb, 0x0a, 0xf0, 0x89, 0xb7, 0xf8, 0x5d, 0xd8, 0x1d, 0xc3, 0x51,
	0x2f, 0xba, 0x56, 0xcb, 0x74, 0xcc, 0x2a, 0xf9, 0x9a, 0x99, 0xd2, 0x21, 0x62, 0x6a, 0x4d, 0xd8,
	0xee, 0xe1, 0xdb, 0xec, 0xa8, 0x9a, 0x10, 0xff, 0x83, 0x5a, 0xf1, 0xc9, 0x62, 0xbe, 0x32, 0xcc,
	0xb7, 0x5c, 0xbe, 0x61, 0xd5, 0xbe, 0xe7, 0xf6, 0x1a, 0x09, 0xcf, 0x9a, 0x49, 0x9e, 0x7b, 0xbe,
	0x7f, 0x1a, 0xe0, 0x2f, 0x41, 0xcc, 0x0f, 0x2f, 0x79, 0x3a, 0xe0, 0xf0, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x7e, 0x54, 0x85, 0xba, 0xf2, 0x05, 0x00, 0x00,
}
