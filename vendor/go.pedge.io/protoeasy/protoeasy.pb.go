// Code generated by protoc-gen-go.
// source: protoeasy.proto
// DO NOT EDIT!

package protoeasy

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "go.pedge.io/google-protobuf"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type GoPluginType int32

const (
	GoPluginType_GO_PLUGIN_TYPE_NONE   GoPluginType = 0
	GoPluginType_GO_PLUGIN_TYPE_GO     GoPluginType = 1
	GoPluginType_GO_PLUGIN_TYPE_GOFAST GoPluginType = 2
)

var GoPluginType_name = map[int32]string{
	0: "GO_PLUGIN_TYPE_NONE",
	1: "GO_PLUGIN_TYPE_GO",
	2: "GO_PLUGIN_TYPE_GOFAST",
}
var GoPluginType_value = map[string]int32{
	"GO_PLUGIN_TYPE_NONE":   0,
	"GO_PLUGIN_TYPE_GO":     1,
	"GO_PLUGIN_TYPE_GOFAST": 2,
}

func (x GoPluginType) String() string {
	return proto.EnumName(GoPluginType_name, int32(x))
}
func (GoPluginType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GogoPluginType int32

const (
	GogoPluginType_GOGO_PLUGIN_TYPE_NONE       GogoPluginType = 0
	GogoPluginType_GOGO_PLUGIN_TYPE_GOGO       GogoPluginType = 1
	GogoPluginType_GOGO_PLUGIN_TYPE_GOGOFAST   GogoPluginType = 2
	GogoPluginType_GOGO_PLUGIN_TYPE_GOGOFASTER GogoPluginType = 3
	GogoPluginType_GOGO_PLUGIN_TYPE_GOGOSLICK  GogoPluginType = 4
)

var GogoPluginType_name = map[int32]string{
	0: "GOGO_PLUGIN_TYPE_NONE",
	1: "GOGO_PLUGIN_TYPE_GOGO",
	2: "GOGO_PLUGIN_TYPE_GOGOFAST",
	3: "GOGO_PLUGIN_TYPE_GOGOFASTER",
	4: "GOGO_PLUGIN_TYPE_GOGOSLICK",
}
var GogoPluginType_value = map[string]int32{
	"GOGO_PLUGIN_TYPE_NONE":       0,
	"GOGO_PLUGIN_TYPE_GOGO":       1,
	"GOGO_PLUGIN_TYPE_GOGOFAST":   2,
	"GOGO_PLUGIN_TYPE_GOGOFASTER": 3,
	"GOGO_PLUGIN_TYPE_GOGOSLICK":  4,
}

func (x GogoPluginType) String() string {
	return proto.EnumName(GogoPluginType_name, int32(x))
}
func (GogoPluginType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CompileOptions struct {
	Grpc                        bool              `protobuf:"varint,1,opt,name=grpc" json:"grpc,omitempty"`
	GrpcGateway                 bool              `protobuf:"varint,2,opt,name=grpc_gateway" json:"grpc_gateway,omitempty"`
	NoDefaultIncludes           bool              `protobuf:"varint,3,opt,name=no_default_includes" json:"no_default_includes,omitempty"`
	ExcludePattern              []string          `protobuf:"bytes,4,rep,name=exclude_pattern" json:"exclude_pattern,omitempty"`
	RelContext                  string            `protobuf:"bytes,5,opt,name=rel_context" json:"rel_context,omitempty"`
	Cpp                         bool              `protobuf:"varint,20,opt,name=cpp" json:"cpp,omitempty"`
	CppRelOut                   string            `protobuf:"bytes,21,opt,name=cpp_rel_out" json:"cpp_rel_out,omitempty"`
	Csharp                      bool              `protobuf:"varint,30,opt,name=csharp" json:"csharp,omitempty"`
	CsharpRelOut                string            `protobuf:"bytes,31,opt,name=csharp_rel_out" json:"csharp_rel_out,omitempty"`
	Go                          bool              `protobuf:"varint,40,opt,name=go" json:"go,omitempty"`
	GoPluginType                GoPluginType      `protobuf:"varint,41,opt,name=go_plugin_type,enum=protoeasy.GoPluginType" json:"go_plugin_type,omitempty"`
	GoRelOut                    string            `protobuf:"bytes,42,opt,name=go_rel_out" json:"go_rel_out,omitempty"`
	GoImportPath                string            `protobuf:"bytes,43,opt,name=go_import_path" json:"go_import_path,omitempty"`
	GoNoDefaultModifiers        bool              `protobuf:"varint,44,opt,name=go_no_default_modifiers" json:"go_no_default_modifiers,omitempty"`
	GoModifiers                 map[string]string `protobuf:"bytes,45,rep,name=go_modifiers" json:"go_modifiers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Gogo                        bool              `protobuf:"varint,50,opt,name=gogo" json:"gogo,omitempty"`
	GogoPluginType              GogoPluginType    `protobuf:"varint,51,opt,name=gogo_plugin_type,enum=protoeasy.GogoPluginType" json:"gogo_plugin_type,omitempty"`
	GogoRelOut                  string            `protobuf:"bytes,52,opt,name=gogo_rel_out" json:"gogo_rel_out,omitempty"`
	GogoImportPath              string            `protobuf:"bytes,53,opt,name=gogo_import_path" json:"gogo_import_path,omitempty"`
	GogoNoDefaultModifiers      bool              `protobuf:"varint,54,opt,name=gogo_no_default_modifiers" json:"gogo_no_default_modifiers,omitempty"`
	GogoModifiers               map[string]string `protobuf:"bytes,55,rep,name=gogo_modifiers" json:"gogo_modifiers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Objc                        bool              `protobuf:"varint,60,opt,name=objc" json:"objc,omitempty"`
	ObjcRelOut                  string            `protobuf:"bytes,61,opt,name=objc_rel_out" json:"objc_rel_out,omitempty"`
	Python                      bool              `protobuf:"varint,70,opt,name=python" json:"python,omitempty"`
	PythonRelOut                string            `protobuf:"bytes,71,opt,name=python_rel_out" json:"python_rel_out,omitempty"`
	Ruby                        bool              `protobuf:"varint,80,opt,name=ruby" json:"ruby,omitempty"`
	RubyRelOut                  string            `protobuf:"bytes,81,opt,name=ruby_rel_out" json:"ruby_rel_out,omitempty"`
	DescriptorSet               bool              `protobuf:"varint,90,opt,name=descriptor_set" json:"descriptor_set,omitempty"`
	DescriptorSetRelOut         string            `protobuf:"bytes,91,opt,name=descriptor_set_rel_out" json:"descriptor_set_rel_out,omitempty"`
	DescriptorSetFileName       string            `protobuf:"bytes,92,opt,name=descriptor_set_file_name" json:"descriptor_set_file_name,omitempty"`
	DescriptorSetIncludeImports bool              `protobuf:"varint,93,opt,name=descriptor_set_include_imports" json:"descriptor_set_include_imports,omitempty"`
	OperatorHubot               bool              `protobuf:"varint,100,opt,name=operator_hubot" json:"operator_hubot,omitempty"`
	OperatorHubotOut            string            `protobuf:"bytes,101,opt,name=operator_hubot_out" json:"operator_hubot_out,omitempty"`
}

func (m *CompileOptions) Reset()                    { *m = CompileOptions{} }
func (m *CompileOptions) String() string            { return proto.CompactTextString(m) }
func (*CompileOptions) ProtoMessage()               {}
func (*CompileOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CompileOptions) GetGoModifiers() map[string]string {
	if m != nil {
		return m.GoModifiers
	}
	return nil
}

func (m *CompileOptions) GetGogoModifiers() map[string]string {
	if m != nil {
		return m.GogoModifiers
	}
	return nil
}

type Command struct {
	Arg []string `protobuf:"bytes,1,rep,name=arg" json:"arg,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CompileInfo struct {
	Command         []*Command                `protobuf:"bytes,1,rep,name=command" json:"command,omitempty"`
	InputSizeBytes  uint64                    `protobuf:"varint,2,opt,name=input_size_bytes" json:"input_size_bytes,omitempty"`
	OutputSizeBytes uint64                    `protobuf:"varint,3,opt,name=output_size_bytes" json:"output_size_bytes,omitempty"`
	Duration        *google_protobuf.Duration `protobuf:"bytes,4,opt,name=duration" json:"duration,omitempty"`
}

func (m *CompileInfo) Reset()                    { *m = CompileInfo{} }
func (m *CompileInfo) String() string            { return proto.CompactTextString(m) }
func (*CompileInfo) ProtoMessage()               {}
func (*CompileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CompileInfo) GetCommand() []*Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (m *CompileInfo) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

type CompileRequest struct {
	Tar            []byte          `protobuf:"bytes,1,opt,name=tar,proto3" json:"tar,omitempty"`
	CompileOptions *CompileOptions `protobuf:"bytes,2,opt,name=compile_options" json:"compile_options,omitempty"`
}

func (m *CompileRequest) Reset()                    { *m = CompileRequest{} }
func (m *CompileRequest) String() string            { return proto.CompactTextString(m) }
func (*CompileRequest) ProtoMessage()               {}
func (*CompileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CompileRequest) GetCompileOptions() *CompileOptions {
	if m != nil {
		return m.CompileOptions
	}
	return nil
}

type CompileResponse struct {
	Tar         []byte       `protobuf:"bytes,1,opt,name=tar,proto3" json:"tar,omitempty"`
	CompileInfo *CompileInfo `protobuf:"bytes,2,opt,name=compile_info" json:"compile_info,omitempty"`
}

func (m *CompileResponse) Reset()                    { *m = CompileResponse{} }
func (m *CompileResponse) String() string            { return proto.CompactTextString(m) }
func (*CompileResponse) ProtoMessage()               {}
func (*CompileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CompileResponse) GetCompileInfo() *CompileInfo {
	if m != nil {
		return m.CompileInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*CompileOptions)(nil), "protoeasy.CompileOptions")
	proto.RegisterType((*Command)(nil), "protoeasy.Command")
	proto.RegisterType((*CompileInfo)(nil), "protoeasy.CompileInfo")
	proto.RegisterType((*CompileRequest)(nil), "protoeasy.CompileRequest")
	proto.RegisterType((*CompileResponse)(nil), "protoeasy.CompileResponse")
	proto.RegisterEnum("protoeasy.GoPluginType", GoPluginType_name, GoPluginType_value)
	proto.RegisterEnum("protoeasy.GogoPluginType", GogoPluginType_name, GogoPluginType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for API service

type APIClient interface {
	Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) Compile(ctx context.Context, in *CompileRequest, opts ...grpc.CallOption) (*CompileResponse, error) {
	out := new(CompileResponse)
	err := grpc.Invoke(ctx, "/protoeasy.API/Compile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	Compile(context.Context, *CompileRequest) (*CompileResponse, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CompileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(APIServer).Compile(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoeasy.API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compile",
			Handler:    _API_Compile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 823 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x54, 0xed, 0x72, 0xdb, 0x44,
	0x14, 0xad, 0xe3, 0xb4, 0x8d, 0xaf, 0x8d, 0xe3, 0x6e, 0x1a, 0x67, 0xed, 0x0e, 0x69, 0x30, 0x33,
	0x4c, 0x48, 0x83, 0x33, 0xe3, 0x94, 0x8f, 0x61, 0x60, 0x86, 0xd2, 0xa6, 0x1e, 0x0f, 0x21, 0x71,
	0xdb, 0xf0, 0xa3, 0x7c, 0xcc, 0x8e, 0x2c, 0xaf, 0x15, 0x81, 0xad, 0x5d, 0xa4, 0x15, 0x54, 0xfc,
	0xe3, 0x1d, 0x78, 0x06, 0x9e, 0x93, 0xbb, 0x57, 0x96, 0xb0, 0x1c, 0x41, 0xff, 0x69, 0xcf, 0x39,
	0x3a, 0xbb, 0xe7, 0xde, 0xbd, 0x0b, 0xdb, 0x3a, 0x54, 0x46, 0x49, 0x27, 0x4a, 0xfa, 0xf4, 0xc5,
	0x6a, 0x39, 0xd0, 0xdd, 0xf7, 0x94, 0xf2, 0xe6, 0xf2, 0x84, 0x90, 0x49, 0x3c, 0x3b, 0x99, 0xc6,
	0xa1, 0x63, 0x7c, 0x15, 0xa4, 0xd2, 0xde, 0x9f, 0x5b, 0xd0, 0x7c, 0xaa, 0x16, 0xda, 0x9f, 0xcb,
	0x4b, 0x6d, 0xf1, 0x88, 0x35, 0x60, 0xd3, 0x0b, 0xb5, 0xcb, 0x2b, 0x07, 0x95, 0xc3, 0x2d, 0x76,
	0x1f, 0x1a, 0x76, 0x25, 0x3c, 0xc7, 0xc8, 0xdf, 0x9d, 0x84, 0x6f, 0x10, 0xfa, 0x00, 0x76, 0x02,
	0x25, 0xa6, 0x72, 0xe6, 0xc4, 0x73, 0x23, 0xfc, 0xc0, 0x9d, 0xc7, 0x53, 0x19, 0xf1, 0x2a, 0x91,
	0x7b, 0xb0, 0x2d, 0xdf, 0x10, 0x22, 0xb4, 0x63, 0x8c, 0x0c, 0x03, 0xbe, 0x79, 0x50, 0x3d, 0xac,
	0xb1, 0x1d, 0xa8, 0x87, 0x72, 0x2e, 0x5c, 0x15, 0x18, 0xf9, 0xc6, 0xf0, 0xdb, 0xa8, 0xae, 0xb1,
	0x3a, 0x54, 0x5d, 0xad, 0xf9, 0x7d, 0xfa, 0x15, 0x15, 0xb8, 0x10, 0x56, 0xa5, 0x62, 0xc3, 0x77,
	0x49, 0xd1, 0x84, 0x3b, 0x6e, 0x74, 0xed, 0x84, 0x9a, 0xef, 0x93, 0xa8, 0x0d, 0xcd, 0x74, 0x9d,
	0xeb, 0x1e, 0x92, 0x0e, 0x60, 0xc3, 0x53, 0xfc, 0x90, 0x34, 0x27, 0xd0, 0xf4, 0x94, 0xd0, 0xf3,
	0xd8, 0xf3, 0x03, 0x61, 0x12, 0x2d, 0xf9, 0x87, 0x88, 0x37, 0x07, 0x7b, 0xfd, 0x7f, 0x8b, 0x35,
	0x54, 0x63, 0xe2, 0xaf, 0x90, 0x66, 0xf8, 0x37, 0xfe, 0x90, 0x19, 0x1e, 0x91, 0x61, 0x9b, 0x4c,
	0xfc, 0x85, 0x56, 0xa1, 0xb1, 0x51, 0xae, 0xf9, 0x23, 0xc2, 0x1f, 0xc2, 0x1e, 0xe2, 0x2b, 0x05,
	0x58, 0xa8, 0xa9, 0x3f, 0xf3, 0x65, 0x18, 0xf1, 0x63, 0xda, 0xfd, 0x2b, 0x2c, 0x9a, 0x5a, 0x41,
	0x3f, 0xc2, 0xf8, 0xf5, 0xc1, 0xd1, 0xca, 0xde, 0xc5, 0x9a, 0xe3, 0x51, 0xbe, 0xcd, 0xc4, 0x67,
	0x81, 0x09, 0x13, 0x6a, 0x82, 0xc2, 0x34, 0x03, 0xf2, 0x3b, 0x85, 0x96, 0x5d, 0x15, 0xf2, 0x9c,
	0x52, 0x9e, 0x4e, 0x21, 0x8f, 0xb7, 0x9a, 0xc8, 0x76, 0x4e, 0xad, 0x64, 0x7a, 0x4c, 0x67, 0xe7,
	0x4b, 0xab, 0xd5, 0x54, 0x1f, 0x13, 0xf3, 0x1e, 0x74, 0x88, 0x29, 0xcd, 0xf5, 0x09, 0x9d, 0xe3,
	0x99, 0x2d, 0x48, 0x21, 0xd9, 0xa7, 0x94, 0xec, 0xf8, 0xff, 0x92, 0x79, 0x25, 0xd9, 0xd4, 0xe4,
	0x67, 0x97, 0x7f, 0x91, 0x5d, 0x30, 0xbb, 0xca, 0x8f, 0xf9, 0x65, 0xd6, 0x73, 0x9d, 0x98, 0x6b,
	0x15, 0xf0, 0xe7, 0x59, 0xcf, 0xd3, 0x75, 0xae, 0x1b, 0x92, 0x0e, 0xbd, 0xc2, 0x78, 0x92, 0xf0,
	0x71, 0xe6, 0x65, 0x57, 0xb9, 0xe6, 0x45, 0xd6, 0x46, 0xbc, 0x9c, 0x6e, 0xe8, 0x6b, 0xa3, 0x42,
	0x11, 0x49, 0xc3, 0xbf, 0x27, 0xf5, 0x3e, 0xb4, 0x8b, 0x78, 0xfe, 0xdf, 0x0f, 0xf4, 0xdf, 0x01,
	0xf0, 0x35, 0x7e, 0x86, 0xc1, 0x44, 0xe0, 0x2c, 0x24, 0xff, 0x91, 0x14, 0x1f, 0xc0, 0xfe, 0x9a,
	0x62, 0x39, 0x0a, 0xcb, 0xf2, 0x46, 0xfc, 0xa7, 0xec, 0xf4, 0x4a, 0x4b, 0x1c, 0x3c, 0x54, 0x5d,
	0xc7, 0x13, 0x65, 0xf8, 0x94, 0xf0, 0x2e, 0xb0, 0x22, 0x4e, 0xbb, 0x4b, 0xeb, 0xdd, 0x1d, 0x40,
	0xeb, 0xc6, 0xad, 0xc0, 0x59, 0xf9, 0x45, 0x26, 0x34, 0x99, 0x35, 0xf6, 0x0e, 0xdc, 0xfe, 0xcd,
	0x99, 0xc7, 0x92, 0x46, 0xb2, 0xf6, 0xf9, 0xc6, 0x67, 0x95, 0xee, 0x63, 0x60, 0x25, 0xf5, 0x7e,
	0xcb, 0x5f, 0xbd, 0x36, 0xdc, 0xc5, 0xa6, 0x2d, 0x9c, 0x60, 0x6a, 0xa5, 0x4e, 0xe8, 0xa1, 0x14,
	0xc7, 0xb5, 0xf7, 0x57, 0x05, 0xea, 0xcb, 0x6e, 0x8e, 0x82, 0x99, 0x62, 0xef, 0xc3, 0x5d, 0x37,
	0xd5, 0x91, 0xa0, 0x3e, 0x60, 0xc5, 0xb6, 0x93, 0x03, 0xde, 0x2f, 0x3f, 0xd0, 0xb1, 0x11, 0x91,
	0xff, 0x87, 0x14, 0x93, 0xc4, 0xe0, 0xb3, 0x60, 0xb7, 0xda, 0x64, 0x1d, 0xb8, 0x87, 0xe9, 0xd6,
	0xa8, 0x2a, 0x51, 0x8f, 0x60, 0x2b, 0x7b, 0x97, 0xf0, 0xa9, 0xa8, 0xa0, 0x75, 0xa7, 0x9f, 0x3e,
	0x5c, 0xfd, 0xec, 0xe1, 0xea, 0x3f, 0x5b, 0x0a, 0x7a, 0x2f, 0xf2, 0x17, 0xeb, 0xa5, 0xfc, 0x35,
	0x96, 0x91, 0xb1, 0xa7, 0x36, 0x4e, 0x48, 0x01, 0x1b, 0x6c, 0x00, 0xdb, 0x6e, 0x4a, 0x0b, 0x95,
	0xde, 0x41, 0xda, 0xbf, 0x5e, 0x18, 0x95, 0xe2, 0x25, 0xed, 0x9d, 0xc3, 0x76, 0x6e, 0x19, 0x69,
	0x44, 0x64, 0xd1, 0xf3, 0x18, 0x1a, 0x99, 0xa7, 0x8f, 0x95, 0x58, 0x1a, 0xb6, 0x6f, 0x1a, 0xda,
	0x3a, 0x1d, 0xbd, 0x86, 0x46, 0xe1, 0x69, 0xd9, 0x83, 0x9d, 0xe1, 0xa5, 0x18, 0x9f, 0x7f, 0x37,
	0x1c, 0x5d, 0x88, 0xab, 0xd7, 0xe3, 0x33, 0x71, 0x71, 0x79, 0x71, 0xd6, 0xba, 0xc5, 0x76, 0xe1,
	0xde, 0x1a, 0x31, 0xbc, 0x6c, 0x55, 0xb0, 0x50, 0xbb, 0x37, 0xe0, 0xe7, 0x4f, 0x5e, 0x5d, 0xb5,
	0x36, 0x8e, 0xfe, 0xae, 0x40, 0x73, 0x6d, 0xcc, 0x49, 0x5d, 0xee, 0x5f, 0x46, 0x59, 0x00, 0xf7,
	0x78, 0x17, 0x3a, 0xa5, 0x54, 0xba, 0x0f, 0xbe, 0x70, 0x0f, 0xfe, 0x93, 0x3e, 0x7b, 0xd9, 0xaa,
	0xe2, 0xec, 0x74, 0x4b, 0x05, 0xaf, 0xce, 0x47, 0x4f, 0xbf, 0x69, 0x6d, 0x0e, 0x46, 0x50, 0x7d,
	0x32, 0x1e, 0xb1, 0xaf, 0xe9, 0x6a, 0xd9, 0xca, 0xb0, 0x92, 0xf2, 0x2f, 0xfb, 0xd7, 0xed, 0x96,
	0x51, 0x69, 0x1f, 0x7a, 0xb7, 0x26, 0x77, 0x88, 0x3c, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x34,
	0xc7, 0x59, 0xde, 0xe7, 0x06, 0x00, 0x00,
}
