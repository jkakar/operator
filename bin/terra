#!/usr/bin/env bash
#/ Usage: terra [--help] [arguments...]
#/        terra plan <account>
#/        terra apply <account>
#/        terra fmt
#/        terra pull <account>
#/        terra push <account>
#/        terra vendor <version>
#/        terra validate

set -euo pipefail
cd "$(dirname "$0")/.."

: "${PROGRAM:="$(basename "$0")"}"
: "${HIPCHAT_TOKEN:=""}"

# Prevent Terraform from making a remote API call to HashiCorp's servers.
# See https://github.com/hashicorp/go-checkpoint for details.
CHECKPOINT_DISABLE=1
export CHECKPOINT_DISABLE

print_help() {
    grep ^#/ <"$0" |cut -c4-
}

if [ "$#" -eq 0 ]; then
    print_help
    exit 2
fi

action="${1:-""}"
arg1="${2:-""}"

go install github.com/hashicorp/terraform

case "$action" in
    apply|plan|pull|push)
      account="$arg1"
      if [ -z "$account" ]; then
        printf "%s: required argument missing: account\n" "$PROGRAM" 2>&1
        exit 1
      fi

      TERRAFORM_BASEDIR="$(pwd)/src/terraform"
      TERRAFORM_DIR="$account"
      TERRAFORM_PLAN="${TERRAFORM_BASEDIR}/${TERRAFORM_DIR}/plan.out"
      TERRAFORM_VAR_FILE="$(pwd)/src/terraform/terraform.tfvars"
      export TERRAFORM_DIR TERRAFORM_PLAN TERRAFORM_VAR_FILE

      GIT_DIR="$(pwd)/.git"
      export GIT_DIR
      GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
      GIT_COMMIT="$(git rev-parse HEAD)"

      case "$(whoami)" in
        srozet)
          go install bread/cmd/terra2

          artifactoryenv="src/terraform/artifactory.env"
          if ! test -f "$artifactoryenv"; then
            printf "%s: file %s is required. Please see %s.sample for an example.\n" \
              "$PROGRAM" "$artifactoryenv" "$artifactoryenv" 2>&1
            exit 1
          fi

          # TODO(sr) What to do about "terra push"?
          exec terra2 \
            -artifactory-user "$(sed 's,ARTIFACTORY.*=[[:space:]],,g' "$artifactoryenv" | head -1)" \
            -artifactory-password "$(sed 's,ARTIFACTORY.*=[[:space:]],,g' "$artifactoryenv" | tail -1)" \
            -canoe-user "$(whoami)@salesforce.com" \
            -git-branch "$GIT_BRANCH" \
            -git-commit "$GIT_COMMIT" \
            -terraform-command "$action" \
            -terraform-basedir "$TERRAFORM_BASEDIR" \
            -terraform-dir "$TERRAFORM_DIR" \
            -terraform-exec "$GOPATH/bin/terraform" \
            -terraform-plan "$TERRAFORM_PLAN" \
            -terraform-var-file "$TERRAFORM_VAR_FILE"
          ;;
        *)
          go install bread/cmd/breadsignal

          if [ -z "$HIPCHAT_TOKEN" ]; then
            printf "%s: required environment variable missing: HIPCHAT_TOKEN\n" "$PROGRAM" 2>&1
            printf "Please create one here and it to the shell environment: %s\n" \
              "https://hipchat.dev.pardot.com/account/api" 2>&1
            exit 1
          fi

          if ! test -d "src/terraform/${account}"; then
            printf "%s: %s is not managed in terraform.\n" "$PROGRAM" "$account" 2>&1
            exit 1
          fi

          artifactoryenv="src/terraform/artifactory.env"
          if ! test -f "$artifactoryenv"; then
            printf "%s: file %s is required. Please see %s.sample for an example.\n" \
              "$PROGRAM" "$artifactoryenv" "$artifactoryenv" 2>&1
            exit 1
          fi

          tfvars="src/terraform/terraform.tfvars"
          if ! test -f "$tfvars"; then
            printf "%s: file %s is required. Please see %s.sample for an example.\n" \
              "$PROGRAM" "$tfvars" "$tfvars" 2>&1
            exit 1
          fi

          if [ "$action" != "pull" ]; then
            breadsignal -terraform "$action" \
              -terraform-version "$(terraform version)" \
              -branch "$GIT_BRANCH" \
              -terraform-path "${account}" \
              -testing=false
          fi

          make -f ../../etc/mk/terraform.mk "$action" |
          grep -vi password
          ;;
      esac
      ;;
    fmt)
      terraform fmt -write src/terraform
      exit "$?"
      ;;
    validate)
        cd src/terraform && make -s -f ../../etc/mk/terraform.mk validate
        cd ../..
        out="$(terraform fmt -write=false -list=true src/terraform)"
        if [ -z "$out" ]; then
          exit 0
        else
          echo "The following files are not formatted properly:"
          echo
          echo "${out}"
          echo
          echo "Run \"terra fmt"\" to automatically format the Terraform code.""
          exit 1
        fi
        ;;
    vendor)
        if [ -z "$arg1" ]; then
            printf "%s: required argument missing: version\n" "$PROGRAM" 2>&1
            exit 1
        fi

        version="$arg1"
        archiveurl="https://github.com/hashicorp/terraform/archive/v${version}.tar.gz"
        archivedir="$(mktemp -d "terraformXXX")"
        vendordir="src/github.com/hashicorp/terraform"
        trap 'rm -rf $archivedir' EXIT

        rm -rf "$vendordir"
        mkdir -p "src/github.com/hashicorp"
        curl -fsSL "$archiveurl" | tar -xvz -C "$archivedir"
        mv "${archivedir}/terraform-${arg1}" "$vendordir"
        gofmt -w -s "$vendordir"

        echo "Vendored terraform version ${version} to $vendordir" 2>&1
        printf "$version" > src/canoe/config/terraform-version
        exit 0
        ;;
    *)
        print_help
        exit 2
        ;;
esac
