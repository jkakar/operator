#!/usr/bin/env bash
#/ Usage: terra [--help] [arguments...]
#/        terra plan <account>
#/        terra apply <account>
#/        terra unlock <account>
#/        terra fmt
#/        terra pull <account>
#/        terra push <account>
#/        terra vendor <version>
#/        terra validate
if [ -n "${DEBUG:-""}" ]; then
  set -x
fi
unset CDPATH

set -euo pipefail
cd "$(dirname "$0")/.."

: "${PROGRAM:="$(basename "$0")"}"
: "${HIPCHAT_TOKEN:=""}"
: "${USER:="$(whoami)"}"
: "${BREAD:="$(pwd)"}"
export BREAD

# Prevent Terraform from making a remote API call to HashiCorp's servers.
# See https://github.com/hashicorp/go-checkpoint for details.
CHECKPOINT_DISABLE=1
export CHECKPOINT_DISABLE

print_help() {
  grep ^#/ <"$0" |cut -c4-
}

if [ "$#" -eq 0 ]; then
  print_help
  exit 2
fi

action="${1:-""}"
arg1="${2:-""}"

GIT_DIR="$(pwd)/.git"
export GIT_DIR
GIT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
GIT_COMMIT="$(git rev-parse HEAD)"

TERRAFORM_PROJECT="$arg1"
TERRAFORM_OPTS="${@:3}"
TERRAFORM_BASEDIR="$(pwd)/terraform"
TERRAFORM_VENDORDIR="${TERRAFORM_BASEDIR}/_vendor"
TERRAFORM_DIR="${TERRAFORM_BASEDIR}/${TERRAFORM_PROJECT}"
TERRAFORM_PLAN="${TERRAFORM_DIR}/plan.out"
TERRAFORM_VAR_FILE="${TERRAFORM_BASEDIR}/terraform.tfvars"
export TERRAFORM_DIR TERRAFORM_PLAN TERRAFORM_PROJECT TERRAFORM_VAR_FILE TERRAFORM_OPTS

if test -z "${GOPATH:-""}" || test "$BREAD" != "${GOPATH}/src/git.dev.pardot.com/Pardot/bread"; then
    echo "Deploying Terraform changes requires a working Go environment:"
    echo
    echo "- Go must be installed. On macOS, 'brew install go' should just work"
    echo "- The GOPATH environment variable must set. Example: export GOPATH=\$HOME"
    echo "- This repository must be checked out at the correct location under the \$GOPATH directory"
    echo
    echo "To install Go and move the checkout to the correct location run the following commands:"
    echo
    echo "  brew install go"
    echo "  export GOPATH=\$HOME BREAD=$(pwd)"
    echo "  mkdir -p \$GOPATH/src/git.dev.pardot.com/Pardot"
    echo "  cd .. && mv \$BREAD \$GOPATH/src/git.dev.pardot.com/Pardot/bread"
    echo "  cd \$GOPATH/src/git.dev.pardot.com/Pardot/bread"
    echo
    echo "If you need assistance getting setup, please ask your question in the Build & Automate room on HipChat and feel free to mention @sr."
    echo
    exit 1
fi

GOBIN="${TERRAFORM_VENDORDIR}/bin" go install -v ./cmd/terraform-provider-*
GOPATH="${TERRAFORM_VENDORDIR}" GOBIN="${TERRAFORM_VENDORDIR}/bin" go install -v github.com/hashicorp/terraform

case "$action" in
  apply|unlock|plan)
    go install -v ./cmd/terra2

    artifactoryenv="terraform/artifactory.env"
    if ! test -f "$artifactoryenv"; then
      printf "%s: file %s is required. Please see %s.sample for an example.\n" \
        "$PROGRAM" "$artifactoryenv" "$artifactoryenv" 2>&1
      exit 1
    fi

    exec terra2 \
      -artifactory-user "$(sed 's,ARTIFACTORY.*=[[:space:]],,g' "$artifactoryenv" | head -1)" \
      -artifactory-password "$(sed 's,ARTIFACTORY.*=[[:space:]],,g' "$artifactoryenv" | tail -1)" \
      -canoe-user "$USER@salesforce.com" \
      -git-branch "$GIT_BRANCH" \
      -git-commit "$GIT_COMMIT" \
      -terraform-command "$action" \
      -terraform-dir "$TERRAFORM_BASEDIR" \
      -terraform-project "$TERRAFORM_PROJECT" \
      -terraform-exec "${TERRAFORM_VENDORDIR}/bin/terraform" \
      -terraform-plan "$TERRAFORM_PLAN" \
      -terraform-var-file "$TERRAFORM_VAR_FILE"
    ;;
  pull|push|import)
    go install -v ./cmd/breadsignal

    artifactoryenv="terraform/artifactory.env"
    if ! test -f "$artifactoryenv"; then
      printf "%s: file %s is required. Please see %s.sample for an example.\n" \
        "$PROGRAM" "$artifactoryenv" "$artifactoryenv" 2>&1
      exit 1
    fi

    if [ -z "$HIPCHAT_TOKEN" ]; then
      printf "%s: required environment variable missing: HIPCHAT_TOKEN\n" "$PROGRAM" 2>&1
      printf "Please create one here and it to the shell environment: %s\n" \
        "https://hipchat.dev.pardot.com/account/api" 2>&1
      exit 1
    fi

    if [ -z "$TERRAFORM_PROJECT" ]; then
      printf "%s: required argument missing: account\n" "$PROGRAM" 2>&1
      exit 1
    fi

    if ! test -d "$TERRAFORM_DIR"; then
      printf "%s: %s is not managed in terraform.\n" "$PROGRAM" "$account" 2>&1
      exit 1
    fi

    if ! test -f "$TERRAFORM_VAR_FILE"; then
      printf "%s: file %s is required. Please see %s.sample for an example.\n" \
        "$PROGRAM" "$TERRAFORM_VAR_FILE" "$TERRAFORM_VAR_FILE" 2>&1
      exit 1
    fi

    if [ "$action" != "pull" ]; then
      breadsignal -terraform "$action" \
        -terraform-resource "${3-""}" \
        -terraform-version "$(terraform version)" \
        -branch "$GIT_BRANCH" \
        -terraform-path "$TERRAFORM_PROJECT" \
        -testing=false
    fi

    cd terraform &&
    make -f ../etc/mk/terraform.mk "$action" |
    grep -vi password
    ;;
  fmt)
    find terraform -type d -mindepth 1 -not -path "terraform/_vendor*" -print0 | xargs -0 -n1 "${TERRAFORM_VENDORDIR}/bin/terraform" fmt -write=true -list=false
    exit "$?"
    ;;
  validate)
    cd terraform && GOBIN="${BREAD}/bin" make -s -f ../etc/mk/terraform.mk validate
    cd ..

    out="$(find terraform -type d -mindepth 1 -not -path "terraform/_vendor*" -print0 | xargs -0 -n1 "${TERRAFORM_VENDORDIR}/bin/terraform" fmt -write=false -list=true)"
    if [ -z "$out" ]; then
      exit 0
    else
      echo "The following files are not formatted properly:"
      echo
      echo "${out}"
      echo
      echo "Run \"terra fmt"\" to automatically format the Terraform code.""
      exit 1
    fi
    ;;
  vendor)
    if [ -z "$arg1" ]; then
      printf "%s: required argument missing: version\n" "$PROGRAM" 2>&1
      exit 1
    fi

    version="$arg1"
    archiveurl="https://github.com/hashicorp/terraform/archive/v${version}.tar.gz"
    archivedir="$(mktemp -d "terraformXXX")"
    vendordir="${TERRAFORM_VENDORDIR}/src/github.com/hashicorp/terraform"
    trap 'rm -rf $archivedir' EXIT

    rm -rf "$vendordir"
    mkdir -p "src/github.com/hashicorp"
    curl -fsSL "$archiveurl" | tar -xvz -C "$archivedir"
    mv "${archivedir}/terraform-${arg1}" "$vendordir"
    gofmt -w -s "$vendordir"

    echo "Vendored terraform version ${version} to $vendordir" 2>&1
    echo "$version" > canoe/config/terraform-version
    exit 0
    ;;
  *)
    print_help
    exit 2
    ;;
esac
