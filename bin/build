#!/usr/bin/env bash
#/ Usage: build [--help] [--ci] [--all] [<project...>]
#/ Build program for the BREAD team repository.
set -euo pipefail
cd "$(dirname "$0")/.."

PATH="$(pwd)/bin:$PATH"
export PATH

test -n "${DEBUG:-""}" && set -x

usage() {
    grep ^#/ <"$0" |cut -c4-
    exit 1
}

cimode=false
buildall=false
projects=""
while [ $# -gt 0 ]
do
    case "$1" in
        -h|--help)
            usage
            ;;
        --ci)
            cimode=true
            shift
            ;;
        --all)
            buildall=true
            shift
            ;;
        *)
            projects="$projects $1"
            shift
            ;;
    esac
done

# In CI mode (enabled on Bamboo by default) this analyzes the diff to figure
# out what project(s) need(s) building. A projects is defined as a subdirectory
# of the src/ directory.
if $cimode
then
    sha1a="${bamboo_repository_previous_revision_number:-""}"
    sha1b="${bamboo_repository_revision_number:-"HEAD"}"

    # It is unclear when this can happen as of yet so we just bail out if it
    # does for now.
    if [ -z "$sha1a" ]
    then
        echo "Unable to complete build without a base SHA1" 2>&1
        exit 1
    fi

    # If the two SHA1s are identical it most likely means this is a restarted
    # build, in which case we trigger a full build.
    test "$sha1a" = "$sha1b" &&
    buildall=true

    for path in $(git diff --name-only "${sha1a}..${sha1b}")
    do
        # Trigger a complete rebuild if anything other than the src/ tree was
        # modified, such as configuration files or the build script itself.
        # This is a rather radical and simplistic heuristic but it is better to
        # err on the safe side and build too much than too little.
        treename="$(printf "$path" | cut -d/ -f1)"
        if [ "$treename" != "src" ]
        then
            buildall=true
            break
        fi

        # Collect all projects that were modified in this change set.
        projectname="$(printf "$path" | cut -d/ -f2)"
        seen=false
        for i in $projects
        do test "$i" = "$projectname" && seen=true
        done
        if ! $seen
        then projects="${projects}${projectname} "
        fi
    done

    # Workaround for <https://github.com/docker/libnetwork/issues/1113>
    # Please remove when the bug is resolved, and a fixed version deployed
    sudo /bin/systemctl restart docker.service
    sleep 5
fi

# Build all projects if --all was given.
if $buildall
then projects="$(find src -type d -mindepth 1 -maxdepth 1 | cut -d/ -f2)"
fi

# Bail out if there is nothing to build.
test -z "$projects"  && {
    echo "Nothing to build." 2>&1
    exit 1
}

# Iterate over all selected projects, either explicitly or because of CI mode,
# and execute the build commands in sequence.
for project in $projects
do
    case "$project" in
        pardot-explorer)
            build-ruby "$project"
            ;;
        teampass)
            docker build -f src/teampass/Dockerfile src/teampass
            ;;
        terraform)
            # TODO(sr) Turn on terraform suite
            # find src/terraform/ -mindepth 2 -type d -print0 |
            # xargs -0 -n1 terraform validate
            ;;
        *)
            echo "No build rule defined for project \"$project\"." 2>&1
            exit 1
            ;;
    esac
done
