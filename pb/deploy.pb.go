// Code generated by protoc-gen-go.
// source: deploy.proto
// DO NOT EDIT!

package breadpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import operator "github.com/sr/operator"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListTargetsRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *ListTargetsRequest) Reset()                    { *m = ListTargetsRequest{} }
func (m *ListTargetsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTargetsRequest) ProtoMessage()               {}
func (*ListTargetsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ListTargetsRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type ListBuildsRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Target  string            `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Branch  string            `protobuf:"bytes,3,opt,name=branch" json:"branch,omitempty"`
}

func (m *ListBuildsRequest) Reset()                    { *m = ListBuildsRequest{} }
func (m *ListBuildsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBuildsRequest) ProtoMessage()               {}
func (*ListBuildsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ListBuildsRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ListBuildsRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *ListBuildsRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

type TriggerRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Target  string            `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Build   string            `protobuf:"bytes,3,opt,name=build" json:"build,omitempty"`
	Branch  string            `protobuf:"bytes,4,opt,name=branch" json:"branch,omitempty"`
}

func (m *TriggerRequest) Reset()                    { *m = TriggerRequest{} }
func (m *TriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*TriggerRequest) ProtoMessage()               {}
func (*TriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *TriggerRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TriggerRequest) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *TriggerRequest) GetBuild() string {
	if m != nil {
		return m.Build
	}
	return ""
}

func (m *TriggerRequest) GetBranch() string {
	if m != nil {
		return m.Branch
	}
	return ""
}

func init() {
	proto.RegisterType((*ListTargetsRequest)(nil), "bread.ListTargetsRequest")
	proto.RegisterType((*ListBuildsRequest)(nil), "bread.ListBuildsRequest")
	proto.RegisterType((*TriggerRequest)(nil), "bread.TriggerRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Deploy service

type DeployClient interface {
	// List what can be deployed
	ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*operator.Response, error)
	// List the ten most recent builds for a given target
	ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*operator.Response, error)
	// Trigger a deploy of a build to given target
	Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*operator.Response, error)
}

type deployClient struct {
	cc *grpc.ClientConn
}

func NewDeployClient(cc *grpc.ClientConn) DeployClient {
	return &deployClient{cc}
}

func (c *deployClient) ListTargets(ctx context.Context, in *ListTargetsRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Deploy/ListTargets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Deploy/ListBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Deploy/Trigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Deploy service

type DeployServer interface {
	// List what can be deployed
	ListTargets(context.Context, *ListTargetsRequest) (*operator.Response, error)
	// List the ten most recent builds for a given target
	ListBuilds(context.Context, *ListBuildsRequest) (*operator.Response, error)
	// Trigger a deploy of a build to given target
	Trigger(context.Context, *TriggerRequest) (*operator.Response, error)
}

func RegisterDeployServer(s *grpc.Server, srv DeployServer) {
	s.RegisterService(&_Deploy_serviceDesc, srv)
}

func _Deploy_ListTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTargetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).ListTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Deploy/ListTargets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).ListTargets(ctx, req.(*ListTargetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Deploy/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).ListBuilds(ctx, req.(*ListBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Deploy/Trigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Trigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deploy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bread.Deploy",
	HandlerType: (*DeployServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTargets",
			Handler:    _Deploy_ListTargets_Handler,
		},
		{
			MethodName: "ListBuilds",
			Handler:    _Deploy_ListBuilds_Handler,
		},
		{
			MethodName: "Trigger",
			Handler:    _Deploy_Trigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy.proto",
}

func init() { proto.RegisterFile("deploy.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0x49, 0x2d, 0xc8,
	0xc9, 0xaf, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2a, 0x4a, 0x4d, 0x4c, 0x91,
	0x52, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0xd2, 0xcf,
	0x2f, 0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0x47, 0x30, 0x20, 0xaa, 0x95, 0x1c, 0xb9, 0x84, 0x7c, 0x32,
	0x8b, 0x4b, 0x42, 0x12, 0x8b, 0xd2, 0x53, 0x4b, 0x8a, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0xb4, 0xb9, 0xd8, 0x8b, 0x20, 0x4c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x41, 0x3d,
	0xb8, 0x3e, 0xa8, 0x9a, 0x20, 0x98, 0x0a, 0xa5, 0x02, 0x2e, 0x41, 0x90, 0x11, 0x4e, 0xa5, 0x99,
	0x39, 0x29, 0x64, 0x99, 0x20, 0x24, 0xc6, 0xc5, 0x56, 0x02, 0x76, 0x80, 0x04, 0x93, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x94, 0x07, 0x12, 0x4f, 0x2a, 0x4a, 0xcc, 0x4b, 0xce, 0x90, 0x60, 0x86, 0x88,
	0x43, 0x78, 0x4a, 0xcd, 0x8c, 0x5c, 0x7c, 0x21, 0x45, 0x99, 0xe9, 0xe9, 0xa9, 0x45, 0x54, 0xb5,
	0x4f, 0x84, 0x8b, 0x35, 0x09, 0xe4, 0x0b, 0xa8, 0x75, 0x10, 0x0e, 0x92, 0x2b, 0x58, 0x90, 0x5d,
	0x61, 0xb4, 0x8f, 0x91, 0x8b, 0xcd, 0x05, 0x1c, 0xf2, 0x42, 0x36, 0x5c, 0xdc, 0x48, 0xa1, 0x28,
	0x24, 0xa9, 0x07, 0x8e, 0x03, 0x3d, 0xcc, 0x90, 0x95, 0x12, 0x42, 0x76, 0x56, 0x71, 0x41, 0x7e,
	0x5e, 0x71, 0xaa, 0x90, 0x15, 0x17, 0x17, 0x22, 0x00, 0x85, 0x24, 0x90, 0x34, 0xa3, 0x84, 0x29,
	0x56, 0xbd, 0x26, 0x5c, 0xec, 0xd0, 0x90, 0x10, 0x12, 0x85, 0x6a, 0x44, 0x0d, 0x19, 0x6c, 0xba,
	0xa4, 0x58, 0x66, 0x34, 0x49, 0x32, 0x3a, 0x71, 0x46, 0xb1, 0x83, 0x75, 0x14, 0x24, 0x25, 0xb1,
	0x81, 0x53, 0x83, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x63, 0xeb, 0x76, 0x3b, 0x4b, 0x02, 0x00,
	0x00,
}
