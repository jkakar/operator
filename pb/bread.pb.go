// Code generated by protoc-gen-go.
// source: bread.proto
// DO NOT EDIT!

/*
Package breadpb is a generated protocol buffer package.

It is generated from these files:
	bread.proto
	deploy.proto
	ping.proto
	repository.proto
	tickets.proto

It has these top-level messages:
	OperatorRequest
	OperatorMessage
	GithubEvent
	JIRAEvent
	HTTPRequest
	ListTargetsRequest
	ListBuildsRequest
	TriggerRequest
	PingRequest
	SlowLorisRequest
	RepositoryConfig
	RepositoryWatchlist
	TicketRequest
*/
package breadpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"
import operator "github.com/sr/operator"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OperatorRequest struct {
	Event   string            `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	Request *operator.Request `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
	Message *OperatorMessage  `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Error   string            `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *OperatorRequest) Reset()                    { *m = OperatorRequest{} }
func (m *OperatorRequest) String() string            { return proto.CompactTextString(m) }
func (*OperatorRequest) ProtoMessage()               {}
func (*OperatorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OperatorRequest) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *OperatorRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *OperatorRequest) GetMessage() *OperatorMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *OperatorRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type OperatorMessage struct {
	Source *operator.Source `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	Text   string           `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Html   string           `protobuf:"bytes,3,opt,name=html" json:"html,omitempty"`
}

func (m *OperatorMessage) Reset()                    { *m = OperatorMessage{} }
func (m *OperatorMessage) String() string            { return proto.CompactTextString(m) }
func (*OperatorMessage) ProtoMessage()               {}
func (*OperatorMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OperatorMessage) GetSource() *operator.Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *OperatorMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *OperatorMessage) GetHtml() string {
	if m != nil {
		return m.Html
	}
	return ""
}

type GithubEvent struct {
	Id        string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type      string         `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Payload   []byte         `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Forwarded []*HTTPRequest `protobuf:"bytes,4,rep,name=forwarded" json:"forwarded,omitempty"`
}

func (m *GithubEvent) Reset()                    { *m = GithubEvent{} }
func (m *GithubEvent) String() string            { return proto.CompactTextString(m) }
func (*GithubEvent) ProtoMessage()               {}
func (*GithubEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GithubEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GithubEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *GithubEvent) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GithubEvent) GetForwarded() []*HTTPRequest {
	if m != nil {
		return m.Forwarded
	}
	return nil
}

type JIRAEvent struct {
	Id        int32          `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type      string         `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	IssueKey  string         `protobuf:"bytes,3,opt,name=issue_key,json=issueKey" json:"issue_key,omitempty"`
	Forwarded []*HTTPRequest `protobuf:"bytes,4,rep,name=forwarded" json:"forwarded,omitempty"`
}

func (m *JIRAEvent) Reset()                    { *m = JIRAEvent{} }
func (m *JIRAEvent) String() string            { return proto.CompactTextString(m) }
func (*JIRAEvent) ProtoMessage()               {}
func (*JIRAEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *JIRAEvent) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *JIRAEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *JIRAEvent) GetIssueKey() string {
	if m != nil {
		return m.IssueKey
	}
	return ""
}

func (m *JIRAEvent) GetForwarded() []*HTTPRequest {
	if m != nil {
		return m.Forwarded
	}
	return nil
}

type HTTPRequest struct {
	Method     string                    `protobuf:"bytes,1,opt,name=method" json:"method,omitempty"`
	Path       string                    `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	Query      map[string]string         `protobuf:"bytes,3,rep,name=query" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StatusCode uint32                    `protobuf:"varint,7,opt,name=status_code,json=statusCode" json:"status_code,omitempty"`
	Duration   *google_protobuf.Duration `protobuf:"bytes,8,opt,name=duration" json:"duration,omitempty"`
	Error      string                    `protobuf:"bytes,9,opt,name=error" json:"error,omitempty"`
}

func (m *HTTPRequest) Reset()                    { *m = HTTPRequest{} }
func (m *HTTPRequest) String() string            { return proto.CompactTextString(m) }
func (*HTTPRequest) ProtoMessage()               {}
func (*HTTPRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HTTPRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HTTPRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *HTTPRequest) GetQuery() map[string]string {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *HTTPRequest) GetStatusCode() uint32 {
	if m != nil {
		return m.StatusCode
	}
	return 0
}

func (m *HTTPRequest) GetDuration() *google_protobuf.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *HTTPRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*OperatorRequest)(nil), "bread.OperatorRequest")
	proto.RegisterType((*OperatorMessage)(nil), "bread.OperatorMessage")
	proto.RegisterType((*GithubEvent)(nil), "bread.GithubEvent")
	proto.RegisterType((*JIRAEvent)(nil), "bread.JIRAEvent")
	proto.RegisterType((*HTTPRequest)(nil), "bread.HTTPRequest")
}

func init() { proto.RegisterFile("bread.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x52, 0x5b, 0x8b, 0xd3, 0x40,
	0x14, 0x26, 0xe9, 0x25, 0xcd, 0x89, 0x97, 0x75, 0x90, 0x25, 0x56, 0xd4, 0x52, 0x10, 0x02, 0x42,
	0xba, 0x74, 0x11, 0x16, 0xdf, 0xbc, 0x2c, 0xde, 0x10, 0x75, 0xdc, 0x27, 0x5f, 0x96, 0x49, 0x73,
	0xb6, 0x0d, 0xb6, 0x9d, 0xec, 0x64, 0x66, 0x35, 0x0f, 0xfa, 0x33, 0x7c, 0xf2, 0xc7, 0xca, 0xdc,
	0x9a, 0xa2, 0xf8, 0xe2, 0xdb, 0xb9, 0x7c, 0x73, 0xbe, 0xef, 0x3b, 0x73, 0x20, 0x29, 0x04, 0xb2,
	0x32, 0xaf, 0x05, 0x97, 0x9c, 0x0c, 0x4c, 0x32, 0xbe, 0xbf, 0xe4, 0x7c, 0xb9, 0xc6, 0x99, 0x29,
	0x16, 0xea, 0x62, 0x56, 0x2a, 0xc1, 0x64, 0xc5, 0xb7, 0x16, 0x36, 0x7e, 0xb8, 0xac, 0xe4, 0x4a,
	0x15, 0xf9, 0x82, 0x6f, 0x66, 0x8d, 0x98, 0xf1, 0x1a, 0x05, 0x93, 0xbc, 0x0b, 0x2c, 0x6c, 0xfa,
	0x2b, 0x80, 0x9b, 0xef, 0x5d, 0x89, 0xe2, 0xa5, 0xc2, 0x46, 0x92, 0xdb, 0x30, 0xc0, 0x2b, 0xdc,
	0xca, 0x34, 0x98, 0x04, 0x59, 0x4c, 0x6d, 0x42, 0x1e, 0x41, 0x24, 0x2c, 0x20, 0x0d, 0x27, 0x41,
	0x96, 0xcc, 0x6f, 0xe5, 0xbb, 0x59, 0xee, 0x25, 0xf5, 0x08, 0x72, 0x04, 0xd1, 0x06, 0x9b, 0x86,
	0x2d, 0x31, 0xed, 0x19, 0xf0, 0x61, 0x6e, 0x3d, 0x78, 0xae, 0x77, 0xb6, 0x4b, 0x3d, 0xcc, 0x90,
	0x0a, 0xc1, 0x45, 0xda, 0x77, 0xa4, 0x3a, 0x99, 0x2e, 0x3a, 0x75, 0xee, 0x05, 0xc9, 0x60, 0xd8,
	0x70, 0x25, 0x16, 0x68, 0xe4, 0x25, 0xf3, 0x83, 0x4e, 0xc6, 0x27, 0x53, 0xa7, 0xae, 0x4f, 0x08,
	0xf4, 0x25, 0x7e, 0xb3, 0x72, 0x63, 0x6a, 0x62, 0x5d, 0x5b, 0xc9, 0xcd, 0xda, 0xa8, 0x8a, 0xa9,
	0x89, 0xa7, 0xdf, 0x21, 0x79, 0x69, 0x96, 0x75, 0x6a, 0x8c, 0xde, 0x80, 0xb0, 0x2a, 0x9d, 0xf7,
	0xb0, 0x2a, 0xcd, 0x98, 0xb6, 0xc6, 0xdd, 0x98, 0xb6, 0x46, 0x92, 0x42, 0x54, 0xb3, 0x76, 0xcd,
	0x59, 0x69, 0x26, 0x5d, 0xa3, 0x3e, 0x25, 0x47, 0x10, 0x5f, 0x70, 0xf1, 0x95, 0x89, 0x12, 0xcb,
	0xb4, 0x3f, 0xe9, 0x65, 0xc9, 0x9c, 0x38, 0xef, 0xaf, 0xce, 0xce, 0x3e, 0xf8, 0x4d, 0x75, 0xa0,
	0xe9, 0x0f, 0x88, 0xdf, 0xbc, 0xa6, 0x4f, 0xff, 0x24, 0x1f, 0xfc, 0x93, 0xfc, 0x2e, 0xc4, 0x55,
	0xd3, 0x28, 0x3c, 0xff, 0x82, 0xad, 0x33, 0x32, 0x32, 0x85, 0xb7, 0xd8, 0xfe, 0x07, 0xff, 0xcf,
	0x10, 0x92, 0xbd, 0x16, 0x39, 0x84, 0xe1, 0x06, 0xe5, 0x8a, 0xfb, 0x1d, 0xb8, 0x4c, 0x4b, 0xa9,
	0x99, 0x5c, 0x79, 0x29, 0x3a, 0x26, 0xc7, 0x30, 0xb8, 0x54, 0x28, 0xb4, 0x0c, 0xcd, 0x74, 0xef,
	0x6f, 0xa6, 0xfc, 0xa3, 0xee, 0x9f, 0x6e, 0xa5, 0x68, 0xa9, 0xc5, 0x92, 0x07, 0x90, 0x34, 0x92,
	0x49, 0xd5, 0x9c, 0x2f, 0x78, 0x89, 0x69, 0x34, 0x09, 0xb2, 0xeb, 0x14, 0x6c, 0xe9, 0x39, 0x2f,
	0x91, 0x3c, 0x86, 0x91, 0xbf, 0xe6, 0x74, 0x64, 0x3e, 0xf9, 0x4e, 0x6e, 0xcf, 0x3d, 0xf7, 0xe7,
	0x9e, 0xbf, 0x70, 0x00, 0xba, 0x83, 0x76, 0x27, 0x14, 0xef, 0x9d, 0xd0, 0xf8, 0x04, 0xa0, 0x93,
	0x40, 0x0e, 0xa0, 0xa7, 0xb7, 0x66, 0x9d, 0xe9, 0x50, 0xbf, 0xba, 0x62, 0x6b, 0xe5, 0x57, 0x6c,
	0x93, 0x27, 0xe1, 0x49, 0xf0, 0x2c, 0xfe, 0x1c, 0x19, 0x3b, 0x75, 0x51, 0x0c, 0x0d, 0xef, 0xf1,
	0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0x96, 0x8b, 0x69, 0x8a, 0x03, 0x00, 0x00,
}
