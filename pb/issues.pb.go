// Code generated by protoc-gen-go.
// source: issues.proto
// DO NOT EDIT!

package breadpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import operator "github.com/sr/operator"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MyIssuesRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *MyIssuesRequest) Reset()                    { *m = MyIssuesRequest{} }
func (m *MyIssuesRequest) String() string            { return proto.CompactTextString(m) }
func (*MyIssuesRequest) ProtoMessage()               {}
func (*MyIssuesRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *MyIssuesRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*MyIssuesRequest)(nil), "bread.MyIssuesRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Issues service

type IssuesClient interface {
	// List in-progress issues assigned to the the current user
	Mine(ctx context.Context, in *MyIssuesRequest, opts ...grpc.CallOption) (*operator.Response, error)
}

type issuesClient struct {
	cc *grpc.ClientConn
}

func NewIssuesClient(cc *grpc.ClientConn) IssuesClient {
	return &issuesClient{cc}
}

func (c *issuesClient) Mine(ctx context.Context, in *MyIssuesRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Issues/Mine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Issues service

type IssuesServer interface {
	// List in-progress issues assigned to the the current user
	Mine(context.Context, *MyIssuesRequest) (*operator.Response, error)
}

func RegisterIssuesServer(s *grpc.Server, srv IssuesServer) {
	s.RegisterService(&_Issues_serviceDesc, srv)
}

func _Issues_Mine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuesServer).Mine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Issues/Mine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuesServer).Mine(ctx, req.(*MyIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Issues_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bread.Issues",
	HandlerType: (*IssuesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mine",
			Handler:    _Issues_Mine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "issues.proto",
}

func init() { proto.RegisterFile("issues.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x2c, 0x2e, 0x2e,
	0x4d, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2a, 0x4a, 0x4d, 0x4c, 0x91,
	0x52, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0xd2, 0xcf,
	0x2f, 0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0x47, 0x30, 0x20, 0xaa, 0x95, 0xec, 0xb8, 0xf8, 0x7d, 0x2b,
	0x3d, 0xc1, 0xfa, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xb4, 0xb9, 0xd8, 0x8b, 0x20,
	0x4c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x41, 0x3d, 0xb8, 0x26, 0xa8, 0x9a, 0x20, 0x98,
	0x0a, 0x23, 0x1b, 0x2e, 0x36, 0x88, 0x6e, 0x21, 0x23, 0x2e, 0x16, 0xdf, 0xcc, 0xbc, 0x54, 0x21,
	0x31, 0x3d, 0xb0, 0x03, 0xf4, 0xd0, 0x8c, 0x95, 0x12, 0x42, 0x36, 0xa5, 0xb8, 0x20, 0x3f, 0xaf,
	0x38, 0xd5, 0x89, 0x33, 0x8a, 0x1d, 0xac, 0xb8, 0x20, 0x29, 0x89, 0x0d, 0xec, 0x1e, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x39, 0xcf, 0xf7, 0xcc, 0xcd, 0x00, 0x00, 0x00,
}
