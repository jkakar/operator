// Code generated by protoc-gen-go.
// source: tickets.proto
// DO NOT EDIT!

package breadpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import operator "github.com/sr/operator"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TicketRequest struct {
	Request         *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	IncludeResolved string            `protobuf:"bytes,2,opt,name=include_resolved,json=includeResolved" json:"include_resolved,omitempty"`
}

func (m *TicketRequest) Reset()                    { *m = TicketRequest{} }
func (m *TicketRequest) String() string            { return proto.CompactTextString(m) }
func (*TicketRequest) ProtoMessage()               {}
func (*TicketRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *TicketRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TicketRequest) GetIncludeResolved() string {
	if m != nil {
		return m.IncludeResolved
	}
	return ""
}

func init() {
	proto.RegisterType((*TicketRequest)(nil), "bread.TicketRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tickets service

type TicketsClient interface {
	// List in-progress issues assigned to the current user
	Mine(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*operator.Response, error)
	// Show the state of all tickets in the current sprint
	SprintStatus(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*operator.Response, error)
}

type ticketsClient struct {
	cc *grpc.ClientConn
}

func NewTicketsClient(cc *grpc.ClientConn) TicketsClient {
	return &ticketsClient{cc}
}

func (c *ticketsClient) Mine(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Tickets/Mine", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketsClient) SprintStatus(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Tickets/SprintStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tickets service

type TicketsServer interface {
	// List in-progress issues assigned to the current user
	Mine(context.Context, *TicketRequest) (*operator.Response, error)
	// Show the state of all tickets in the current sprint
	SprintStatus(context.Context, *TicketRequest) (*operator.Response, error)
}

func RegisterTicketsServer(s *grpc.Server, srv TicketsServer) {
	s.RegisterService(&_Tickets_serviceDesc, srv)
}

func _Tickets_Mine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).Mine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Tickets/Mine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).Mine(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tickets_SprintStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketsServer).SprintStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Tickets/SprintStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketsServer).SprintStatus(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tickets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bread.Tickets",
	HandlerType: (*TicketsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mine",
			Handler:    _Tickets_Mine_Handler,
		},
		{
			MethodName: "SprintStatus",
			Handler:    _Tickets_SprintStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tickets.proto",
}

func init() { proto.RegisterFile("tickets.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 214 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0xc9, 0x4c, 0xce,
	0x4e, 0x2d, 0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2a, 0x4a, 0x4d, 0x4c,
	0x91, 0x52, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0xd2,
	0xcf, 0x2f, 0x48, 0x2d, 0x4a, 0x2c, 0xc9, 0x47, 0x30, 0x20, 0xaa, 0x95, 0xd2, 0xb9, 0x78, 0x43,
	0xc0, 0xda, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xb4, 0xb9, 0xd8, 0x8b, 0x20, 0x4c,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x41, 0x3d, 0xb8, 0x16, 0xa8, 0x9a, 0x20, 0x98, 0x0a,
	0x21, 0x4d, 0x2e, 0x81, 0xcc, 0xbc, 0xe4, 0x9c, 0xd2, 0x94, 0xd4, 0xf8, 0xa2, 0xd4, 0xe2, 0xfc,
	0x9c, 0xb2, 0xd4, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x7e, 0xa8, 0x78, 0x10, 0x54,
	0xd8, 0xa8, 0x9a, 0x8b, 0x1d, 0x62, 0x51, 0xb1, 0x90, 0x01, 0x17, 0x8b, 0x6f, 0x66, 0x5e, 0xaa,
	0x90, 0x88, 0x1e, 0xd8, 0xa9, 0x7a, 0x28, 0x0e, 0x90, 0x12, 0x42, 0xb6, 0xaf, 0xb8, 0x20, 0x3f,
	0xaf, 0x38, 0x55, 0xc8, 0x82, 0x8b, 0x27, 0xb8, 0xa0, 0x28, 0x33, 0xaf, 0x24, 0xb8, 0x24, 0xb1,
	0xa4, 0xb4, 0x98, 0x78, 0x9d, 0x52, 0x2c, 0x33, 0x9a, 0x24, 0x19, 0x9d, 0x38, 0xa3, 0xd8, 0xc1,
	0x1a, 0x0a, 0x92, 0x92, 0xd8, 0xc0, 0xfe, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x61,
	0xf8, 0x3e, 0x36, 0x01, 0x00, 0x00,
}
