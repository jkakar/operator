// Code generated by protoc-gen-go.
// source: testing/testing.proto
// DO NOT EDIT!

package protolog_testing

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Foo struct {
	One         string `protobuf:"bytes,1,opt,name=one" json:"one,omitempty"`
	Two         int32  `protobuf:"varint,2,opt,name=two" json:"two,omitempty"`
	StringField string `protobuf:"bytes,3,opt,name=string_field" json:"string_field,omitempty"`
	Int32Field  int32  `protobuf:"varint,4,opt,name=int32_field" json:"int32_field,omitempty"`
	Bar         *Bar   `protobuf:"bytes,5,opt,name=bar" json:"bar,omitempty"`
}

func (m *Foo) Reset()                    { *m = Foo{} }
func (m *Foo) String() string            { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()               {}
func (*Foo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Foo) GetBar() *Bar {
	if m != nil {
		return m.Bar
	}
	return nil
}

type Bar struct {
	One         string `protobuf:"bytes,1,opt,name=one" json:"one,omitempty"`
	Two         string `protobuf:"bytes,2,opt,name=two" json:"two,omitempty"`
	StringField string `protobuf:"bytes,3,opt,name=string_field" json:"string_field,omitempty"`
	Int32Field  int32  `protobuf:"varint,4,opt,name=int32_field" json:"int32_field,omitempty"`
}

func (m *Bar) Reset()                    { *m = Bar{} }
func (m *Bar) String() string            { return proto.CompactTextString(m) }
func (*Bar) ProtoMessage()               {}
func (*Bar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Baz struct {
	Bat *Baz_Bat `protobuf:"bytes,1,opt,name=bat" json:"bat,omitempty"`
}

func (m *Baz) Reset()                    { *m = Baz{} }
func (m *Baz) String() string            { return proto.CompactTextString(m) }
func (*Baz) ProtoMessage()               {}
func (*Baz) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Baz) GetBat() *Baz_Bat {
	if m != nil {
		return m.Bat
	}
	return nil
}

type Baz_Bat struct {
	Ban *Baz_Bat_Ban `protobuf:"bytes,1,opt,name=ban" json:"ban,omitempty"`
}

func (m *Baz_Bat) Reset()                    { *m = Baz_Bat{} }
func (m *Baz_Bat) String() string            { return proto.CompactTextString(m) }
func (*Baz_Bat) ProtoMessage()               {}
func (*Baz_Bat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *Baz_Bat) GetBan() *Baz_Bat_Ban {
	if m != nil {
		return m.Ban
	}
	return nil
}

type Baz_Bat_Ban struct {
	StringField string `protobuf:"bytes,1,opt,name=string_field" json:"string_field,omitempty"`
	Int32Field  int32  `protobuf:"varint,2,opt,name=int32_field" json:"int32_field,omitempty"`
}

func (m *Baz_Bat_Ban) Reset()                    { *m = Baz_Bat_Ban{} }
func (m *Baz_Bat_Ban) String() string            { return proto.CompactTextString(m) }
func (*Baz_Bat_Ban) ProtoMessage()               {}
func (*Baz_Bat_Ban) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Foo)(nil), "protolog.testing.Foo")
	proto.RegisterType((*Bar)(nil), "protolog.testing.Bar")
	proto.RegisterType((*Baz)(nil), "protolog.testing.Baz")
	proto.RegisterType((*Baz_Bat)(nil), "protolog.testing.Baz.Bat")
	proto.RegisterType((*Baz_Bat_Ban)(nil), "protolog.testing.Baz.Bat.Ban")
	proto.RegisterType((*Empty)(nil), "protolog.testing.Empty")
}

var fileDescriptor0 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x49, 0x2d, 0x2e,
	0xc9, 0xcc, 0x4b, 0xd7, 0x87, 0xd2, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x02, 0x60, 0x2a,
	0x27, 0x3f, 0x5d, 0x0f, 0x2a, 0xae, 0x94, 0xc7, 0xc5, 0xec, 0x96, 0x9f, 0x2f, 0xc4, 0xcd, 0xc5,
	0x9c, 0x9f, 0x97, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x09, 0xe2, 0x94, 0x94, 0xe7, 0x4b, 0x30,
	0x01, 0x39, 0xac, 0x42, 0x22, 0x5c, 0x3c, 0xc5, 0x25, 0x45, 0x40, 0xa5, 0xf1, 0x69, 0x99, 0xa9,
	0x39, 0x29, 0x12, 0xcc, 0x60, 0x25, 0xc2, 0x5c, 0xdc, 0x99, 0x79, 0x25, 0xc6, 0x46, 0x50, 0x41,
	0x16, 0xb0, 0x52, 0x25, 0x2e, 0xe6, 0xa4, 0xc4, 0x22, 0x09, 0x56, 0x20, 0x87, 0xdb, 0x48, 0x54,
	0x0f, 0xdd, 0x2e, 0x3d, 0xa7, 0xc4, 0x22, 0x25, 0x2f, 0x2e, 0x66, 0x20, 0x85, 0xd3, 0x3e, 0x4e,
	0x12, 0xec, 0x53, 0x9a, 0xc4, 0x08, 0x32, 0xac, 0x4a, 0x48, 0x0d, 0x64, 0x6f, 0x09, 0xd8, 0x30,
	0x6e, 0x23, 0x49, 0x6c, 0xf6, 0x56, 0x01, 0x71, 0x89, 0x54, 0x32, 0x48, 0x79, 0x89, 0x90, 0x16,
	0x48, 0x79, 0x1e, 0x54, 0xb9, 0x2c, 0x4e, 0xe5, 0x40, 0x9c, 0x27, 0x65, 0x00, 0xd2, 0x92, 0x87,
	0xe1, 0x28, 0x46, 0x6c, 0x8e, 0x02, 0x87, 0x97, 0x12, 0x3b, 0x17, 0xab, 0x6b, 0x6e, 0x41, 0x49,
	0x65, 0x12, 0x1b, 0xd8, 0x60, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x35, 0x7c, 0x7c,
	0x8b, 0x01, 0x00, 0x00,
}
