// Code generated by protoc-gen-go.
// source: privet.proto
// DO NOT EDIT!

/*
Package privet is a generated protocol buffer package.

It is generated from these files:
	privet.proto

It has these top-level messages:
	CommandResult
	PopUnitsRequest
	PopUnitsResponse
	ReportUnitsCompletionRequest
	ReportUnitsCompletionResponse
*/
package privet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type CommandResult struct {
	ExitCode int32  `protobuf:"varint,1,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	Output   []byte `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *CommandResult) Reset()                    { *m = CommandResult{} }
func (m *CommandResult) String() string            { return proto.CompactTextString(m) }
func (*CommandResult) ProtoMessage()               {}
func (*CommandResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PopUnitsRequest struct {
	RunnerId       string `protobuf:"bytes,1,opt,name=runner_id,json=runnerId" json:"runner_id,omitempty"`
	UnitsRequested int32  `protobuf:"varint,2,opt,name=units_requested,json=unitsRequested" json:"units_requested,omitempty"`
}

func (m *PopUnitsRequest) Reset()                    { *m = PopUnitsRequest{} }
func (m *PopUnitsRequest) String() string            { return proto.CompactTextString(m) }
func (*PopUnitsRequest) ProtoMessage()               {}
func (*PopUnitsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PopUnitsResponse struct {
	Units []string `protobuf:"bytes,1,rep,name=units" json:"units,omitempty"`
}

func (m *PopUnitsResponse) Reset()                    { *m = PopUnitsResponse{} }
func (m *PopUnitsResponse) String() string            { return proto.CompactTextString(m) }
func (*PopUnitsResponse) ProtoMessage()               {}
func (*PopUnitsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ReportUnitsCompletionRequest struct {
	RunnerId                string         `protobuf:"bytes,1,opt,name=runner_id,json=runnerId" json:"runner_id,omitempty"`
	ResultId                string         `protobuf:"bytes,2,opt,name=result_id,json=resultId" json:"result_id,omitempty"`
	Units                   []string       `protobuf:"bytes,3,rep,name=units" json:"units,omitempty"`
	UnitResult              *CommandResult `protobuf:"bytes,4,opt,name=unit_result,json=unitResult" json:"unit_result,omitempty"`
	AdditionalResultPresent bool           `protobuf:"varint,5,opt,name=additional_result_present,json=additionalResultPresent" json:"additional_result_present,omitempty"`
	AdditionalResult        *CommandResult `protobuf:"bytes,6,opt,name=additional_result,json=additionalResult" json:"additional_result,omitempty"`
}

func (m *ReportUnitsCompletionRequest) Reset()                    { *m = ReportUnitsCompletionRequest{} }
func (m *ReportUnitsCompletionRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportUnitsCompletionRequest) ProtoMessage()               {}
func (*ReportUnitsCompletionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReportUnitsCompletionRequest) GetUnitResult() *CommandResult {
	if m != nil {
		return m.UnitResult
	}
	return nil
}

func (m *ReportUnitsCompletionRequest) GetAdditionalResult() *CommandResult {
	if m != nil {
		return m.AdditionalResult
	}
	return nil
}

type ReportUnitsCompletionResponse struct {
}

func (m *ReportUnitsCompletionResponse) Reset()                    { *m = ReportUnitsCompletionResponse{} }
func (m *ReportUnitsCompletionResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportUnitsCompletionResponse) ProtoMessage()               {}
func (*ReportUnitsCompletionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*CommandResult)(nil), "privet.CommandResult")
	proto.RegisterType((*PopUnitsRequest)(nil), "privet.PopUnitsRequest")
	proto.RegisterType((*PopUnitsResponse)(nil), "privet.PopUnitsResponse")
	proto.RegisterType((*ReportUnitsCompletionRequest)(nil), "privet.ReportUnitsCompletionRequest")
	proto.RegisterType((*ReportUnitsCompletionResponse)(nil), "privet.ReportUnitsCompletionResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for JobMaster service

type JobMasterClient interface {
	PopUnits(ctx context.Context, in *PopUnitsRequest, opts ...grpc.CallOption) (*PopUnitsResponse, error)
	ReportUnitsCompletion(ctx context.Context, in *ReportUnitsCompletionRequest, opts ...grpc.CallOption) (*ReportUnitsCompletionResponse, error)
}

type jobMasterClient struct {
	cc *grpc.ClientConn
}

func NewJobMasterClient(cc *grpc.ClientConn) JobMasterClient {
	return &jobMasterClient{cc}
}

func (c *jobMasterClient) PopUnits(ctx context.Context, in *PopUnitsRequest, opts ...grpc.CallOption) (*PopUnitsResponse, error) {
	out := new(PopUnitsResponse)
	err := grpc.Invoke(ctx, "/privet.JobMaster/PopUnits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobMasterClient) ReportUnitsCompletion(ctx context.Context, in *ReportUnitsCompletionRequest, opts ...grpc.CallOption) (*ReportUnitsCompletionResponse, error) {
	out := new(ReportUnitsCompletionResponse)
	err := grpc.Invoke(ctx, "/privet.JobMaster/ReportUnitsCompletion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for JobMaster service

type JobMasterServer interface {
	PopUnits(context.Context, *PopUnitsRequest) (*PopUnitsResponse, error)
	ReportUnitsCompletion(context.Context, *ReportUnitsCompletionRequest) (*ReportUnitsCompletionResponse, error)
}

func RegisterJobMasterServer(s *grpc.Server, srv JobMasterServer) {
	s.RegisterService(&_JobMaster_serviceDesc, srv)
}

func _JobMaster_PopUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobMasterServer).PopUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privet.JobMaster/PopUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobMasterServer).PopUnits(ctx, req.(*PopUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobMaster_ReportUnitsCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUnitsCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobMasterServer).ReportUnitsCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/privet.JobMaster/ReportUnitsCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobMasterServer).ReportUnitsCompletion(ctx, req.(*ReportUnitsCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobMaster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "privet.JobMaster",
	HandlerType: (*JobMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PopUnits",
			Handler:    _JobMaster_PopUnits_Handler,
		},
		{
			MethodName: "ReportUnitsCompletion",
			Handler:    _JobMaster_ReportUnitsCompletion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x52, 0x5f, 0x4f, 0xfa, 0x30,
	0x14, 0xfd, 0x01, 0xbf, 0x2d, 0xe3, 0x82, 0x82, 0x8d, 0xc8, 0x44, 0x8d, 0x66, 0xd1, 0xc8, 0x13,
	0x0f, 0x98, 0xf8, 0xe0, 0x8b, 0x89, 0xf8, 0xa2, 0x89, 0x09, 0x69, 0x62, 0x7c, 0x5c, 0x86, 0xad,
	0xc9, 0x12, 0x58, 0x6b, 0xd7, 0x1a, 0x3f, 0x91, 0x9f, 0xc0, 0x0f, 0x68, 0xff, 0x6c, 0x82, 0xa0,
	0xe8, 0xd3, 0x76, 0xef, 0x39, 0xf7, 0x9c, 0xf6, 0xdc, 0x42, 0x93, 0x8b, 0xf4, 0x85, 0xca, 0x01,
	0x17, 0x4c, 0x32, 0xe4, 0xbb, 0x2a, 0xba, 0x86, 0x8d, 0x11, 0x9b, 0xcd, 0x92, 0x8c, 0x60, 0x9a,
	0xab, 0xa9, 0x44, 0x7b, 0x50, 0xa7, 0xaf, 0xa9, 0x8c, 0x1f, 0x19, 0xa1, 0x61, 0xe5, 0xa8, 0xd2,
	0xf7, 0x70, 0x60, 0x1a, 0x23, 0x5d, 0xa3, 0x1d, 0xf0, 0x99, 0x92, 0x5c, 0xc9, 0xb0, 0xaa, 0x91,
	0x26, 0x2e, 0xaa, 0xe8, 0x01, 0x5a, 0x63, 0xc6, 0xef, 0xb3, 0x54, 0xe6, 0x98, 0x3e, 0x2b, 0x9a,
	0x5b, 0x1d, 0xa1, 0xb2, 0x8c, 0x8a, 0x38, 0x25, 0x56, 0xa7, 0x8e, 0x03, 0xd7, 0xb8, 0x21, 0xe8,
	0x14, 0x5a, 0xca, 0x90, 0x63, 0xe1, 0xd8, 0x94, 0x58, 0x41, 0x0f, 0x6f, 0xaa, 0x05, 0x0d, 0x4a,
	0xa2, 0x3e, 0xb4, 0xe7, 0xc2, 0x39, 0x67, 0x59, 0x4e, 0xd1, 0x36, 0x78, 0x96, 0xa5, 0x55, 0x6b,
	0x5a, 0xd5, 0x15, 0xd1, 0x5b, 0x15, 0xf6, 0x31, 0xe5, 0x4c, 0x48, 0xcb, 0xd6, 0x97, 0xe2, 0x53,
	0x2a, 0x53, 0x96, 0xfd, 0xe9, 0x40, 0x06, 0xb4, 0xf7, 0x37, 0x60, 0xb5, 0x00, 0x6d, 0x43, 0x83,
	0x9f, 0x86, 0xb5, 0x05, 0x43, 0x74, 0x0e, 0x0d, 0xf3, 0x13, 0x3b, 0x5a, 0xf8, 0x5f, 0x0f, 0x35,
	0x86, 0x9d, 0x41, 0x91, 0xf2, 0x97, 0x50, 0x31, 0x18, 0x66, 0x11, 0xf0, 0x05, 0xec, 0x26, 0x84,
	0xa4, 0xe6, 0x68, 0xc9, 0xb4, 0x98, 0x8e, 0xb9, 0xfe, 0xd2, 0x4c, 0x86, 0x9e, 0x56, 0x09, 0x70,
	0x77, 0x4e, 0x70, 0x43, 0x63, 0x07, 0xa3, 0x2b, 0xd8, 0x5a, 0x99, 0x0d, 0xfd, 0x75, 0xce, 0xed,
	0x65, 0xa9, 0xe8, 0x10, 0x0e, 0x7e, 0xc8, 0xc9, 0xe5, 0x3b, 0x7c, 0xaf, 0x40, 0xfd, 0x96, 0x4d,
	0xee, 0x12, 0xbd, 0x01, 0x81, 0x2e, 0x21, 0x28, 0x37, 0x80, 0xba, 0xa5, 0xc7, 0xd2, 0xb2, 0x7b,
	0xe1, 0x2a, 0xe0, 0xc4, 0xa2, 0x7f, 0xe8, 0x09, 0x3a, 0xdf, 0xfa, 0xa1, 0xe3, 0x72, 0x68, 0xdd,
	0xda, 0x7a, 0x27, 0xbf, 0xb0, 0x4a, 0x9f, 0x89, 0x6f, 0x1f, 0xf6, 0xd9, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xe2, 0x8c, 0xdd, 0xfe, 0xe8, 0x02, 0x00, 0x00,
}
