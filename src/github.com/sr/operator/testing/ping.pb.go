// Code generated by protoc-gen-go.
// source: testing/ping.proto
// DO NOT EDIT!

/*
Package operatortesting is a generated protocol buffer package.

It is generated from these files:
	testing/ping.proto

It has these top-level messages:
	PingerConfig
	PingRequest
*/
package operatortesting

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import operator "github.com/sr/operator"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingerConfig struct {
}

func (m *PingerConfig) Reset()                    { *m = PingerConfig{} }
func (m *PingerConfig) String() string            { return proto.CompactTextString(m) }
func (*PingerConfig) ProtoMessage()               {}
func (*PingerConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*PingerConfig)(nil), "testing.PingerConfig")
	proto.RegisterType((*PingRequest)(nil), "testing.PingRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Pinger service

type PingerClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*operator.Response, error)
	PingPong(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*operator.Response, error)
}

type pingerClient struct {
	cc *grpc.ClientConn
}

func NewPingerClient(cc *grpc.ClientConn) PingerClient {
	return &pingerClient{cc}
}

func (c *pingerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/testing.Pinger/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingerClient) PingPong(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/testing.Pinger/PingPong", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pinger service

type PingerServer interface {
	Ping(context.Context, *PingRequest) (*operator.Response, error)
	PingPong(context.Context, *PingRequest) (*operator.Response, error)
}

func RegisterPingerServer(s *grpc.Server, srv PingerServer) {
	s.RegisterService(&_Pinger_serviceDesc, srv)
}

func _Pinger_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Pinger/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pinger_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingerServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testing.Pinger/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingerServer).PingPong(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pinger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testing.Pinger",
	HandlerType: (*PingerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Pinger_Ping_Handler,
		},
		{
			MethodName: "PingPong",
			Handler:    _Pinger_PingPong_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("testing/ping.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2a, 0x49, 0x2d, 0x2e,
	0xc9, 0xcc, 0x4b, 0xd7, 0x2f, 0xc8, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62,
	0x87, 0x8a, 0x49, 0xf1, 0xe5, 0x17, 0xa4, 0x16, 0x25, 0x96, 0xe4, 0x17, 0x41, 0x24, 0x94, 0xf8,
	0xb8, 0x78, 0x02, 0x32, 0xf3, 0xd2, 0x53, 0x8b, 0x9c, 0xf3, 0xf3, 0xd2, 0x32, 0xd3, 0x95, 0xac,
	0xb8, 0xb8, 0x41, 0xfc, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x6d, 0x2e, 0xf6, 0x22,
	0x08, 0x53, 0x82, 0x51, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x50, 0x0f, 0x6e, 0x00, 0x54, 0x4d, 0x10,
	0x4c, 0x85, 0x51, 0x15, 0x17, 0x1b, 0xc4, 0x2c, 0x21, 0x03, 0x2e, 0x16, 0x10, 0x4b, 0x48, 0x44,
	0x0f, 0x6a, 0xaf, 0x1e, 0x92, 0xa1, 0x52, 0x42, 0xc8, 0x66, 0x14, 0x17, 0xe4, 0xe7, 0x15, 0xa7,
	0x0a, 0x99, 0x70, 0x71, 0x80, 0x94, 0x04, 0xe4, 0x93, 0xa2, 0x4b, 0x8a, 0x63, 0x52, 0x93, 0x24,
	0x0b, 0xc8, 0x9b, 0x4e, 0x82, 0x51, 0xfc, 0x30, 0x69, 0xa8, 0xe6, 0x24, 0x36, 0xb0, 0x0f, 0x8d,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x68, 0x5b, 0xa3, 0x10, 0x01, 0x00, 0x00,
}
