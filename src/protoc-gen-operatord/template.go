package operatord

import "text/template"

type mainDescriptor struct {
	DefaultAddress string
	Services       []*serviceDescriptor
}

type serviceDescriptor struct {
	CamelCaseName string
	ImportPath    string
	Name          string
	PackageName   string
}

var mainTemplate = template.Must(template.New("main-gen.go").Parse(`
// Code generated by protoc-gen-operatord.
package main

import (
	"fmt"
	"net"
	"os"
{{range .Services}}
	{{.PackageName}} "{{.ImportPath}}"
{{end}}
	"go.pedge.io/env"
	"google.golang.org/grpc"
)

type mainEnv struct {
	Address string
}

func run() error {
	mainEnv := &mainEnv{}
	if err := env.Populate(mainEnv); err != nil {
		return err
	}
	listener, err := net.Listen("tcp", mainEnv.Address)
	if err != nil {
		return err
	}
	server := grpc.NewServer()
{{range .Services}}
	{{.Name}}Env := &{{.Name}}.Env{}
	if err := env.Populate({{.Name}}Env); err != nil {
		return fmt.Errorf("service={{.Name}} %s", err)
	}
	if {{.Name}}Server, err := {{.Name}}.NewAPIServer({{.Name}}Env); err != nil {
		return fmt.Errorf("{{.Name}}: error loading server. %s", err)
	} else {
		{{.Name}}.Register{{.CamelCaseName}}Server(server, {{.Name}}Server)
	}
{{end}}
	fmt.Println(fmt.Sprintf("listening on %s", mainEnv.Address))
	return server.Serve(listener)
}

func main() {
	if err := run(); err != nil {
		fmt.Fprintf(os.Stderr, "operatord error: %v\n", err)
		os.Exit(1)
	}
}
`))
