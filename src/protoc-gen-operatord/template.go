package operatord

import "text/template"

type mainDescriptor struct {
	DefaultAddress string
	Services       []*serviceDescriptor
}

type serviceDescriptor struct {
	CamelCaseName string
	ImportPath    string
	Name          string
	PackageName   string
}

var mainTemplate = template.Must(template.New("main-gen.go").Parse(
	`// Code generated by protoc-gen-operatord.
package main

import (
	"os"
{{range .Services}}
	{{.PackageName}} "{{.ImportPath}}"
{{end}}
	"go.pedge.io/env"
	"github.com/sr/operator/src/operator"
)

func run() error {
	config := &operator.Config{}
	if err := env.Populate(config); err != nil {
		return err
	}
	server := operator.NewServer(config.Address)
{{range .Services}}
	{{.Name}}Env := &{{.Name}}.Env{}
	if err := env.Populate({{.Name}}Env); err != nil {
		operator.LogServiceStartupError("{{.Name}}", err)
	} else {
		if {{.Name}}Server, err := {{.Name}}.NewAPIServer({{.Name}}Env); err != nil {
			operator.LogServiceStartupError("{{.Name}}", err)
		} else {
			{{.Name}}.Register{{.CamelCaseName}}Server(server.Server(), {{.Name}}Server)
		}
	}
{{end}}
	return server.Serve()
}

func main() {
	if err := run(); err != nil {
		fmt.Fprintf(os.Stderr, "operatord error: %v\n", err)
		os.Exit(1)
	}
}
`))
