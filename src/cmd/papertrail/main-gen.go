// Code generated by protoc-gen-gogo.
// source: services/papertrail/papertrail.proto
// DO NOT EDIT!

/*
Package papertrail is a generated protocol buffer package.

It is generated from these files:
	services/papertrail/papertrail.proto

It has these top-level messages:
	SearchRequest
	SearchResponse
	LogEvent
*/
package main

import golang_org_x_net_context "golang.org/x/net/context"
import flag "flag"
import github_com_sr_operator_src_services_papertrail "github.com/sr/operator/src/services/papertrail"
import google_golang_org_grpc "google.golang.org/grpc"
import os "os"
import github_com_sr_operator_src_proto "github.com/sr/operator/src/proto"
import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// discarding unused import proto1 "proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

const commandName = "papertrail"

type serviceCommand struct {
	client github_com_sr_operator_src_services_papertrail.PapertrailServiceClient
}

func newServiceCommand(client github_com_sr_operator_src_services_papertrail.PapertrailServiceClient) *serviceCommand {
	return &serviceCommand{client}
}

func (s *serviceCommand) Search() (*github_com_sr_operator_src_proto.Output, error) {
	flags := flag.NewFlagSet("Search", flag.ExitOnError)
	query := flags.String("query", "", "")
	flags.Parse(os.Args[2:])
	response, err := s.client.Search(
		golang_org_x_net_context.Background(),
		&github_com_sr_operator_src_services_papertrail.SearchRequest{
			Query: *query,
		},
	)
	if err != nil {
		return nil, err
	}
	return response.Output, nil
}

func (s *serviceCommand) handle(method string) (*github_com_sr_operator_src_proto.Output, error) {
	switch method {
	case "Search":
		return s.Search()
	default:
		return nil, fmt.Errorf("unspported method: %s", method)
	}
}

func main() {
	conn, err := google_golang_org_grpc.Dial(":3000", google_golang_org_grpc.WithInsecure())
	if err != nil {
		panic(err)
	}
	defer conn.Close()
	if len(os.Args) < 2 {
		fmt.Fprintf(os.Stderr, "Usage: %s <service> \n", commandName)
		os.Exit(1)
	}
	client := github_com_sr_operator_src_services_papertrail.NewPapertrailServiceClient(conn)
	service := newServiceCommand(client)
	method := os.Args[1]
	output, err := service.handle(method)
	if err != nil {
		fmt.Fprintf(os.Stderr, "%v\n", err)
		os.Exit(1)
	}
	fmt.Fprintln(os.Stdout, output.PlainText)
}
