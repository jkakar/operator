
// Code generated by protoc-gen-operatord.
package main

import (
	"fmt"
	"net"
	"os"

	buildkite "github.com/sr/operator/src/services/buildkite"

	gcloud "github.com/sr/operator/src/services/gcloud"

	papertrail "github.com/sr/operator/src/services/papertrail"

	"go.pedge.io/env"
	"google.golang.org/grpc"
)

type mainEnv struct {
	Address string
}

func run() error {
	mainEnv := &mainEnv{}
	if err := env.Populate(mainEnv); err != nil {
		return err
	}
	listener, err := net.Listen("tcp", mainEnv.Address)
	if err != nil {
		return err
	}
	server := grpc.NewServer()

	buildkiteEnv := &buildkite.Env{}
	if err := env.Populate(buildkiteEnv); err != nil {
		return fmt.Errorf("service=buildkite %s", err)
	}
	if buildkiteServer, err := buildkite.NewAPIServer(buildkiteEnv); err != nil {
		return fmt.Errorf("buildkite: error loading server. %s", err)
	} else {
		buildkite.RegisterBuildkiteServiceServer(server, buildkiteServer)
	}

	gcloudEnv := &gcloud.Env{}
	if err := env.Populate(gcloudEnv); err != nil {
		return fmt.Errorf("service=gcloud %s", err)
	}
	if gcloudServer, err := gcloud.NewAPIServer(gcloudEnv); err != nil {
		return fmt.Errorf("gcloud: error loading server. %s", err)
	} else {
		gcloud.RegisterGCloudServiceServer(server, gcloudServer)
	}

	papertrailEnv := &papertrail.Env{}
	if err := env.Populate(papertrailEnv); err != nil {
		return fmt.Errorf("service=papertrail %s", err)
	}
	if papertrailServer, err := papertrail.NewAPIServer(papertrailEnv); err != nil {
		return fmt.Errorf("papertrail: error loading server. %s", err)
	} else {
		papertrail.RegisterPapertrailServiceServer(server, papertrailServer)
	}

	fmt.Println(fmt.Sprintf("listening on %s", mainEnv.Address))
	return server.Serve(listener)
}

func main() {
	if err := run(); err != nil {
		fmt.Fprintf(os.Stderr, "operatord error: %v\n", err)
		os.Exit(1)
	}
}
