// Code generated by protoc-gen-operatorcmd
package main

import (
	"flag"
	"fmt"
	buildkite "services/buildkite"
	gcloud "services/gcloud"
	papertrail "services/papertrail"
	"go.pedge.io/env"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"os"
)

const (
	usage = `Usage: operator <service> <command>

Use  "operator help <service>" for help with a particular service.

Available services:

buildkite
  Interact with the Buildkite.com Continuous Integration server. Retrieve the
  status of projects, setup new ones, and trigger builds.

gcloud
  Undocumented.

papertrail
  Undocumented.
`
	usageServiceBuildkite = `Usage: operator buildkite [command]

Interact with the Buildkite.com Continuous Integration server. Retrieve the
status of projects, setup new ones, and trigger builds.

Available Commands:

status
 List the status of all (i.e. the status of the last build) of one or  all
 projects.

list-builds
 List the last builds of one or all projects, optionally limited to a  branch.
`

	usageServiceBuildkiteStatus = `Usage:  buildkite status [arguments]

List the status of all (i.e. the status of the last build) of one or  all
projects.`
	usageServiceBuildkiteListBuilds = `Usage:  buildkite list-builds [arguments]

List the last builds of one or all projects, optionally limited to a  branch.`
	usageServiceGcloud = `Usage: operator gcloud [command]

Undocumented.

Available Commands:

create-container-cluster
 Undocumented.

list-instances
 Undocumented.
`

	usageServiceGcloudCreateContainerCluster = `Usage:  gcloud create-container-cluster [arguments]

Undocumented.`
	usageServiceGcloudListInstances = `Usage:  gcloud list-instances [arguments]

Undocumented.`
	usageServicePapertrail = `Usage: operator papertrail [command]

Undocumented.

Available Commands:

search
 Undocumented.
`

	usageServicePapertrailSearch = `Usage:  papertrail search [arguments]

Undocumented.`
)

type mainEnv struct {
	Address string `env:"OPERATORD_ADDRESS,default=localhost:3000"`
}

func dial(address string) (*grpc.ClientConn, error) {
	conn, err := grpc.Dial(address, grpc.WithInsecure())
	if err != nil {
		return nil, err
	}
	return conn, nil
}

func isHelp(arg string) bool {
	return arg == "-h" || arg == "--help" || arg == "help"
}
func doBuildkiteStatus(address string) (string, error) {
	flags := flag.NewFlagSet("status", flag.ExitOnError)
	slug := flags.String("slug", "", "")
	flags.Parse(os.Args[3:])
	if len(os.Args) >= 4 && isHelp(os.Args[3]) {
		fmt.Fprintf(os.Stderr, "%s\n\n", usageServiceBuildkiteStatus)
		flags.PrintDefaults()
		os.Exit(2)
	}
	conn, err := dial(address)
	if err != nil {
		return "", err
	}
	defer conn.Close()
	client := buildkite.NewBuildkiteServiceClient(conn)
	response, err := client.Status(
		context.Background(),
		&buildkite.StatusRequest{
			Slug: *slug,
		},
	)
	if err != nil {
		return "", err
	}
	return response.Output.PlainText, nil
}

func doBuildkiteListBuilds(address string) (string, error) {
	flags := flag.NewFlagSet("list-builds", flag.ExitOnError)
	project_slug := flags.String("project-slug", "", "")
	flags.Parse(os.Args[3:])
	if len(os.Args) >= 4 && isHelp(os.Args[3]) {
		fmt.Fprintf(os.Stderr, "%s\n\n", usageServiceBuildkiteListBuilds)
		flags.PrintDefaults()
		os.Exit(2)
	}
	conn, err := dial(address)
	if err != nil {
		return "", err
	}
	defer conn.Close()
	client := buildkite.NewBuildkiteServiceClient(conn)
	response, err := client.ListBuilds(
		context.Background(),
		&buildkite.ListBuildsRequest{
			ProjectSlug: *project_slug,
		},
	)
	if err != nil {
		return "", err
	}
	return response.Output.PlainText, nil
}

func doGcloudCreateContainerCluster(address string) (string, error) {
	flags := flag.NewFlagSet("create-container-cluster", flag.ExitOnError)
	project_id := flags.String("project-id", "", "")
	name := flags.String("name", "", "")
	node_count := flags.String("node-count", "", "")
	zone := flags.String("zone", "", "")
	flags.Parse(os.Args[3:])
	if len(os.Args) >= 4 && isHelp(os.Args[3]) {
		fmt.Fprintf(os.Stderr, "%s\n\n", usageServiceGcloudCreateContainerCluster)
		flags.PrintDefaults()
		os.Exit(2)
	}
	conn, err := dial(address)
	if err != nil {
		return "", err
	}
	defer conn.Close()
	client := gcloud.NewGcloudServiceClient(conn)
	response, err := client.CreateContainerCluster(
		context.Background(),
		&gcloud.CreateContainerClusterRequest{
			ProjectId: *project_id,
			Name:      *name,
			NodeCount: *node_count,
			Zone:      *zone,
		},
	)
	if err != nil {
		return "", err
	}
	return response.Output.PlainText, nil
}

func doGcloudListInstances(address string) (string, error) {
	flags := flag.NewFlagSet("list-instances", flag.ExitOnError)
	project_id := flags.String("project-id", "", "")
	flags.Parse(os.Args[3:])
	if len(os.Args) >= 4 && isHelp(os.Args[3]) {
		fmt.Fprintf(os.Stderr, "%s\n\n", usageServiceGcloudListInstances)
		flags.PrintDefaults()
		os.Exit(2)
	}
	conn, err := dial(address)
	if err != nil {
		return "", err
	}
	defer conn.Close()
	client := gcloud.NewGcloudServiceClient(conn)
	response, err := client.ListInstances(
		context.Background(),
		&gcloud.ListInstancesRequest{
			ProjectId: *project_id,
		},
	)
	if err != nil {
		return "", err
	}
	return response.Output.PlainText, nil
}

func doPapertrailSearch(address string) (string, error) {
	flags := flag.NewFlagSet("search", flag.ExitOnError)
	query := flags.String("query", "", "")
	flags.Parse(os.Args[3:])
	if len(os.Args) >= 4 && isHelp(os.Args[3]) {
		fmt.Fprintf(os.Stderr, "%s\n\n", usageServicePapertrailSearch)
		flags.PrintDefaults()
		os.Exit(2)
	}
	conn, err := dial(address)
	if err != nil {
		return "", err
	}
	defer conn.Close()
	client := papertrail.NewPapertrailServiceClient(conn)
	response, err := client.Search(
		context.Background(),
		&papertrail.SearchRequest{
			Query: *query,
		},
	)
	if err != nil {
		return "", err
	}
	return response.Output.PlainText, nil
}
func main() {
	status, output, err := run()
	if status != 0 {
		var errS string
		if output == "" {
			errS = err.Error()
		} else {
			errS = output
		}
		fmt.Fprintf(os.Stderr, "%s\n", errS)
		os.Exit(1)
	}
	fmt.Fprintf(os.Stdout, "%s\n", output)
	os.Exit(0)
}

func run() (int, string, error) {
	config := &mainEnv{}
	if err := env.Populate(config); err != nil {
		return 1, "", err
	}
	if len(os.Args) == 1 || isHelp(os.Args[1]) {
		return 2, usage, nil
	}
	if len(os.Args) >= 2 {
		service := os.Args[1]
		switch service {
		case "buildkite":
			if len(os.Args) == 2 || isHelp(os.Args[2]) {
				return 2, usageServiceBuildkite, nil
			}
			command := os.Args[2]
			switch command {
			case "status":
				output, err := doBuildkiteStatus(config.Address)
				if err != nil {
					return 1, "", err
				}
				return 0, output, nil
			case "list-builds":
				output, err := doBuildkiteListBuilds(config.Address)
				if err != nil {
					return 1, "", err
				}
				return 0, output, nil
			default:
				return 1, "", fmt.Errorf("no such command: %s", command)
			}
		case "gcloud":
			if len(os.Args) == 2 || isHelp(os.Args[2]) {
				return 2, usageServiceGcloud, nil
			}
			command := os.Args[2]
			switch command {
			case "create-container-cluster":
				output, err := doGcloudCreateContainerCluster(config.Address)
				if err != nil {
					return 1, "", err
				}
				return 0, output, nil
			case "list-instances":
				output, err := doGcloudListInstances(config.Address)
				if err != nil {
					return 1, "", err
				}
				return 0, output, nil
			default:
				return 1, "", fmt.Errorf("no such command: %s", command)
			}
		case "papertrail":
			if len(os.Args) == 2 || isHelp(os.Args[2]) {
				return 2, usageServicePapertrail, nil
			}
			command := os.Args[2]
			switch command {
			case "search":
				output, err := doPapertrailSearch(config.Address)
				if err != nil {
					return 1, "", err
				}
				return 0, output, nil
			default:
				return 1, "", fmt.Errorf("no such command: %s", command)
			}
		default:
			return 1, "", fmt.Errorf("no such service: %s", service)
		}
	}
	return 1, "", fmt.Errorf("BUG this should never happen")
}
