// Code generated by protoc-gen-go.
// source: pb/ping.proto
// DO NOT EDIT!

package breadpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import operator "github.com/sr/operator"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SalesforceAuthRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *SalesforceAuthRequest) Reset()                    { *m = SalesforceAuthRequest{} }
func (m *SalesforceAuthRequest) String() string            { return proto.CompactTextString(m) }
func (*SalesforceAuthRequest) ProtoMessage()               {}
func (*SalesforceAuthRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *SalesforceAuthRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type PingRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Arg1    string            `protobuf:"bytes,2,opt,name=arg1" json:"arg1,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *PingRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type SlowLorisRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	Wait    string            `protobuf:"bytes,2,opt,name=wait" json:"wait,omitempty"`
}

func (m *SlowLorisRequest) Reset()                    { *m = SlowLorisRequest{} }
func (m *SlowLorisRequest) String() string            { return proto.CompactTextString(m) }
func (*SlowLorisRequest) ProtoMessage()               {}
func (*SlowLorisRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *SlowLorisRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type WhoamiRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *WhoamiRequest) Reset()                    { *m = WhoamiRequest{} }
func (m *WhoamiRequest) String() string            { return proto.CompactTextString(m) }
func (*WhoamiRequest) ProtoMessage()               {}
func (*WhoamiRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *WhoamiRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func init() {
	proto.RegisterType((*SalesforceAuthRequest)(nil), "bread.SalesforceAuthRequest")
	proto.RegisterType((*PingRequest)(nil), "bread.PingRequest")
	proto.RegisterType((*SlowLorisRequest)(nil), "bread.SlowLorisRequest")
	proto.RegisterType((*WhoamiRequest)(nil), "bread.WhoamiRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Ping service

type PingClient interface {
	// Test authentication via Salesforce Authenticator push notification
	SalesforceAuth(ctx context.Context, in *SalesforceAuthRequest, opts ...grpc.CallOption) (*operator.Response, error)
	// Reply with PONG if everything is working
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*operator.Response, error)
	// Trigger a slow request, for testing timeout handling
	SlowLoris(ctx context.Context, in *SlowLorisRequest, opts ...grpc.CallOption) (*operator.Response, error)
	// Reply with the email of the current authenticated user
	Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*operator.Response, error)
}

type pingClient struct {
	cc *grpc.ClientConn
}

func NewPingClient(cc *grpc.ClientConn) PingClient {
	return &pingClient{cc}
}

func (c *pingClient) SalesforceAuth(ctx context.Context, in *SalesforceAuthRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Ping/SalesforceAuth", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Ping/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingClient) SlowLoris(ctx context.Context, in *SlowLorisRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Ping/SlowLoris", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingClient) Whoami(ctx context.Context, in *WhoamiRequest, opts ...grpc.CallOption) (*operator.Response, error) {
	out := new(operator.Response)
	err := grpc.Invoke(ctx, "/bread.Ping/Whoami", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ping service

type PingServer interface {
	// Test authentication via Salesforce Authenticator push notification
	SalesforceAuth(context.Context, *SalesforceAuthRequest) (*operator.Response, error)
	// Reply with PONG if everything is working
	Ping(context.Context, *PingRequest) (*operator.Response, error)
	// Trigger a slow request, for testing timeout handling
	SlowLoris(context.Context, *SlowLorisRequest) (*operator.Response, error)
	// Reply with the email of the current authenticated user
	Whoami(context.Context, *WhoamiRequest) (*operator.Response, error)
}

func RegisterPingServer(s *grpc.Server, srv PingServer) {
	s.RegisterService(&_Ping_serviceDesc, srv)
}

func _Ping_SalesforceAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesforceAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServer).SalesforceAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Ping/SalesforceAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServer).SalesforceAuth(ctx, req.(*SalesforceAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ping_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Ping/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ping_SlowLoris_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlowLorisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServer).SlowLoris(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Ping/SlowLoris",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServer).SlowLoris(ctx, req.(*SlowLorisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ping_Whoami_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhoamiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServer).Whoami(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Ping/Whoami",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServer).Whoami(ctx, req.(*WhoamiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ping_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bread.Ping",
	HandlerType: (*PingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SalesforceAuth",
			Handler:    _Ping_SalesforceAuth_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Ping_Ping_Handler,
		},
		{
			MethodName: "SlowLoris",
			Handler:    _Ping_SlowLoris_Handler,
		},
		{
			MethodName: "Whoami",
			Handler:    _Ping_Whoami_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() { proto.RegisterFile("pb/ping.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x92, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x89, 0xd4, 0x96, 0xdc, 0x52, 0xd1, 0x8b, 0x62, 0x29, 0x2e, 0x4a, 0x40, 0x28, 0x08,
	0x13, 0x8c, 0x1b, 0x17, 0x6e, 0x2c, 0x2e, 0x45, 0x24, 0x59, 0x08, 0xee, 0x66, 0xea, 0x98, 0x0c,
	0xb4, 0xb9, 0xe3, 0xcc, 0x84, 0xbe, 0xb2, 0x8f, 0x21, 0xcd, 0x4f, 0x6d, 0x4a, 0x56, 0xd9, 0x9d,
	0xc5, 0xf9, 0xce, 0x70, 0x3f, 0x06, 0x26, 0x5a, 0x84, 0x5a, 0xe5, 0x29, 0xd3, 0x86, 0x1c, 0xe1,
	0xa9, 0x30, 0x92, 0x7f, 0xcd, 0x6e, 0x53, 0xe5, 0xb2, 0x42, 0xb0, 0x15, 0x6d, 0x42, 0x6b, 0x42,
	0xd2, 0xd2, 0x70, 0x47, 0xff, 0xa1, 0x6a, 0x07, 0x2f, 0x70, 0x95, 0xf0, 0xb5, 0xb4, 0xdf, 0x64,
	0x56, 0xf2, 0xb9, 0x70, 0x59, 0x2c, 0x7f, 0x0a, 0x69, 0x1d, 0xde, 0xc1, 0xc8, 0x54, 0x71, 0xea,
	0xcd, 0xbd, 0xc5, 0x38, 0xba, 0x60, 0x7b, 0xb4, 0xee, 0xc4, 0x4d, 0x23, 0x78, 0x83, 0xf1, 0xbb,
	0xca, 0xd3, 0x3e, 0x2c, 0x22, 0x0c, 0xb8, 0x49, 0xef, 0xa7, 0x27, 0x73, 0x6f, 0xe1, 0xc7, 0x65,
	0x0e, 0x12, 0x38, 0x4f, 0xd6, 0xb4, 0x7d, 0x25, 0xa3, 0x6c, 0xdf, 0xd1, 0x2d, 0x57, 0xae, 0x19,
	0xdd, 0xe5, 0xe0, 0x09, 0x26, 0x1f, 0x19, 0xf1, 0x8d, 0xea, 0xb3, 0x18, 0xfd, 0x7a, 0x30, 0xd8,
	0xdd, 0x88, 0x4b, 0x38, 0x6b, 0x1b, 0xc3, 0x1b, 0x56, 0x2a, 0x67, 0x9d, 0x22, 0x67, 0x78, 0x38,
	0x6a, 0x35, 0xe5, 0x56, 0x22, 0xab, 0xb7, 0xb0, 0x26, 0x0f, 0xe4, 0x75, 0xf6, 0x1f, 0xc1, 0xdf,
	0xfb, 0xc0, 0xeb, 0xe6, 0xb9, 0x23, 0x43, 0x9d, 0x64, 0x04, 0xc3, 0xea, 0x68, 0xbc, 0xac, 0xb1,
	0x96, 0x83, 0x2e, 0x66, 0xe9, 0x7f, 0x8e, 0xca, 0xaa, 0x16, 0x62, 0x58, 0xfe, 0x92, 0x87, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x3e, 0xfa, 0x4a, 0x64, 0x02, 0x00, 0x00,
}
