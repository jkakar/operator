// Code generated by protoc-gen-go.
// source: pb/deploy.proto
// DO NOT EDIT!

package breadpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import operator "github.com/sr/operator"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ListAppsRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
}

func (m *ListAppsRequest) Reset()                    { *m = ListAppsRequest{} }
func (m *ListAppsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAppsRequest) ProtoMessage()               {}
func (*ListAppsRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ListAppsRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type ListAppsResponse struct {
	Message string `protobuf:"bytes,1,opt,name=Message,json=message" json:"Message,omitempty"`
}

func (m *ListAppsResponse) Reset()                    { *m = ListAppsResponse{} }
func (m *ListAppsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAppsResponse) ProtoMessage()               {}
func (*ListAppsResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type TriggerRequest struct {
	Request *operator.Request `protobuf:"bytes,1,opt,name=request" json:"request,omitempty"`
	App     string            `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Build   string            `protobuf:"bytes,3,opt,name=build" json:"build,omitempty"`
}

func (m *TriggerRequest) Reset()                    { *m = TriggerRequest{} }
func (m *TriggerRequest) String() string            { return proto.CompactTextString(m) }
func (*TriggerRequest) ProtoMessage()               {}
func (*TriggerRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *TriggerRequest) GetRequest() *operator.Request {
	if m != nil {
		return m.Request
	}
	return nil
}

type TriggerResponse struct {
	Message string `protobuf:"bytes,1,opt,name=Message,json=message" json:"Message,omitempty"`
}

func (m *TriggerResponse) Reset()                    { *m = TriggerResponse{} }
func (m *TriggerResponse) String() string            { return proto.CompactTextString(m) }
func (*TriggerResponse) ProtoMessage()               {}
func (*TriggerResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func init() {
	proto.RegisterType((*ListAppsRequest)(nil), "deploy.ListAppsRequest")
	proto.RegisterType((*ListAppsResponse)(nil), "deploy.ListAppsResponse")
	proto.RegisterType((*TriggerRequest)(nil), "deploy.TriggerRequest")
	proto.RegisterType((*TriggerResponse)(nil), "deploy.TriggerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Deploy service

type DeployClient interface {
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error)
}

type deployClient struct {
	cc *grpc.ClientConn
}

func NewDeployClient(cc *grpc.ClientConn) DeployClient {
	return &deployClient{cc}
}

func (c *deployClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/ListApps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployClient) Trigger(ctx context.Context, in *TriggerRequest, opts ...grpc.CallOption) (*TriggerResponse, error) {
	out := new(TriggerResponse)
	err := grpc.Invoke(ctx, "/deploy.Deploy/Trigger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Deploy service

type DeployServer interface {
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	Trigger(context.Context, *TriggerRequest) (*TriggerResponse, error)
}

func RegisterDeployServer(s *grpc.Server, srv DeployServer) {
	s.RegisterService(&_Deploy_serviceDesc, srv)
}

func _Deploy_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deploy_Trigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployServer).Trigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deploy.Deploy/Trigger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployServer).Trigger(ctx, req.(*TriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deploy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deploy.Deploy",
	HandlerType: (*DeployServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApps",
			Handler:    _Deploy_ListApps_Handler,
		},
		{
			MethodName: "Trigger",
			Handler:    _Deploy_Trigger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor2,
}

func init() { proto.RegisterFile("pb/deploy.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x48, 0xd2, 0x4f,
	0x49, 0x2d, 0xc8, 0xc9, 0xaf, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4,
	0xf8, 0xf2, 0x0b, 0x52, 0x8b, 0x12, 0x4b, 0xf2, 0x8b, 0x20, 0xe2, 0x4a, 0x76, 0x5c, 0xfc, 0x3e,
	0x99, 0xc5, 0x25, 0x8e, 0x05, 0x05, 0xc5, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0xda,
	0x5c, 0xec, 0x45, 0x10, 0xa6, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0xa0, 0x1e, 0x5c, 0x13,
	0x54, 0x4d, 0x10, 0x4c, 0x85, 0x92, 0x0e, 0x97, 0x00, 0x42, 0x7f, 0x71, 0x41, 0x7e, 0x5e, 0x71,
	0xaa, 0x90, 0x04, 0x17, 0xbb, 0x6f, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0x2a, 0xd8, 0x00, 0xce, 0x20,
	0xf6, 0x5c, 0x08, 0x57, 0x29, 0x95, 0x8b, 0x2f, 0xa4, 0x28, 0x33, 0x3d, 0x3d, 0xb5, 0x88, 0x1c,
	0xcb, 0x84, 0x04, 0xb8, 0x98, 0x13, 0x0b, 0x0a, 0x24, 0x98, 0xc0, 0x86, 0x82, 0x98, 0x42, 0x22,
	0x5c, 0xac, 0x49, 0xa5, 0x99, 0x39, 0x29, 0x12, 0xcc, 0x60, 0x31, 0x08, 0x47, 0x49, 0x9b, 0x8b,
	0x1f, 0x6e, 0x0d, 0x21, 0x37, 0x19, 0xf5, 0x33, 0x72, 0xb1, 0xb9, 0x80, 0x03, 0x47, 0xc8, 0x96,
	0x8b, 0x03, 0xe6, 0x19, 0x21, 0x71, 0x3d, 0x68, 0xf8, 0xa1, 0x05, 0x8f, 0x94, 0x04, 0xa6, 0x04,
	0xd4, 0x0e, 0x2b, 0x2e, 0x76, 0xa8, 0xb5, 0x42, 0x62, 0x30, 0x45, 0xa8, 0xde, 0x95, 0x12, 0xc7,
	0x10, 0x87, 0xe8, 0x95, 0xe2, 0x9a, 0xd4, 0x24, 0x09, 0x8d, 0x23, 0x27, 0xce, 0x28, 0xf6, 0xa4,
	0xa2, 0xd4, 0xc4, 0x94, 0x82, 0xa4, 0x24, 0x36, 0x70, 0x2c, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xee, 0x42, 0xdb, 0x65, 0xd0, 0x01, 0x00, 0x00,
}
