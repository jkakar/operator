// Code generated by protoc-gen-operatord
package main

import (
	"github.com/sr/operator"
	"golang.org/x/net/context"
	"google.golang.org/grpc"

	breadpb "bread/pb"
)

func invoker(ctx context.Context, conn *grpc.ClientConn, req *operator.Request) (bool, error) {
	if req.Call.Service == "ci" {
		if req.Call.Method == "listBuilds" {
			client := breadpb.NewBambooClient(conn)
			_, err := client.ListBuilds(
				ctx,
				&breadpb.ListBuildsRequest{
					Request: req,
					Plan:    req.Call.Args["plan"],
				},
			)
			if err != nil {
				return true, err
			}
			return true, nil
		}
	}
	if req.Call.Service == "deploy" {
		if req.Call.Method == "listApps" {
			client := breadpb.NewDeployClient(conn)
			_, err := client.ListApps(
				ctx,
				&breadpb.ListAppsRequest{
					Request: req,
				},
			)
			if err != nil {
				return true, err
			}
			return true, nil
		}
		if req.Call.Method == "trigger" {
			client := breadpb.NewDeployClient(conn)
			_, err := client.Trigger(
				ctx,
				&breadpb.TriggerRequest{
					Request: req,
					App:     req.Call.Args["app"],
					Build:   req.Call.Args["build"],
				},
			)
			if err != nil {
				return true, err
			}
			return true, nil
		}
	}
	if req.Call.Service == "ping" {
		if req.Call.Method == "otp" {
			client := breadpb.NewPingerClient(conn)
			_, err := client.Otp(
				ctx,
				&breadpb.OtpRequest{
					Request: req,
				},
			)
			if err != nil {
				return true, err
			}
			return true, nil
		}
		if req.Call.Method == "ping" {
			client := breadpb.NewPingerClient(conn)
			_, err := client.Ping(
				ctx,
				&breadpb.PingRequest{
					Request: req,
					Arg1:    req.Call.Args["arg1"],
				},
			)
			if err != nil {
				return true, err
			}
			return true, nil
		}
		if req.Call.Method == "whoami" {
			client := breadpb.NewPingerClient(conn)
			_, err := client.Whoami(
				ctx,
				&breadpb.WhoamiRequest{
					Request: req,
				},
			)
			if err != nil {
				return true, err
			}
			return true, nil
		}
	}
	return false, nil
}
