// Code generated by protoc-gen-operatord
package main

import (
	"errors"
	"flag"
	"os"
	"strings"

	"google.golang.org/grpc"

	bamboo "bread/bamboo"
	deploy "bread/deploy"
	pinger "bread/ping"
)

func buildOperatorServer(
	server *grpc.Server,
	flags *flag.FlagSet,
) (map[string]error, error) {
	ciConfig := &bamboo.BambooConfig{}
	deployConfig := &deploy.DeployConfig{}
	pingerConfig := &pinger.PingerConfig{}
	flags.StringVar(&ciConfig.BambooUsername, "ci-BambooUsername", "", "")
	flags.StringVar(&ciConfig.BambooPassword, "ci-BambooPassword", "", "")
	flags.StringVar(&ciConfig.BambooUrl, "ci-BambooUrl", "", "")
	flags.StringVar(&deployConfig.AwsRegion, "deploy-AwsRegion", "", "")
	flags.StringVar(&deployConfig.CanoeEcsService, "deploy-CanoeEcsService", "", "")
	flags.StringVar(&deployConfig.DeployTimeout, "deploy-DeployTimeout", "", "")
	services := make(map[string]error)
	if err := flags.Parse(os.Args[1:]); err != nil {
		return services, err
	}
	errs := make(map[string][]string)
	if ciConfig.BambooUsername == "" {
		errs["ci"] = append(errs["ci"], "BambooUsername")
	}
	if ciConfig.BambooPassword == "" {
		errs["ci"] = append(errs["ci"], "BambooPassword")
	}
	if ciConfig.BambooUrl == "" {
		errs["ci"] = append(errs["ci"], "BambooUrl")
	}
	if deployConfig.AwsRegion == "" {
		errs["deploy"] = append(errs["deploy"], "AwsRegion")
	}
	if deployConfig.CanoeEcsService == "" {
		errs["deploy"] = append(errs["deploy"], "CanoeEcsService")
	}
	if deployConfig.DeployTimeout == "" {
		errs["deploy"] = append(errs["deploy"], "DeployTimeout")
	}
	if len(errs["ci"]) != 0 {
		services["ci"] = errors.New("required flag(s) missing: " + strings.Join(errs["ci"], ", "))
	} else {
		ciServer, err := bamboo.NewAPIServer(ciConfig)
		if err != nil {
			services["ci"] = err
		} else {
			bamboo.RegisterBambooServer(server, ciServer)
			services["ci"] = nil
		}
	}
	if len(errs["deploy"]) != 0 {
		services["deploy"] = errors.New("required flag(s) missing: " + strings.Join(errs["deploy"], ", "))
	} else {
		deployServer, err := deploy.NewAPIServer(deployConfig)
		if err != nil {
			services["deploy"] = err
		} else {
			deploy.RegisterDeployServer(server, deployServer)
			services["deploy"] = nil
		}
	}
	if len(errs["pinger"]) != 0 {
		services["pinger"] = errors.New("required flag(s) missing: " + strings.Join(errs["pinger"], ", "))
	} else {
		pingerServer, err := pinger.NewAPIServer(pingerConfig)
		if err != nil {
			services["pinger"] = err
		} else {
			pinger.RegisterPingerServer(server, pingerServer)
			services["pinger"] = nil
		}
	}
	return services, nil
}
