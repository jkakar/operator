// Code generated by protoc-gen-operatorcmd
package main

import (
	"flag"
	"fmt"
	"io"
	"os"

	ping "bread/ping"
	"github.com/sr/operator"
	"golang.org/x/net/context"
)

const programName = "operator"

var cmd = operator.NewCommand(
	programName,
	[]operator.ServiceCommand{
		{
			Name:     "ping",
			Synopsis: `Undocumented.`,
			Methods: []operator.MethodCommand{
				{
					Name:     "ping",
					Synopsis: `Undocumented.`,
					Flags: []*flag.Flag{
						{
							Name:  "arg1",
							Usage: "Undocumented.",
						},
					},
					Run: func(ctx *operator.CommandContext) (string, error) {
						arg1 := ctx.Flags.String("arg1", "", "")
						if err := ctx.Flags.Parse(ctx.Args); err != nil {
							return "", err
						}
						conn, err := ctx.GetConn()
						if err != nil {
							return "", err
						}
						defer conn.Close()
						client := ping.NewPingerClient(conn)
						resp, err := client.Ping(
							context.Background(),
							&ping.PingRequest{
								Source: ctx.Source,
								Arg1:   *arg1,
							},
						)
						if err != nil {
							return "", err
						}
						return resp.Message, nil
					},
				},
			},
		},
	},
)

func main() {
	status, output := cmd.Run(os.Args)
	if status != 0 {
		if _, err := fmt.Fprintf(os.Stderr, "%s: %s\n", programName, output); err != nil {
			panic(err)
		}
	} else {
		if _, err := io.WriteString(os.Stdout, output); err != nil {
			panic(err)
		}
	}
	os.Exit(status)
}
