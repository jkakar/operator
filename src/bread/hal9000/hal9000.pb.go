// Code generated by protoc-gen-go.
// source: hal9000/hal9000.proto
// DO NOT EDIT!

/*
Package hal9000 is a generated protocol buffer package.

It is generated from these files:
	hal9000/hal9000.proto

It has these top-level messages:
	Message
	User
	Response
*/
package hal9000

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	User *User  `protobuf:"bytes,2,opt,name=user" json:"user,omitempty"`
	Room string `protobuf:"bytes,3,opt,name=room" json:"room,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type User struct {
	Email string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Response struct {
	Match bool `protobuf:"varint,1,opt,name=match" json:"match,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*Message)(nil), "hal9000.Message")
	proto.RegisterType((*User)(nil), "hal9000.User")
	proto.RegisterType((*Response)(nil), "hal9000.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Robot service

type RobotClient interface {
	IsMatch(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
	Dispatch(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error)
}

type robotClient struct {
	cc *grpc.ClientConn
}

func NewRobotClient(cc *grpc.ClientConn) RobotClient {
	return &robotClient{cc}
}

func (c *robotClient) IsMatch(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/hal9000.Robot/IsMatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *robotClient) Dispatch(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/hal9000.Robot/Dispatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Robot service

type RobotServer interface {
	IsMatch(context.Context, *Message) (*Response, error)
	Dispatch(context.Context, *Message) (*Response, error)
}

func RegisterRobotServer(s *grpc.Server, srv RobotServer) {
	s.RegisterService(&_Robot_serviceDesc, srv)
}

func _Robot_IsMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).IsMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hal9000.Robot/IsMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).IsMatch(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Robot_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RobotServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hal9000.Robot/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RobotServer).Dispatch(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Robot_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hal9000.Robot",
	HandlerType: (*RobotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsMatch",
			Handler:    _Robot_IsMatch_Handler,
		},
		{
			MethodName: "Dispatch",
			Handler:    _Robot_Dispatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("hal9000/hal9000.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0xb1, 0x4f, 0x86, 0x30,
	0x10, 0xc5, 0x83, 0x82, 0xc0, 0x19, 0x13, 0x6d, 0x34, 0x21, 0x4e, 0xc8, 0xc4, 0x04, 0x0d, 0x4e,
	0xae, 0xc6, 0xc5, 0x81, 0xa5, 0xd1, 0xc5, 0xad, 0x98, 0x8b, 0x90, 0x50, 0x4a, 0x7a, 0x35, 0xf9,
	0xfe, 0xfc, 0x2f, 0x2d, 0x85, 0xf9, 0x9b, 0xfa, 0xde, 0xb5, 0xbf, 0x97, 0xde, 0x83, 0xa7, 0x51,
	0xce, 0x6f, 0x9c, 0xf3, 0x36, 0x9c, 0xcd, 0x6a, 0xb4, 0xd5, 0x2c, 0x0d, 0xb6, 0xfa, 0x82, 0xb4,
	0x47, 0x22, 0xf9, 0x87, 0x8c, 0x41, 0x6c, 0xf1, 0x64, 0x8b, 0xa8, 0x8c, 0xea, 0x5c, 0x78, 0xcd,
	0x5e, 0x20, 0xfe, 0x27, 0x34, 0xc5, 0x55, 0x19, 0xd5, 0xb7, 0xdd, 0x5d, 0xb3, 0xa7, 0x7c, 0x13,
	0x1a, 0xe1, 0xaf, 0x1c, 0x66, 0xb4, 0x56, 0xc5, 0xf5, 0x86, 0x39, 0x5d, 0x71, 0x88, 0xdd, 0x0b,
	0xf6, 0x08, 0x09, 0x2a, 0x39, 0xcd, 0x21, 0x73, 0x33, 0x8e, 0x58, 0xa4, 0x42, 0x1f, 0x9a, 0x0b,
	0xaf, 0xab, 0x12, 0x32, 0x81, 0xb4, 0xea, 0x85, 0xd0, 0x51, 0x4a, 0xda, 0xdf, 0xd1, 0x53, 0x99,
	0xd8, 0x4c, 0x37, 0x42, 0x22, 0xf4, 0xa0, 0x2d, 0x6b, 0x20, 0xfd, 0xa4, 0xde, 0xcd, 0xd8, 0xfd,
	0xf1, 0xa1, 0xb0, 0xc4, 0xf3, 0xc3, 0x31, 0x39, 0xe2, 0x5a, 0xc8, 0x3e, 0x26, 0x5a, 0x2f, 0x06,
	0xde, 0xf3, 0x9f, 0xbd, 0x9e, 0xe1, 0xc6, 0xd7, 0xf5, 0x7a, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x73,
	0x92, 0x98, 0x9e, 0x47, 0x01, 0x00, 0x00,
}
