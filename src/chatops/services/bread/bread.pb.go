// Code generated by protoc-gen-go.
// source: bread/bread.proto
// DO NOT EDIT!

/*
Package bread is a generated protocol buffer package.

It is generated from these files:
	bread/bread.proto

It has these top-level messages:
	BreadConfig
	ListAppsRequest
	ListAppsResponse
	ListBuildsRequest
	ListBuildsResponse
	EcsDeployRequest
	EcsDeployResponse
*/
package bread

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import operator "github.com/sr/operator"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type BreadConfig struct {
	AwsRegion       string `protobuf:"bytes,1,opt,name=AwsRegion,json=awsRegion" json:"AwsRegion,omitempty"`
	CanoeEcsService string `protobuf:"bytes,3,opt,name=CanoeEcsService,json=canoeEcsService" json:"CanoeEcsService,omitempty"`
	DeployTimeout   string `protobuf:"bytes,4,opt,name=DeployTimeout,json=deployTimeout" json:"DeployTimeout,omitempty"`
	BambooUsername  string `protobuf:"bytes,5,opt,name=BambooUsername,json=bambooUsername" json:"BambooUsername,omitempty"`
	BambooPassword  string `protobuf:"bytes,6,opt,name=BambooPassword,json=bambooPassword" json:"BambooPassword,omitempty"`
	BambooUrl       string `protobuf:"bytes,7,opt,name=BambooUrl,json=bambooUrl" json:"BambooUrl,omitempty"`
}

func (m *BreadConfig) Reset()                    { *m = BreadConfig{} }
func (m *BreadConfig) String() string            { return proto.CompactTextString(m) }
func (*BreadConfig) ProtoMessage()               {}
func (*BreadConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ListAppsRequest struct {
	Source *operator.Source `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *ListAppsRequest) Reset()                    { *m = ListAppsRequest{} }
func (m *ListAppsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAppsRequest) ProtoMessage()               {}
func (*ListAppsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListAppsRequest) GetSource() *operator.Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type ListAppsResponse struct {
	Output *operator.Output `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ListAppsResponse) Reset()                    { *m = ListAppsResponse{} }
func (m *ListAppsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAppsResponse) ProtoMessage()               {}
func (*ListAppsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ListAppsResponse) GetOutput() *operator.Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type ListBuildsRequest struct {
	Source *operator.Source `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
}

func (m *ListBuildsRequest) Reset()                    { *m = ListBuildsRequest{} }
func (m *ListBuildsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBuildsRequest) ProtoMessage()               {}
func (*ListBuildsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListBuildsRequest) GetSource() *operator.Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type ListBuildsResponse struct {
	Output *operator.Output `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ListBuildsResponse) Reset()                    { *m = ListBuildsResponse{} }
func (m *ListBuildsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBuildsResponse) ProtoMessage()               {}
func (*ListBuildsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ListBuildsResponse) GetOutput() *operator.Output {
	if m != nil {
		return m.Output
	}
	return nil
}

type EcsDeployRequest struct {
	Source *operator.Source `protobuf:"bytes,1,opt,name=source" json:"source,omitempty"`
	App    string           `protobuf:"bytes,2,opt,name=app" json:"app,omitempty"`
	Build  string           `protobuf:"bytes,3,opt,name=build" json:"build,omitempty"`
}

func (m *EcsDeployRequest) Reset()                    { *m = EcsDeployRequest{} }
func (m *EcsDeployRequest) String() string            { return proto.CompactTextString(m) }
func (*EcsDeployRequest) ProtoMessage()               {}
func (*EcsDeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EcsDeployRequest) GetSource() *operator.Source {
	if m != nil {
		return m.Source
	}
	return nil
}

type EcsDeployResponse struct {
	Output *operator.Output `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *EcsDeployResponse) Reset()                    { *m = EcsDeployResponse{} }
func (m *EcsDeployResponse) String() string            { return proto.CompactTextString(m) }
func (*EcsDeployResponse) ProtoMessage()               {}
func (*EcsDeployResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *EcsDeployResponse) GetOutput() *operator.Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*BreadConfig)(nil), "bread.BreadConfig")
	proto.RegisterType((*ListAppsRequest)(nil), "bread.ListAppsRequest")
	proto.RegisterType((*ListAppsResponse)(nil), "bread.ListAppsResponse")
	proto.RegisterType((*ListBuildsRequest)(nil), "bread.ListBuildsRequest")
	proto.RegisterType((*ListBuildsResponse)(nil), "bread.ListBuildsResponse")
	proto.RegisterType((*EcsDeployRequest)(nil), "bread.EcsDeployRequest")
	proto.RegisterType((*EcsDeployResponse)(nil), "bread.EcsDeployResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Bread service

type BreadClient interface {
	ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error)
	// List up to 10 most recent BREAD builds.
	ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error)
	EcsDeploy(ctx context.Context, in *EcsDeployRequest, opts ...grpc.CallOption) (*EcsDeployResponse, error)
}

type breadClient struct {
	cc *grpc.ClientConn
}

func NewBreadClient(cc *grpc.ClientConn) BreadClient {
	return &breadClient{cc}
}

func (c *breadClient) ListApps(ctx context.Context, in *ListAppsRequest, opts ...grpc.CallOption) (*ListAppsResponse, error) {
	out := new(ListAppsResponse)
	err := grpc.Invoke(ctx, "/bread.Bread/ListApps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *breadClient) ListBuilds(ctx context.Context, in *ListBuildsRequest, opts ...grpc.CallOption) (*ListBuildsResponse, error) {
	out := new(ListBuildsResponse)
	err := grpc.Invoke(ctx, "/bread.Bread/ListBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *breadClient) EcsDeploy(ctx context.Context, in *EcsDeployRequest, opts ...grpc.CallOption) (*EcsDeployResponse, error) {
	out := new(EcsDeployResponse)
	err := grpc.Invoke(ctx, "/bread.Bread/EcsDeploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bread service

type BreadServer interface {
	ListApps(context.Context, *ListAppsRequest) (*ListAppsResponse, error)
	// List up to 10 most recent BREAD builds.
	ListBuilds(context.Context, *ListBuildsRequest) (*ListBuildsResponse, error)
	EcsDeploy(context.Context, *EcsDeployRequest) (*EcsDeployResponse, error)
}

func RegisterBreadServer(s *grpc.Server, srv BreadServer) {
	s.RegisterService(&_Bread_serviceDesc, srv)
}

func _Bread_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreadServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Bread/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreadServer).ListApps(ctx, req.(*ListAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bread_ListBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreadServer).ListBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Bread/ListBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreadServer).ListBuilds(ctx, req.(*ListBuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bread_EcsDeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EcsDeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BreadServer).EcsDeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bread.Bread/EcsDeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BreadServer).EcsDeploy(ctx, req.(*EcsDeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bread_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bread.Bread",
	HandlerType: (*BreadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApps",
			Handler:    _Bread_ListApps_Handler,
		},
		{
			MethodName: "ListBuilds",
			Handler:    _Bread_ListBuilds_Handler,
		},
		{
			MethodName: "EcsDeploy",
			Handler:    _Bread_EcsDeploy_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0xc1, 0x4e, 0xea, 0x40,
	0x14, 0x4d, 0x1f, 0xaf, 0x68, 0x2f, 0x01, 0xca, 0xc4, 0xe8, 0xd0, 0xb8, 0x30, 0x8d, 0x31, 0xac,
	0x30, 0xc1, 0x25, 0x4a, 0x02, 0xe8, 0xce, 0x44, 0x53, 0xf4, 0x03, 0xa6, 0x74, 0x24, 0x4d, 0xa0,
	0x33, 0xce, 0xb4, 0x12, 0xb7, 0x7e, 0x82, 0x9f, 0xe6, 0x5f, 0xf8, 0x17, 0x76, 0xa6, 0x2d, 0x14,
	0x70, 0x83, 0x1b, 0x42, 0xcf, 0xbd, 0x67, 0xce, 0x3d, 0xe7, 0xce, 0x40, 0xcb, 0x17, 0x94, 0x04,
	0x97, 0xfa, 0xb7, 0xcb, 0x05, 0x8b, 0x19, 0x32, 0xf5, 0x87, 0xd3, 0x60, 0x9c, 0x0a, 0x12, 0x33,
	0x91, 0xc1, 0xee, 0xb7, 0x01, 0xb5, 0x91, 0xaa, 0x8c, 0x59, 0xf4, 0x12, 0xce, 0xd0, 0x29, 0x58,
	0xc3, 0xa5, 0xf4, 0xe8, 0x2c, 0x64, 0x11, 0x36, 0xce, 0x8c, 0x8e, 0xe5, 0x59, 0xa4, 0x00, 0x50,
	0x07, 0x9a, 0x63, 0x12, 0x31, 0x7a, 0x37, 0x95, 0x13, 0x2a, 0xde, 0xc2, 0x29, 0xc5, 0x15, 0xdd,
	0xd3, 0x9c, 0x6e, 0xc2, 0xe8, 0x1c, 0xea, 0xb7, 0x94, 0xcf, 0xd9, 0xfb, 0x53, 0xb8, 0xa0, 0x2c,
	0x89, 0xf1, 0x7f, 0xdd, 0x57, 0x0f, 0xca, 0x20, 0xba, 0x80, 0xc6, 0x88, 0x2c, 0x7c, 0xc6, 0x9e,
	0x25, 0x15, 0x11, 0x59, 0x50, 0x6c, 0xea, 0xb6, 0x86, 0xbf, 0x81, 0xae, 0xfb, 0x1e, 0x89, 0x94,
	0x4b, 0x26, 0x02, 0x5c, 0x2d, 0xf7, 0x15, 0xa8, 0x9a, 0x3e, 0x3f, 0x4f, 0xcc, 0xf1, 0x41, 0x36,
	0xbd, 0x5f, 0x00, 0x6e, 0x1f, 0x9a, 0xf7, 0xa1, 0x8c, 0x87, 0x9c, 0xa7, 0x7e, 0x5e, 0x13, 0x2a,
	0xe3, 0xd4, 0x50, 0x55, 0xb2, 0x44, 0xa4, 0x3e, 0x94, 0xd7, 0x5a, 0xcf, 0xee, 0xae, 0xf2, 0x99,
	0x68, 0xdc, 0xcb, 0xeb, 0xee, 0x35, 0xd8, 0x6b, 0xb2, 0xe4, 0x2c, 0x92, 0x54, 0xb1, 0x53, 0x17,
	0x3c, 0x75, 0xb7, 0xc3, 0x7e, 0xd0, 0xb8, 0x97, 0xd7, 0xdd, 0x1b, 0x68, 0x29, 0xf6, 0x28, 0x09,
	0xe7, 0xc1, 0x1f, 0xc4, 0x07, 0x80, 0xca, 0xf4, 0xbd, 0xe5, 0x03, 0xb0, 0xd3, 0xdd, 0x64, 0x0b,
	0xd9, 0x5b, 0x1d, 0xd9, 0x50, 0x21, 0x9c, 0xe3, 0x7f, 0x3a, 0x4f, 0xf5, 0x17, 0x1d, 0x81, 0xe9,
	0xab, 0x59, 0xf2, 0xed, 0x67, 0x1f, 0xca, 0x64, 0x49, 0x65, 0xdf, 0x21, 0x7b, 0x5f, 0x06, 0x98,
	0xfa, 0x2a, 0xa2, 0x3e, 0x1c, 0x16, 0x59, 0xa3, 0xe3, 0x6e, 0x76, 0x8b, 0xb7, 0x36, 0xe7, 0x9c,
	0xec, 0xe0, 0xb9, 0xe0, 0x10, 0x60, 0x9d, 0x15, 0xc2, 0xa5, 0xb6, 0x8d, 0xf4, 0x9d, 0xf6, 0x2f,
	0x95, 0xfc, 0x88, 0x01, 0x58, 0x2b, 0x23, 0xa8, 0x10, 0xda, 0x0e, 0xd0, 0xc1, 0xbb, 0x85, 0x8c,
	0xef, 0x58, 0x9f, 0x1f, 0xed, 0xec, 0xbd, 0xf9, 0x55, 0xfd, 0xcc, 0xae, 0x7e, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x70, 0xf5, 0x37, 0x1b, 0x92, 0x03, 0x00, 0x00,
}
