// Code generated by protoc-gen-operatord
package main

import (
	"errors"
	"flag"
	"os"
	"strings"

	"google.golang.org/grpc"

	"chatops/services/bread"
	"chatops/services/ping"
)

func buildOperatorServer(
	server *grpc.Server,
	flags *flag.FlagSet,
) (map[string]error, error) {
	breadConfig := &bread.BreadConfig{}
	pingerConfig := &pinger.PingerConfig{}
	flags.StringVar(&breadConfig.AwsRegion, "bread-AwsRegion", "", "")
	flags.StringVar(&breadConfig.CanoeEcsService, "bread-CanoeEcsService", "", "")
	flags.StringVar(&breadConfig.DeployTimeout, "bread-DeployTimeout", "", "")
	services := make(map[string]error)
	if err := flags.Parse(os.Args[1:]); err != nil {
		return services, err
	}
	errs := make(map[string][]string)
	if breadConfig.AwsRegion == "" {
		errs["bread"] = append(errs["bread"], "AwsRegion")
	}
	if breadConfig.CanoeEcsService == "" {
		errs["bread"] = append(errs["bread"], "CanoeEcsService")
	}
	if breadConfig.DeployTimeout == "" {
		errs["bread"] = append(errs["bread"], "DeployTimeout")
	}
	if len(errs["bread"]) != 0 {
		services["bread"] = errors.New("required flag(s) missing: " + strings.Join(errs["bread"], ", "))
	} else {
		breadServer, err := bread.NewAPIServer(breadConfig)
		if err != nil {
			services["bread"] = err
		} else {
			bread.RegisterBreadServer(server, breadServer)
			services["bread"] = nil
		}
	}
	if len(errs["pinger"]) != 0 {
		services["pinger"] = errors.New("required flag(s) missing: " + strings.Join(errs["pinger"], ", "))
	} else {
		pingerServer, err := pinger.NewAPIServer(pingerConfig)
		if err != nil {
			services["pinger"] = err
		} else {
			pinger.RegisterPingerServer(server, pingerServer)
			services["pinger"] = nil
		}
	}
	return services, nil
}
