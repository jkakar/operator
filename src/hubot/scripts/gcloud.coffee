# Code generated by protoc-gen-operatorhubot
path = require "path"
grpc = require "grpc"
protobuf = require "protobufjs"

protodir = path.resolve(__dirname + "/../proto")
proto = protobuf.loadProtoFile(root: protodir, file: "gcloud.proto")
gcloud = grpc.loadObject(proto.ns).gcloud
address = process.env.OPERATORD_ADDRESS
if !address
  host = process.env.OPERATORD_PORT_3000_TCP_ADDR
  port = process.env.OPERATORD_PORT_3000_TCP_PORT
  address = "#{host}:#{port}"

client = new gcloud.gcloud(address, grpc.Credentials.createInsecure())

module.exports = (robot) ->
robot.respond /gcloud create-container-cluster project_id=(\w+) name=(\w+) node_count=(\w+) zone=(\w+)/, (msg) ->
		client.CreateContainerCluster {project_id: msg.match[1],name: msg.match[2],node_count: msg.match[3],zone: msg.match[4],}, (err, response) ->
			if err
				msg.send("```\nCreateContainerCluster error: #{err.message}\n```")
			else
				msg.send("```\n#{response.output.PlainText}\n```")
robot.respond /gcloud list-instances project_id=(\w+)/, (msg) ->
		client.ListInstances {project_id: msg.match[1],}, (err, response) ->
			if err
				msg.send("```\nListInstances error: #{err.message}\n```")
			else
				msg.send("```\n#{response.output.PlainText}\n```")

