// Code generated by protoc-gen-go.
// source: src/services/ecs/service.proto
// DO NOT EDIT!

/*
Package service_ecs is a generated protocol buffer package.

It is generated from these files:
	src/services/ecs/service.proto

It has these top-level messages:
	Cluster
	Instance
	ListClustersRequest
	Error
	ListClustersResponse
	ListClusterInstancesRequest
	ListClusterInstancesResponse
*/
package service_ecs

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type ClusterStatus int32

const (
	ClusterStatus_ACTIVE   ClusterStatus = 0
	ClusterStatus_INACTIVE ClusterStatus = 1
)

var ClusterStatus_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
}
var ClusterStatus_value = map[string]int32{
	"ACTIVE":   0,
	"INACTIVE": 1,
}

func (x ClusterStatus) String() string {
	return proto.EnumName(ClusterStatus_name, int32(x))
}

type Cluster struct {
	Arn                 string        `protobuf:"bytes,1,opt,name=arn" json:"arn,omitempty"`
	Name                string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Status              ClusterStatus `protobuf:"varint,3,opt,name=status,enum=service_ecs.ClusterStatus" json:"status,omitempty"`
	ActiveServices      int64         `protobuf:"varint,4,opt,name=active_services" json:"active_services,omitempty"`
	RegisteredInstances int64         `protobuf:"varint,7,opt,name=registered_instances" json:"registered_instances,omitempty"`
	PendingTasks        int64         `protobuf:"varint,5,opt,name=pending_tasks" json:"pending_tasks,omitempty"`
	RunningTasks        int64         `protobuf:"varint,6,opt,name=running_tasks" json:"running_tasks,omitempty"`
}

func (m *Cluster) Reset()         { *m = Cluster{} }
func (m *Cluster) String() string { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()    {}

type Instance struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}

type ListClustersRequest struct {
}

func (m *ListClustersRequest) Reset()         { *m = ListClustersRequest{} }
func (m *ListClustersRequest) String() string { return proto.CompactTextString(m) }
func (*ListClustersRequest) ProtoMessage()    {}

type Error struct {
	Arn     string `protobuf:"bytes,1,opt,name=arn" json:"arn,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}

type ListClustersResponse struct {
	Clusters []*Cluster `protobuf:"bytes,1,rep,name=clusters" json:"clusters,omitempty"`
	Errors   []*Error   `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
}

func (m *ListClustersResponse) Reset()         { *m = ListClustersResponse{} }
func (m *ListClustersResponse) String() string { return proto.CompactTextString(m) }
func (*ListClustersResponse) ProtoMessage()    {}

func (m *ListClustersResponse) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

func (m *ListClustersResponse) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type ListClusterInstancesRequest struct {
	Cluster string `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
}

func (m *ListClusterInstancesRequest) Reset()         { *m = ListClusterInstancesRequest{} }
func (m *ListClusterInstancesRequest) String() string { return proto.CompactTextString(m) }
func (*ListClusterInstancesRequest) ProtoMessage()    {}

type ListClusterInstancesResponse struct {
	Cluster   *Cluster    `protobuf:"bytes,1,opt,name=cluster" json:"cluster,omitempty"`
	Instances []*Instance `protobuf:"bytes,2,rep,name=instances" json:"instances,omitempty"`
}

func (m *ListClusterInstancesResponse) Reset()         { *m = ListClusterInstancesResponse{} }
func (m *ListClusterInstancesResponse) String() string { return proto.CompactTextString(m) }
func (*ListClusterInstancesResponse) ProtoMessage()    {}

func (m *ListClusterInstancesResponse) GetCluster() *Cluster {
	if m != nil {
		return m.Cluster
	}
	return nil
}

func (m *ListClusterInstancesResponse) GetInstances() []*Instance {
	if m != nil {
		return m.Instances
	}
	return nil
}

func init() {
	proto.RegisterEnum("service_ecs.ClusterStatus", ClusterStatus_name, ClusterStatus_value)
}

// Client API for ECSService service

type ECSServiceClient interface {
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	ListClusterInstances(ctx context.Context, in *ListClusterInstancesRequest, opts ...grpc.CallOption) (*ListClusterInstancesResponse, error)
}

type eCSServiceClient struct {
	cc *grpc.ClientConn
}

func NewECSServiceClient(cc *grpc.ClientConn) ECSServiceClient {
	return &eCSServiceClient{cc}
}

func (c *eCSServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	out := new(ListClustersResponse)
	err := grpc.Invoke(ctx, "/service_ecs.ECSService/ListClusters", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eCSServiceClient) ListClusterInstances(ctx context.Context, in *ListClusterInstancesRequest, opts ...grpc.CallOption) (*ListClusterInstancesResponse, error) {
	out := new(ListClusterInstancesResponse)
	err := grpc.Invoke(ctx, "/service_ecs.ECSService/ListClusterInstances", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ECSService service

type ECSServiceServer interface {
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	ListClusterInstances(context.Context, *ListClusterInstancesRequest) (*ListClusterInstancesResponse, error)
}

func RegisterECSServiceServer(s *grpc.Server, srv ECSServiceServer) {
	s.RegisterService(&_ECSService_serviceDesc, srv)
}

func _ECSService_ListClusters_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ECSServiceServer).ListClusters(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ECSService_ListClusterInstances_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ListClusterInstancesRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ECSServiceServer).ListClusterInstances(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ECSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service_ecs.ECSService",
	HandlerType: (*ECSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _ECSService_ListClusters_Handler,
		},
		{
			MethodName: "ListClusterInstances",
			Handler:    _ECSService_ListClusterInstances_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
