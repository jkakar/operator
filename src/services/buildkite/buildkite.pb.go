// Code generated by protoc-gen-go.
// source: services/buildkite/buildkite.proto
// DO NOT EDIT!

/*
Package buildkite is a generated protocol buffer package.

It is generated from these files:
	services/buildkite/buildkite.proto

It has these top-level messages:
	ProjectsStatusRequest
	ProjectsStatusResponse
*/
package buildkite

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import operator "github.com/sr/operator/src/operator"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProjectsStatusRequest struct {
}

func (m *ProjectsStatusRequest) Reset()                    { *m = ProjectsStatusRequest{} }
func (m *ProjectsStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*ProjectsStatusRequest) ProtoMessage()               {}
func (*ProjectsStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ProjectsStatusResponse struct {
	Output *operator.Output `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *ProjectsStatusResponse) Reset()                    { *m = ProjectsStatusResponse{} }
func (m *ProjectsStatusResponse) String() string            { return proto.CompactTextString(m) }
func (*ProjectsStatusResponse) ProtoMessage()               {}
func (*ProjectsStatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProjectsStatusResponse) GetOutput() *operator.Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*ProjectsStatusRequest)(nil), "buildkite.ProjectsStatusRequest")
	proto.RegisterType((*ProjectsStatusResponse)(nil), "buildkite.ProjectsStatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for BuildkiteService service

type BuildkiteServiceClient interface {
	ProjectsStatus(ctx context.Context, in *ProjectsStatusRequest, opts ...grpc.CallOption) (*ProjectsStatusResponse, error)
}

type buildkiteServiceClient struct {
	cc *grpc.ClientConn
}

func NewBuildkiteServiceClient(cc *grpc.ClientConn) BuildkiteServiceClient {
	return &buildkiteServiceClient{cc}
}

func (c *buildkiteServiceClient) ProjectsStatus(ctx context.Context, in *ProjectsStatusRequest, opts ...grpc.CallOption) (*ProjectsStatusResponse, error) {
	out := new(ProjectsStatusResponse)
	err := grpc.Invoke(ctx, "/buildkite.BuildkiteService/ProjectsStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BuildkiteService service

type BuildkiteServiceServer interface {
	ProjectsStatus(context.Context, *ProjectsStatusRequest) (*ProjectsStatusResponse, error)
}

func RegisterBuildkiteServiceServer(s *grpc.Server, srv BuildkiteServiceServer) {
	s.RegisterService(&_BuildkiteService_serviceDesc, srv)
}

func _BuildkiteService_ProjectsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ProjectsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildkiteServiceServer).ProjectsStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BuildkiteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "buildkite.BuildkiteService",
	HandlerType: (*BuildkiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProjectsStatus",
			Handler:    _BuildkiteService_ProjectsStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x4f, 0x2a, 0xcd, 0xcc, 0x49, 0xc9, 0xce, 0x2c, 0x49, 0x45, 0xb0,
	0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0xe1, 0x02, 0x52, 0xe2, 0xf9, 0x05, 0xa9, 0x45,
	0x89, 0x25, 0xf9, 0x45, 0xfa, 0x30, 0x06, 0x44, 0x8d, 0x92, 0x38, 0x97, 0x68, 0x40, 0x51, 0x7e,
	0x56, 0x6a, 0x72, 0x49, 0x71, 0x70, 0x49, 0x62, 0x49, 0x69, 0x71, 0x50, 0x6a, 0x61, 0x69, 0x6a,
	0x71, 0x89, 0x92, 0x15, 0x97, 0x18, 0xba, 0x44, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x02,
	0x17, 0x5b, 0x7e, 0x69, 0x49, 0x41, 0x69, 0x89, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x80,
	0x1e, 0xdc, 0x4c, 0x7f, 0xb0, 0xb8, 0x51, 0x26, 0x97, 0x80, 0x13, 0xcc, 0xea, 0x60, 0x88, 0x3b,
	0x85, 0x42, 0xb9, 0xf8, 0x50, 0xcd, 0x13, 0x52, 0xd0, 0x43, 0x38, 0x18, 0xab, 0x1b, 0xa4, 0x14,
	0xf1, 0xa8, 0x80, 0x38, 0x26, 0x89, 0x0d, 0xec, 0x0d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x1b, 0x40, 0xa1, 0x70, 0x10, 0x01, 0x00, 0x00,
}
