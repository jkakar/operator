// Code generated by protoc-gen-go.
// source: services/controller/controller.proto
// DO NOT EDIT!

/*
Package controller is a generated protocol buffer package.

It is generated from these files:
	services/controller/controller.proto

It has these top-level messages:
	CreateClusterRequest
	CreateClusterResponse
*/
package controller

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "operator"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CreateClusterRequest struct {
}

func (m *CreateClusterRequest) Reset()                    { *m = CreateClusterRequest{} }
func (m *CreateClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterRequest) ProtoMessage()               {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CreateClusterResponse struct {
}

func (m *CreateClusterResponse) Reset()                    { *m = CreateClusterResponse{} }
func (m *CreateClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateClusterResponse) ProtoMessage()               {}
func (*CreateClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*CreateClusterRequest)(nil), "controller.CreateClusterRequest")
	proto.RegisterType((*CreateClusterResponse)(nil), "controller.CreateClusterResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Controller service

type ControllerClient interface {
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterRequest, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterRequest, error) {
	out := new(CreateClusterRequest)
	err := grpc.Invoke(ctx, "/controller.Controller/CreateCluster", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterRequest, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ControllerServer).CreateCluster(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controller.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCluster",
			Handler:    _Controller_CreateCluster_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0x2d, 0xd6, 0x4f, 0xce, 0xcf, 0x2b, 0x29, 0xca, 0xcf, 0xc9, 0x49, 0x2d, 0x42,
	0x62, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0x21, 0x44, 0xa4, 0xc4, 0xf3, 0x0b, 0x52,
	0x8b, 0x12, 0x4b, 0xf2, 0x8b, 0xf4, 0x61, 0x0c, 0x88, 0x22, 0x25, 0x31, 0x2e, 0x11, 0xe7, 0xa2,
	0xd4, 0xc4, 0x92, 0x54, 0xe7, 0x9c, 0xd2, 0xe2, 0x92, 0xd4, 0xa2, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4,
	0xe2, 0x12, 0x25, 0x71, 0x2e, 0x51, 0x34, 0xf1, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xa3, 0x42,
	0x2e, 0x2e, 0x67, 0xb8, 0xb9, 0x42, 0xc1, 0x5c, 0xbc, 0x28, 0xca, 0x84, 0x14, 0xf4, 0x90, 0xdc,
	0x81, 0xcd, 0x64, 0x29, 0xc2, 0x2a, 0xf8, 0x26, 0x35, 0x49, 0x22, 0x39, 0x3e, 0x89, 0x0d, 0xec,
	0x54, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xbe, 0xf0, 0x43, 0xf7, 0x00, 0x00, 0x00,
}
