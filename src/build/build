#!/usr/bin/env bash
#/ Usage: build [--help] [--ci] [--all] [<project...>]
#/ Build program for the BREAD team repository.
set -euo pipefail
cd "$(dirname "$0")/../.."

PATH="$(pwd)/bin:$PATH"
export PATH

# Bring in configuration settings
. etc/build/env

: "${DEBUG:=""}"
test -n "$DEBUG" && set -x

usage() {
    grep ^#/ <"$0" |cut -c4-
    exit 1
}

cimode=false
buildall=false
projects=""
while [ $# -gt 0 ]
do
    case "$1" in
        -h|--help)
            usage
            ;;
        --ci)
            cimode=true
            shift
            ;;
        --all)
            buildall=true
            shift
            ;;
        *)
            projects="$projects $1"
            shift
            ;;
    esac
done

# In CI mode (enabled on Bamboo by default) this analyzes the diff to figure
# out what project(s) need(s) building. A projects is defined as a subdirectory
# of the src/ directory.
if $cimode
then
    branch="${bamboo_planRepository_branch:-"$(git rev-parse --abbrev-ref HEAD)"}"
    sha1a="${bamboo_repository_previous_revision_number:-""}"
    sha1b="${bamboo_repository_revision_number:-"HEAD"}"

    if [ -n "$DEBUG" ]
    then
        echo "Current head SHA1: $(git rev-parse HEAD)" 2>&1
        echo "Base SHA1: ${sha1a}" 2>&1
        echo "Head SHA1: ${sha1b}" 2>&1
        echo "Branch: ${branch}" 2>&1
    fi

    # It is unclear when this can happen as of yet so we just bail out if it
    # does for now. If this is a topic branch build, compare the list of
    # changed files against the remote master branch.
    if [ "$branch" = "master" ] && [ -z "$sha1a" ]
    then
        echo "Unable to build master branch without a base SHA1" 2>&1
        exit 1
    else
        sha1b="$(git rev-parse origin/master)"
    fi

    # If the two SHA1s are identical it most likely means this is a restarted
    # build, in which case a full build is triggered. Otherwise this analyzes
    # the list of files that were modified between the last build and this one.
    if test "$sha1a" = "$sha1b"
    then buildall=true
    else
        for path in $(git diff --name-only "${sha1a}..${sha1b}")
        do
            # Trigger a complete rebuild if bin/build or any of the build
            # scripts were modified. This is a rather radical and simplistic
            # heuristic but it is better to err on the safe side and build too
            # much than too little.
            treename="$(echo "$path" | cut -d/ -f1)"
            projectname="$(echo "$path" | cut -d/ -f2)"
            if [ "$treename" != "src" ] || [ "$projectname" = "build" ]
            then
                buildall=true
                break
            fi

            # Collect all projects that were modified in this change set.
            seen=false
            for i in $projects
            do test "$i" = "$projectname" && seen=true
            done
            if ! $seen
            then projects="${projects}${projectname} "
            fi
        done
    fi
fi

# Build all projects if --all was given.
if $buildall
then projects="$(find src -type d -mindepth 1 -maxdepth 1 | cut -d/ -f2)"
fi

# Bail out in case there is nothing to build. This typically does should not
# happen during normal usage and is therefore considered an error.
test -z "$projects"  && {
    echo "Nothing to build." 2>&1
    exit 1
}

# Iterate over all selected projects, either explicitly or because of CI mode,
# and execute the build commands in sequence.
for project in $projects
do
    # Workaround for <https://github.com/docker/libnetwork/issues/1113>
    # Please remove when the bug is resolved, and a fixed version deployed
    if [ "$(hostname -f | cut -d. -f2-4)" != "internal.salesforce.com" ]
    then
        sudo /bin/systemctl restart docker.service
        sleep 5
    fi
    case "$project" in
        canoe)
            build-ruby "$project"

            if $cimode
            then
                # shellcheck disable=SC2154
                image="${CANOE_ECR_REPO}:${bamboo_buildNumber}"
                docker tag "canoe_app" "$image"
                docker push "$image"
            fi
            ;;
        pardot-explorer)
            build-ruby "$project"
            ;;
        pull_agent)
            if $cimode
            then
                sed -i.bak -e's/artifactory\.dev\.pardot\.com/artifactory-internal\.dev\.pardot\.com/g' src/pull_agent/Gemfile
            fi

            build-ruby "$project"

            # Build the gem and push it to Artifactory on CI.
            if $cimode
            then
                docker run --rm \
                    -v "$(pwd):/data" \
                    -v /etc/env/artifactoryenv:/etc/env/artifactoryenv \
                    -e "DEBUG=$DEBUG" \
                    build/ruby src/build/build-gem-pull_agent
            fi
            ;;
        shell)
            docker build -f etc/docker/Dockerfile.shellcheck -t build/shellcheck .
            docker run --rm -v "$(pwd):/data" \
                build/shellcheck \
                find src/build bin -maxdepth 1 -type f -exec shellcheck -f gcc {} +
            ;;
        teampass)
            docker build -f src/teampass/Dockerfile src/teampass
            ;;
        terraform)
            docker build -f etc/docker/Dockerfile.terraform -t build/terraform .
            docker run --rm -v "$(pwd):/data" \
                build/terraform \
                make -C src/terraform validate
            ;;
        *)
            echo "No build rule defined for project \"$project\"." 2>&1
            exit 1
            ;;
    esac
done
