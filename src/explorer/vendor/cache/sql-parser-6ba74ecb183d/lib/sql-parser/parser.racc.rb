#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

require File.dirname(__FILE__) + '/parser.rex.rb'

module SQLParser
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 356)

def self.parse(sql)
  new.scan_str(sql)
end
...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    72,    98,   242,    98,    12,   111,    97,   247,    97,   151,
   228,   135,    34,   107,     6,     7,     8,   253,    72,   134,
   130,   131,   231,   254,   216,    56,    36,    11,    46,    20,
    12,   241,   216,    36,    36,    36,    72,    46,    46,   112,
    46,   126,   125,    56,   149,    75,    76,   249,    60,    73,
    64,    66,    67,    68,    69,    46,    77,   162,    81,    82,
    83,    84,    12,    75,    76,   263,    60,    73,    64,    66,
    67,    68,    69,    46,    77,   216,    81,    82,    83,    84,
  -135,    75,    76,   264,    60,    73,    64,    66,    67,    68,
    69,    72,    77,   231,    81,    82,    83,    84,   178,   109,
   110,   249,    75,    76,   244,   268,   245,   246,   270,    72,
    36,    46,  -135,  -135,  -135,   273,   247,   275,   262,    13,
   185,    22,    23,    25,    26,    38,    39,   182,    46,    20,
    20,    86,    87,    88,    89,    90,    75,    76,    36,    60,
    73,    64,    66,    67,    68,    69,    46,    77,    92,    81,
    82,    83,    84,   105,    75,    76,    27,    60,    73,    64,
    66,    67,    68,    69,    72,    77,   106,    81,    82,    83,
    84,   247,    28,   -91,    30,    31,    27,    32,    33,   167,
   168,   116,    72,   117,   118,   119,   120,   121,  -155,   247,
   122,   123,    28,   124,    30,    31,   127,    32,    33,    20,
    72,    46,    20,   132,   102,   139,   141,   247,    20,    75,
    76,    36,    60,    73,    64,    66,    67,    68,    69,    46,
    77,   149,    81,    82,    83,    84,   158,    75,    76,   163,
    60,    73,    64,    66,    67,    68,    69,    46,    77,   169,
    81,    82,    83,    84,   170,    75,    76,   172,    60,    73,
    64,    66,    67,    68,    69,    72,    77,   173,    81,    82,
    83,    84,   247,   177,   198,    27,   199,   200,   201,   202,
   203,   101,   204,    72,   206,   102,   208,   209,   211,   212,
   247,    28,   216,    30,    31,   nil,    32,    33,   nil,   nil,
   nil,    72,    46,   nil,   nil,   nil,   nil,   nil,   247,   nil,
    75,    76,   nil,    60,    73,    64,    66,    67,    68,    69,
    46,    77,   nil,    81,    82,    83,    84,   nil,    75,    76,
   nil,    60,    73,    64,    66,    67,    68,    69,    46,    77,
   nil,    81,    82,    83,    84,   nil,    75,    76,    27,    60,
    73,    64,    66,    67,    68,    69,    72,    77,   nil,    81,
    82,    83,    84,   247,    28,   nil,    30,    31,   nil,    32,
    33,   nil,   nil,   217,   218,   nil,   219,   220,   221,   nil,
   nil,   nil,    72,   222,   223,   224,   225,   226,   227,   178,
   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    75,    76,   nil,    60,    73,    64,    66,    67,    68,
    69,   185,    77,    72,    81,    82,    83,    84,   182,    46,
    56,   nil,   nil,   nil,   nil,   nil,   nil,    75,    76,   nil,
    60,    73,    64,    66,    67,    68,    69,   nil,    77,    72,
    81,    82,    83,    84,   nil,   nil,   247,   nil,   nil,   nil,
    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    60,    73,    64,    66,    67,    68,    69,    72,    77,
   nil,    81,    82,    83,    84,   247,    46,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    75,    76,   nil,    60,    73,    64,
    66,    67,    68,    69,    72,    77,   nil,    81,    82,    83,
    84,    56,   nil,   nil,   nil,    46,    12,   nil,   nil,   nil,
   nil,   nil,   nil,    75,    76,   nil,    60,    73,    64,    66,
    67,    68,    69,    72,    77,   nil,    81,    82,    83,    84,
    56,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,
    76,   nil,    60,    73,    64,    66,    67,    68,    69,    72,
    77,   nil,    81,    82,    83,    84,    56,   nil,   nil,   nil,
    46,    12,   nil,   nil,   nil,   nil,   nil,   nil,    75,    76,
   nil,    60,    73,    64,    66,    67,    68,    69,    72,    77,
   nil,    81,    82,    83,    84,    56,    46,   nil,   nil,   nil,
   nil,    42,   nil,   nil,    75,    76,   nil,    60,    73,    64,
    66,    67,    68,    69,    72,    77,   nil,    81,    82,    83,
    84,    56,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    75,    76,   nil,    60,    73,    64,    66,
    67,    68,    69,   nil,    77,   nil,    81,    82,    83,    84,
    72,    46,   nil,   nil,   nil,   nil,   nil,   178,   nil,    75,
    76,   nil,    60,    73,    64,    66,    67,    68,    69,   nil,
    77,   nil,    81,    82,    83,    84,    72,   nil,   nil,   185,
   nil,   nil,   nil,   247,   nil,   nil,   182,    46,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    75,    76,   nil,    60,    73,
    64,    66,    67,    68,    69,    72,    77,   nil,    81,    82,
    83,    84,    56,    46,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    75,    76,   nil,    60,    73,    64,    66,    67,    68,
    69,    72,    77,   nil,    81,    82,    83,    84,   178,   nil,
   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    75,    76,   nil,    60,    73,    64,    66,    67,    68,    69,
   185,    77,    72,    81,    82,    83,    84,   182,    46,    56,
   nil,   nil,   nil,   nil,   nil,   nil,    75,    76,   nil,    60,
    73,    64,    66,    67,    68,    69,   nil,    77,    72,    81,
    82,    83,    84,   nil,   nil,    56,   nil,   nil,   nil,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,    76,   nil,
    60,    73,    64,    66,    67,    68,    69,    72,    77,   nil,
    81,    82,    83,    84,    56,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    75,    76,   nil,    60,    73,    64,    66,
    67,    68,    69,    72,    77,   nil,    81,    82,    83,    84,
    56,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    75,    76,   nil,    60,    73,    64,    66,    67,
    68,    69,    72,    77,   nil,    81,    82,    83,    84,    56,
    46,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,    76,
   nil,    60,    73,    64,    66,    67,    68,    69,    72,    77,
   nil,    81,    82,    83,    84,   178,   nil,   nil,   nil,    46,
    12,   nil,   nil,   nil,   nil,   nil,   nil,    75,    76,   nil,
    60,    73,    64,    66,    67,    68,    69,   185,    77,    72,
    81,    82,    83,    84,   182,    46,    56,   nil,   nil,   nil,
   nil,   nil,   nil,    75,    76,   nil,    60,    73,    64,    66,
    67,    68,    69,   nil,    77,    72,    81,    82,    83,    84,
   nil,   nil,   178,   nil,   nil,   nil,    46,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    75,    76,   nil,    60,    73,    64,
    66,    67,    68,    69,   nil,    77,    72,    81,    82,    83,
    84,   182,    46,    56,   nil,   nil,   nil,   nil,   nil,   152,
    75,    76,   nil,    60,    73,    64,    66,    67,    68,    69,
   nil,    77,    72,    81,    82,    83,    84,   nil,   nil,    56,
   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    75,    76,   nil,    60,    73,    64,    66,    67,    68,
    69,    72,    77,   nil,    81,    82,    83,    84,    56,    46,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    75,    76,   nil,
    60,    73,    64,    66,    67,    68,    69,    72,    77,   nil,
    81,    82,    83,    84,   178,   nil,   nil,   nil,    46,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    75,    76,   nil,    60,
    73,    64,    66,    67,    68,    69,   185,    77,    72,    81,
    82,    83,    84,   182,    46,    56,   nil,   nil,   nil,   nil,
   nil,   nil,    75,    76,   nil,    60,    73,    64,    66,    67,
    68,    69,   nil,    77,   nil,    81,    82,    83,    84,   nil,
   nil,   nil,   nil,   nil,   nil,    46,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    75,    76,   nil,    60,    73,    64,    66,
    67,    68,    69,   nil,    77,   nil,    81,    82,    83,    84 ]

racc_action_check = [
   273,    39,   214,   132,     3,    50,    39,   273,   132,   116,
   182,    95,    16,    45,     0,     0,     0,   221,   120,    95,
    92,    92,   183,   221,   205,   120,   206,     0,   212,     3,
     0,   213,   214,   116,    16,    45,   121,   273,    39,    50,
   132,    77,    77,   121,   215,   273,   273,   219,   273,   273,
   273,   273,   273,   273,   273,   120,   273,   124,   273,   273,
   273,   273,   228,   120,   120,   234,   120,   120,   120,   120,
   120,   120,   120,   121,   120,   237,   120,   120,   120,   120,
    48,   121,   121,   238,   121,   121,   121,   121,   121,   121,
   121,   216,   121,   243,   121,   121,   121,   121,   216,    49,
    49,   245,   124,   124,   217,   248,   217,   217,   253,   218,
   263,   264,    48,    48,    48,   265,   218,   269,   233,     1,
   216,     9,    11,    12,    13,    21,    22,   216,   216,    23,
    27,    28,    29,    31,    32,    33,   216,   216,    34,   216,
   216,   216,   216,   216,   216,   216,   218,   216,    38,   216,
   216,   216,   216,    41,   218,   218,   129,   218,   218,   218,
   218,   218,   218,   218,   220,   218,    44,   218,   218,   218,
   218,   220,   129,    46,   129,   129,    15,   129,   129,   129,
   129,    61,   222,    64,    66,    67,    68,    69,    70,   222,
    72,    73,    15,    74,    15,    15,    81,    15,    15,    86,
   223,   220,    87,    93,   100,   102,   104,   223,   105,   220,
   220,   107,   220,   220,   220,   220,   220,   220,   220,   222,
   220,   115,   220,   220,   220,   220,   122,   222,   222,   125,
   222,   222,   222,   222,   222,   222,   222,   223,   222,   130,
   222,   222,   222,   222,   131,   223,   223,   137,   223,   223,
   223,   223,   223,   223,   223,   224,   223,   138,   223,   223,
   223,   223,   224,   140,   152,    40,   153,   154,   155,   156,
   157,    40,   161,   225,   168,    40,   174,   175,   176,   177,
   225,    40,   179,    40,    40,   nil,    40,    40,   nil,   nil,
   nil,   226,   224,   nil,   nil,   nil,   nil,   nil,   226,   nil,
   224,   224,   nil,   224,   224,   224,   224,   224,   224,   224,
   225,   224,   nil,   224,   224,   224,   224,   nil,   225,   225,
   nil,   225,   225,   225,   225,   225,   225,   225,   226,   225,
   nil,   225,   225,   225,   225,   nil,   226,   226,   142,   226,
   226,   226,   226,   226,   226,   226,   227,   226,   nil,   226,
   226,   226,   226,   227,   142,   nil,   142,   142,   nil,   142,
   142,   nil,   nil,   181,   181,   nil,   181,   181,   181,   nil,
   nil,   nil,   231,   181,   181,   181,   181,   181,   181,   231,
   nil,   nil,   nil,   227,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   227,   227,   nil,   227,   227,   227,   227,   227,   227,
   227,   231,   227,    51,   227,   227,   227,   227,   231,   231,
    51,   nil,   nil,   nil,   nil,   nil,   nil,   231,   231,   nil,
   231,   231,   231,   231,   231,   231,   231,   nil,   231,   244,
   231,   231,   231,   231,   nil,   nil,   244,   nil,   nil,   nil,
    51,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    51,    51,    51,    51,    51,    51,    51,   246,    51,
   nil,    51,    51,    51,    51,   246,   244,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   244,   244,   nil,   244,   244,   244,
   244,   244,   244,   244,   247,   244,   nil,   244,   244,   244,
   244,   247,   nil,   nil,   nil,   246,   247,   nil,   nil,   nil,
   nil,   nil,   nil,   246,   246,   nil,   246,   246,   246,   246,
   246,   246,   246,    56,   246,   nil,   246,   246,   246,   246,
    56,   247,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   247,
   247,   nil,   247,   247,   247,   247,   247,   247,   247,   249,
   247,   nil,   247,   247,   247,   247,   249,   nil,   nil,   nil,
    56,   249,   nil,   nil,   nil,   nil,   nil,   nil,    56,    56,
   nil,    56,    56,    56,    56,    56,    56,    56,    24,    56,
   nil,    56,    56,    56,    56,    24,   249,   nil,   nil,   nil,
   nil,    24,   nil,   nil,   249,   249,   nil,   249,   249,   249,
   249,   249,   249,   249,   139,   249,   nil,   249,   249,   249,
   249,   139,   nil,   nil,   nil,    24,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    24,    24,   nil,    24,    24,    24,    24,
    24,    24,    24,   nil,    24,   nil,    24,    24,    24,    24,
   141,   139,   nil,   nil,   nil,   nil,   nil,   141,   nil,   139,
   139,   nil,   139,   139,   139,   139,   139,   139,   139,   nil,
   139,   nil,   139,   139,   139,   139,   268,   nil,   nil,   141,
   nil,   nil,   nil,   268,   nil,   nil,   141,   141,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   141,   141,   nil,   141,   141,
   141,   141,   141,   141,   141,   101,   141,   nil,   141,   141,
   141,   141,   101,   268,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   268,   268,   nil,   268,   268,   268,   268,   268,   268,
   268,   167,   268,   nil,   268,   268,   268,   268,   167,   nil,
   nil,   nil,   101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   101,   101,   nil,   101,   101,   101,   101,   101,   101,   101,
   167,   101,   106,   101,   101,   101,   101,   167,   167,   106,
   nil,   nil,   nil,   nil,   nil,   nil,   167,   167,   nil,   167,
   167,   167,   167,   167,   167,   167,   nil,   167,   173,   167,
   167,   167,   167,   nil,   nil,   173,   nil,   nil,   nil,   106,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   106,   106,   nil,
   106,   106,   106,   106,   106,   106,   106,   109,   106,   nil,
   106,   106,   106,   106,   109,   173,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   173,   173,   nil,   173,   173,   173,   173,
   173,   173,   173,   110,   173,   nil,   173,   173,   173,   173,
   110,   nil,   nil,   nil,   109,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   109,   109,   nil,   109,   109,   109,   109,   109,
   109,   109,   111,   109,   nil,   109,   109,   109,   109,   111,
   110,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   110,   110,
   nil,   110,   110,   110,   110,   110,   110,   110,   178,   110,
   nil,   110,   110,   110,   110,   178,   nil,   nil,   nil,   111,
   178,   nil,   nil,   nil,   nil,   nil,   nil,   111,   111,   nil,
   111,   111,   111,   111,   111,   111,   111,   178,   111,   112,
   111,   111,   111,   111,   178,   178,   112,   nil,   nil,   nil,
   nil,   nil,   nil,   178,   178,   nil,   178,   178,   178,   178,
   178,   178,   178,   nil,   178,   185,   178,   178,   178,   178,
   nil,   nil,   185,   nil,   nil,   nil,   112,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   112,   112,   nil,   112,   112,   112,
   112,   112,   112,   112,   nil,   112,   117,   112,   112,   112,
   112,   185,   185,   117,   nil,   nil,   nil,   nil,   nil,   117,
   185,   185,   nil,   185,   185,   185,   185,   185,   185,   185,
   nil,   185,   118,   185,   185,   185,   185,   nil,   nil,   118,
   nil,   nil,   nil,   117,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   117,   117,   nil,   117,   117,   117,   117,   117,   117,
   117,   209,   117,   nil,   117,   117,   117,   117,   209,   118,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   118,   118,   nil,
   118,   118,   118,   118,   118,   118,   118,   211,   118,   nil,
   118,   118,   118,   118,   211,   nil,   nil,   nil,   209,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   209,   209,   nil,   209,
   209,   209,   209,   209,   209,   209,   211,   209,   119,   209,
   209,   209,   209,   211,   211,   119,   nil,   nil,   nil,   nil,
   nil,   nil,   211,   211,   nil,   211,   211,   211,   211,   211,
   211,   211,   nil,   211,   nil,   211,   211,   211,   211,   nil,
   nil,   nil,   nil,   nil,   nil,   119,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   119,   119,   nil,   119,   119,   119,   119,
   119,   119,   119,   nil,   119,   nil,   119,   119,   119,   119 ]

racc_action_pointer = [
    12,   119,   nil,   -14,   nil,   nil,   nil,   nil,   nil,   112,
   nil,   106,   103,   124,   nil,   169,    -9,   nil,   nil,   nil,
   nil,   120,   116,    86,   562,   nil,   nil,    87,   107,   108,
   nil,   106,   107,   108,    95,   nil,   nil,   nil,   142,    -5,
   258,   131,   nil,   nil,   159,    -8,   118,   nil,    61,    48,
   -14,   397,   nil,   nil,   nil,   nil,   507,   nil,   nil,   nil,
   nil,   126,   nil,   nil,   170,   nil,   171,   172,   173,   174,
   127,   nil,   135,   185,   132,   nil,   nil,   -21,   nil,   nil,
   nil,   131,   nil,   nil,   nil,   nil,   156,   159,   nil,   nil,
   nil,   nil,    13,   196,   nil,     7,   nil,   nil,   nil,   nil,
   187,   679,   192,   nil,   174,   165,   736,   168,   nil,   791,
   817,   846,   903,   nil,   nil,   207,   -10,   960,   986,  1072,
    12,    30,   220,   nil,    51,   167,   nil,   nil,   nil,   149,
   233,   238,    -3,   nil,   nil,   nil,   nil,   233,   250,   588,
   230,   624,   331,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   250,   252,   253,   254,   255,   256,   nil,   nil,
   nil,   266,   nil,   nil,   nil,   nil,   nil,   705,   261,   nil,
   nil,   nil,   nil,   762,   262,   270,   244,   269,   872,   238,
   nil,   328,    -3,   -15,   nil,   929,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   -20,   -17,   nil,   nil,  1015,
   nil,  1041,   -15,    17,   -12,    30,    85,    68,   103,    34,
   158,   -18,   176,   194,   249,   267,   285,   340,    44,   nil,
   nil,   366,   nil,   104,    58,   nil,   nil,    31,    76,   nil,
   nil,   nil,   nil,    56,   423,    88,   452,   478,    68,   533,
   nil,   nil,   nil,    67,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    67,    68,    78,   nil,   nil,   650,   103,
   nil,   nil,   nil,    -6,   nil,   nil,   nil ]

racc_action_default = [
  -171,  -171,    -1,  -171,    -4,    -5,    -6,    -7,    -8,   -14,
   -26,  -171,   -37,  -171,    -2,    -3,   -48,   -49,   -51,   -52,
   -91,   -10,  -171,  -171,  -171,   -38,   277,  -171,  -171,  -171,
   -56,   -58,   -60,   -61,  -171,   -47,  -161,    -9,  -171,  -171,
  -171,   -34,   -35,   -36,   -40,   -43,  -161,  -118,  -119,  -122,
  -125,  -171,  -127,  -128,  -129,  -130,  -171,  -132,  -133,  -134,
  -136,  -171,  -139,  -140,  -171,  -142,  -171,  -171,  -171,  -171,
  -148,  -149,  -153,  -171,  -171,  -159,  -160,  -171,  -164,  -165,
  -166,  -171,  -168,  -169,  -170,   -53,  -171,  -171,   -57,   -59,
   -62,   -46,   -11,   -15,   -17,   -22,   -19,   -20,   -21,   -27,
  -171,  -171,  -171,   -33,   -68,  -171,  -171,  -171,   -42,  -171,
  -171,  -171,  -171,  -126,  -135,  -171,  -171,  -171,  -171,  -171,
  -171,  -171,  -151,  -152,  -171,  -171,  -163,  -167,   -54,  -171,
  -171,  -171,  -171,   -18,   -23,   -24,   -28,  -171,   -31,  -171,
   -70,  -171,   -45,   -39,   -41,  -120,  -121,  -123,  -124,  -131,
  -137,  -138,  -171,  -171,  -171,  -171,  -171,  -171,  -150,  -154,
  -156,  -171,  -158,  -162,   -55,   -63,   -64,  -171,  -171,   -12,
   -13,   -16,   -29,  -171,  -171,   -85,   -75,  -171,  -171,   -69,
   -77,  -171,  -171,   -94,   -96,  -171,   -99,  -100,  -101,  -103,
  -104,  -105,  -106,  -107,  -108,  -115,  -116,  -117,  -141,  -143,
  -144,  -145,  -146,  -147,  -157,   -65,  -171,   -30,   -32,  -171,
   -44,  -171,  -171,  -171,  -171,  -117,  -171,  -171,  -171,  -171,
  -171,  -171,  -171,  -171,  -171,  -171,  -171,  -171,  -171,   -50,
   -90,  -171,   -98,  -171,   -67,   -93,   -84,   -76,   -71,   -73,
   -74,   -25,  -102,   -95,  -171,  -171,  -171,  -171,  -171,  -171,
   -81,   -82,   -87,  -171,   -89,  -109,  -110,  -111,  -112,  -113,
  -114,   -97,   -66,  -171,  -171,  -171,   -80,   -86,  -171,  -171,
   -88,   -92,   -72,  -171,   -79,   -83,   -78 ]

racc_goto_table = [
    35,    45,   174,    16,    15,   137,    96,    43,    94,   179,
   229,    99,   239,   250,     4,    24,     9,    14,    91,     9,
   145,   146,   103,    16,    40,   147,   148,    85,   100,   108,
   133,   104,   140,   115,   176,   205,   210,    93,   230,   266,
   164,   165,   166,    37,   233,   234,   214,   229,   238,   114,
    21,     5,     3,   243,   261,   232,     1,     2,   160,   161,
   113,   159,    41,   nil,   272,   nil,   nil,   nil,   nil,   nil,
   nil,   136,   236,   229,   nil,   nil,   nil,   207,   138,   237,
   nil,   nil,   nil,    45,   nil,   nil,   128,    16,   129,   143,
   nil,   144,   nil,   nil,   153,   154,   155,   156,   157,    96,
   150,   171,   nil,   nil,   nil,    16,   142,   114,   114,   114,
   114,   nil,   269,   248,   nil,   252,   175,   255,   256,   257,
   258,   259,   260,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   265,
   nil,   267,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   138,   nil,   nil,   nil,   nil,   215,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   274,   nil,   nil,   nil,   nil,   276,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   240,
   nil,   nil,   nil,   nil,   nil,   nil,   175,   nil,   nil,   nil,
   235,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   115,   nil,   175,   nil,   nil,   nil,
   nil,   240,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   271 ]

racc_goto_check = [
    27,    20,    21,    32,     5,    19,    14,    25,    11,    41,
    15,    17,    45,    50,     4,    22,     7,     4,    27,     7,
    61,    61,    24,    32,     5,    63,    63,    32,    18,    27,
    13,    28,    29,    20,    30,    41,    31,    10,    34,    50,
    38,    39,    40,     9,    42,    43,    41,    15,    44,    62,
     8,     6,     3,    54,    55,    56,     1,     2,    78,    65,
    66,    77,    23,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,    17,    21,    15,   nil,   nil,   nil,    19,    20,    41,
   nil,   nil,   nil,    20,   nil,   nil,    32,    32,     5,    25,
   nil,    27,   nil,   nil,    20,    20,    20,    20,    20,    14,
    27,    11,   nil,   nil,   nil,    32,     5,    62,    62,    62,
    62,   nil,    21,    48,   nil,    48,    20,    48,    48,    48,
    48,    48,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,
   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    20,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    48,   nil,   nil,   nil,   nil,    48,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    14,
   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,   nil,
    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    20,   nil,    20,   nil,   nil,   nil,
   nil,    14,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27 ]

racc_goto_pointer = [
   nil,    56,    57,    52,    14,     1,    51,    16,    41,    22,
    -2,   -31,   nil,   -65,   -33,  -172,   nil,   -29,   -12,   -96,
   -23,  -137,     3,    38,   -19,   -17,   nil,   -16,   -10,   -72,
  -106,  -140,     0,   nil,  -144,   nil,   nil,   nil,   -89,   -88,
   -87,  -132,  -162,  -161,  -164,  -200,   nil,   nil,  -105,   nil,
  -206,   nil,   nil,   nil,  -163,  -177,  -130,   nil,   nil,   nil,
   nil,   -89,    -2,   -86,   nil,   -65,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -63,   -66,   nil,
   nil,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   213,   nil,   nil,
   nil,   nil,    95,   nil,    54,   180,    10,   nil,   nil,   nil,
   197,   nil,   nil,   nil,   nil,   nil,    44,    62,   nil,   nil,
   nil,   nil,    63,    17,   251,    18,    19,    29,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   196,   190,   181,   191,
   nil,   192,   193,   194,   183,   184,   186,   187,   188,   189,
   195,    47,    48,    49,    50,    51,    52,    53,    55,    57,
    58,    59,    61,    65,    70,    71,    74,   nil,   nil,    78,
    79,    80 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 69, :_reduce_none,
  2, 70, :_reduce_2,
  2, 70, :_reduce_3,
  1, 70, :_reduce_none,
  1, 70, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  3, 72, :_reduce_9,
  0, 77, :_reduce_none,
  2, 77, :_reduce_11,
  4, 77, :_reduce_12,
  4, 77, :_reduce_13,
  0, 76, :_reduce_none,
  3, 76, :_reduce_15,
  3, 78, :_reduce_16,
  1, 78, :_reduce_none,
  2, 79, :_reduce_18,
  1, 80, :_reduce_none,
  1, 80, :_reduce_20,
  1, 80, :_reduce_21,
  0, 81, :_reduce_22,
  1, 81, :_reduce_23,
  1, 81, :_reduce_24,
  3, 83, :_reduce_25,
  1, 75, :_reduce_none,
  4, 74, :_reduce_27,
  5, 74, :_reduce_28,
  3, 86, :_reduce_29,
  3, 87, :_reduce_30,
  1, 87, :_reduce_none,
  4, 85, :_reduce_32,
  4, 84, :_reduce_33,
  3, 84, :_reduce_34,
  1, 91, :_reduce_35,
  1, 91, :_reduce_36,
  0, 90, :_reduce_none,
  1, 90, :_reduce_38,
  3, 93, :_reduce_39,
  1, 93, :_reduce_none,
  3, 94, :_reduce_41,
  2, 94, :_reduce_42,
  1, 94, :_reduce_none,
  4, 92, :_reduce_44,
  2, 96, :_reduce_45,
  3, 73, :_reduce_46,
  2, 73, :_reduce_47,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 102, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 103, :_reduce_53,
  4, 103, :_reduce_54,
  5, 104, :_reduce_55,
  1, 105, :_reduce_56,
  2, 105, :_reduce_57,
  1, 105, :_reduce_58,
  2, 105, :_reduce_59,
  1, 105, :_reduce_60,
  1, 105, :_reduce_61,
  2, 105, :_reduce_62,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  2, 107, :_reduce_65,
  4, 108, :_reduce_66,
  1, 110, :_reduce_none,
  0, 97, :_reduce_none,
  2, 97, :_reduce_69,
  0, 98, :_reduce_none,
  3, 98, :_reduce_71,
  3, 112, :_reduce_72,
  1, 112, :_reduce_none,
  1, 113, :_reduce_none,
  0, 99, :_reduce_none,
  2, 99, :_reduce_76,
  1, 114, :_reduce_none,
  6, 115, :_reduce_78,
  5, 115, :_reduce_79,
  4, 117, :_reduce_80,
  3, 117, :_reduce_81,
  1, 118, :_reduce_none,
  3, 118, :_reduce_83,
  3, 89, :_reduce_84,
  1, 89, :_reduce_none,
  4, 119, :_reduce_86,
  3, 119, :_reduce_87,
  4, 120, :_reduce_88,
  3, 120, :_reduce_89,
  2, 121, :_reduce_90,
  1, 100, :_reduce_91,
  3, 111, :_reduce_92,
  1, 111, :_reduce_none,
  1, 109, :_reduce_none,
  3, 109, :_reduce_95,
  1, 122, :_reduce_none,
  3, 122, :_reduce_97,
  2, 123, :_reduce_98,
  1, 123, :_reduce_none,
  1, 124, :_reduce_none,
  1, 125, :_reduce_none,
  3, 125, :_reduce_102,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  1, 126, :_reduce_none,
  3, 127, :_reduce_109,
  3, 127, :_reduce_110,
  3, 127, :_reduce_111,
  3, 127, :_reduce_112,
  3, 127, :_reduce_113,
  3, 127, :_reduce_114,
  1, 116, :_reduce_none,
  1, 116, :_reduce_none,
  1, 128, :_reduce_none,
  1, 88, :_reduce_none,
  1, 88, :_reduce_none,
  3, 129, :_reduce_120,
  3, 129, :_reduce_121,
  1, 129, :_reduce_none,
  3, 131, :_reduce_123,
  3, 131, :_reduce_124,
  1, 131, :_reduce_none,
  2, 132, :_reduce_126,
  1, 132, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  1, 134, :_reduce_none,
  3, 134, :_reduce_131,
  1, 135, :_reduce_none,
  1, 135, :_reduce_none,
  1, 137, :_reduce_none,
  1, 137, :_reduce_none,
  1, 138, :_reduce_136,
  3, 82, :_reduce_137,
  3, 82, :_reduce_138,
  1, 82, :_reduce_none,
  1, 140, :_reduce_none,
  4, 136, :_reduce_141,
  1, 136, :_reduce_none,
  4, 141, :_reduce_143,
  4, 141, :_reduce_144,
  4, 141, :_reduce_145,
  4, 141, :_reduce_146,
  4, 141, :_reduce_147,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  3, 142, :_reduce_150,
  2, 142, :_reduce_151,
  2, 142, :_reduce_152,
  1, 142, :_reduce_153,
  3, 143, :_reduce_154,
  1, 144, :_reduce_none,
  1, 145, :_reduce_none,
  2, 146, :_reduce_157,
  1, 146, :_reduce_158,
  1, 133, :_reduce_159,
  1, 133, :_reduce_160,
  1, 95, :_reduce_161,
  3, 130, :_reduce_162,
  2, 130, :_reduce_163,
  1, 130, :_reduce_none,
  1, 130, :_reduce_none,
  1, 147, :_reduce_none,
  2, 149, :_reduce_167,
  1, 149, :_reduce_168,
  1, 148, :_reduce_169,
  1, 148, :_reduce_170 ]

racc_reduce_n = 171

racc_shift_n = 277

racc_token_table = {
  false => 0,
  :error => 1,
  :EXPLAIN => 2,
  :DESCRIBE => 3,
  :DESC => 4,
  :LIMIT => 5,
  :unsigned_integer => 6,
  :comma => 7,
  :OFFSET => 8,
  :ORDER => 9,
  :BY => 10,
  :built_in_function => 11,
  :ASC => 12,
  :left_paren => 13,
  :right_paren => 14,
  :INSERT => 15,
  :INTO => 16,
  :VALUES => 17,
  :SELECT => 18,
  :asterisk => 19,
  :DISTINCT => 20,
  :AS => 21,
  :FROM => 22,
  :CROSS => 23,
  :JOIN => 24,
  :INNER => 25,
  :LEFT => 26,
  :OUTER => 27,
  :RIGHT => 28,
  :FULL => 29,
  :ON => 30,
  :USING => 31,
  :WHERE => 32,
  :GROUP => 33,
  :HAVING => 34,
  :NOT => 35,
  :BETWEEN => 36,
  :AND => 37,
  :IN => 38,
  :LIKE => 39,
  :IS => 40,
  :NULL => 41,
  :EXISTS => 42,
  :identifier => 43,
  :OR => 44,
  :equals_operator => 45,
  :not_equals_operator => 46,
  :less_than_operator => 47,
  :greater_than_operator => 48,
  :less_than_or_equals_operator => 49,
  :greater_than_or_equals_operator => 50,
  :plus_sign => 51,
  :minus_sign => 52,
  :solidus => 53,
  :CURRENT_USER => 54,
  :period => 55,
  :COUNT => 56,
  :AVG => 57,
  :MAX => 58,
  :MIN => 59,
  :SUM => 60,
  :E => 61,
  :quote => 62,
  :character_string_literal => 63,
  :DATE => 64,
  :date_string => 65,
  :TRUE => 66,
  :FALSE => 67 }

racc_nt_base = 68

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EXPLAIN",
  "DESCRIBE",
  "DESC",
  "LIMIT",
  "unsigned_integer",
  "comma",
  "OFFSET",
  "ORDER",
  "BY",
  "built_in_function",
  "ASC",
  "left_paren",
  "right_paren",
  "INSERT",
  "INTO",
  "VALUES",
  "SELECT",
  "asterisk",
  "DISTINCT",
  "AS",
  "FROM",
  "CROSS",
  "JOIN",
  "INNER",
  "LEFT",
  "OUTER",
  "RIGHT",
  "FULL",
  "ON",
  "USING",
  "WHERE",
  "GROUP",
  "HAVING",
  "NOT",
  "BETWEEN",
  "AND",
  "IN",
  "LIKE",
  "IS",
  "NULL",
  "EXISTS",
  "identifier",
  "OR",
  "equals_operator",
  "not_equals_operator",
  "less_than_operator",
  "greater_than_operator",
  "less_than_or_equals_operator",
  "greater_than_or_equals_operator",
  "plus_sign",
  "minus_sign",
  "solidus",
  "CURRENT_USER",
  "period",
  "COUNT",
  "AVG",
  "MAX",
  "MIN",
  "SUM",
  "E",
  "quote",
  "character_string_literal",
  "DATE",
  "date_string",
  "TRUE",
  "FALSE",
  "$start",
  "direct_sql_statement",
  "direct_sql_data_statement",
  "explain",
  "direct_select_statement_multiple_rows",
  "table_reference",
  "insert_specification",
  "query_expression",
  "order_by_clause",
  "limit_clause",
  "sort_specification_list",
  "sort_specification",
  "sort_key",
  "ordering_specification",
  "column_reference",
  "subquery",
  "query_specification",
  "value_list",
  "column_list",
  "in_column_list",
  "value_expression",
  "in_value_list",
  "select_modifier",
  "select_list",
  "table_expression",
  "select_sublist",
  "derived_column",
  "column_name",
  "from_clause",
  "where_clause",
  "group_by_clause",
  "having_clause",
  "table_name",
  "joined_table",
  "table_subquery",
  "cross_join",
  "qualified_join",
  "join_type",
  "join_specification",
  "join_condition",
  "named_columns_join",
  "search_condition",
  "join_column_list",
  "column_name_list",
  "grouping_column_reference_list",
  "grouping_column_reference",
  "row_subquery",
  "between_predicate",
  "row_value_constructor",
  "in_predicate",
  "in_predicate_value",
  "like_predicate",
  "null_predicate",
  "exists_predicate",
  "boolean_term",
  "boolean_factor",
  "boolean_test",
  "boolean_primary",
  "predicate",
  "comparison_predicate",
  "row_value_constructor_element",
  "numeric_value_expression",
  "general_literal",
  "term",
  "factor",
  "sign",
  "value_expression_primary",
  "unsigned_value_specification",
  "set_function_specification",
  "unsigned_literal",
  "general_value_specification",
  "unsigned_numeric_literal",
  "qualifier",
  "general_set_function",
  "exact_numeric_literal",
  "approximate_numeric_literal",
  "mantissa",
  "exponent",
  "signed_integer",
  "datetime_literal",
  "bool_literal",
  "date_literal" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 9)
  def _reduce_2(val, _values, result)
     result = SQLParser::Statement::Explain.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 10)
  def _reduce_3(val, _values, result)
     result = SQLParser::Statement::Explain.new(val[1]) 
    result
  end
.,.,

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.racc', 21)
  def _reduce_9(val, _values, result)
     result = SQLParser::Statement::DirectSelect.new(val[0], val[1], val[2]) 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_11(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_12(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[3], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_13(val, _values, result)
     result = SQLParser::Statement::Limit.new(val[1], val[3]) 
    result
  end
.,.,

# reduce 14 omitted

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_15(val, _values, result)
     result = SQLParser::Statement::OrderBy.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_16(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 17 omitted

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_18(val, _values, result)
     result = val[1].new(val[0]) 
    result
  end
.,.,

# reduce 19 omitted

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_20(val, _values, result)
     result = SQLParser::Statement::BuiltInFunction.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_21(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 48)
  def _reduce_22(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 49)
  def _reduce_23(val, _values, result)
     result = SQLParser::Statement::Ascending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 50)
  def _reduce_24(val, _values, result)
     result = SQLParser::Statement::Descending 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 55)
  def _reduce_25(val, _values, result)
     result = SQLParser::Statement::Subquery.new(val[1]) 
    result
  end
.,.,

# reduce 26 omitted

module_eval(<<'.,.,', 'parser.racc', 61)
  def _reduce_27(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_28(val, _values, result)
     result = SQLParser::Statement::Insert.new(val[2], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 65)
  def _reduce_29(val, _values, result)
     result = SQLParser::Statement::InColumnList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_30(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 31 omitted

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_32(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_33(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_34(val, _values, result)
     result = SQLParser::Statement::Select.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_35(val, _values, result)
     result = SQLParser::Statement::All.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_36(val, _values, result)
     result = SQLParser::Statement::SelectList.new(val[0]) 
    result
  end
.,.,

# reduce 37 omitted

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_38(val, _values, result)
     result = SQLParser::Statement::Distinct.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_39(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 40 omitted

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_41(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_42(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 43 omitted

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_44(val, _values, result)
     result = SQLParser::Statement::TableExpression.new(val[0], val[1], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_45(val, _values, result)
     result = SQLParser::Statement::FromClause.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_46(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_47(val, _values, result)
     result = SQLParser::Statement::As.new(val[0], val[1]) 
    result
  end
.,.,

# reduce 48 omitted

# reduce 49 omitted

# reduce 50 omitted

# reduce 51 omitted

# reduce 52 omitted

module_eval(<<'.,.,', 'parser.racc', 115)
  def _reduce_53(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_54(val, _values, result)
     result = SQLParser::Statement::CrossJoin.new(val[0], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_55(val, _values, result)
     result = val[1].new(val[0], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_56(val, _values, result)
     result = SQLParser::Statement::InnerJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_57(val, _values, result)
     result = SQLParser::Statement::LeftOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_58(val, _values, result)
     result = SQLParser::Statement::LeftJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_59(val, _values, result)
     result = SQLParser::Statement::RightOuterJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_60(val, _values, result)
     result = SQLParser::Statement::RightJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_61(val, _values, result)
     result = SQLParser::Statement::FullJoin 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 128)
  def _reduce_62(val, _values, result)
     result = SQLParser::Statement::FullOuterJoin 
    result
  end
.,.,

# reduce 63 omitted

# reduce 64 omitted

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_65(val, _values, result)
     result = SQLParser::Statement::On.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_66(val, _values, result)
     result = SQLParser::Statement::Using.new(val[2]) 
    result
  end
.,.,

# reduce 67 omitted

# reduce 68 omitted

module_eval(<<'.,.,', 'parser.racc', 145)
  def _reduce_69(val, _values, result)
     result = SQLParser::Statement::WhereClause.new(val[1]) 
    result
  end
.,.,

# reduce 70 omitted

module_eval(<<'.,.,', 'parser.racc', 149)
  def _reduce_71(val, _values, result)
     result = SQLParser::Statement::GroupByClause.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_72(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 73 omitted

# reduce 74 omitted

# reduce 75 omitted

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_76(val, _values, result)
     result = SQLParser::Statement::HavingClause.new(val[1]) 
    result
  end
.,.,

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_78(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Between.new(val[0], val[3], val[5])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_79(val, _values, result)
     result = SQLParser::Statement::Between.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_80(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::In.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_81(val, _values, result)
     result = SQLParser::Statement::In.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 82 omitted

module_eval(<<'.,.,', 'parser.racc', 176)
  def _reduce_83(val, _values, result)
     result = SQLParser::Statement::InValueList.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_84(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_86(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Like.new(val[0], val[3])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_87(val, _values, result)
     result = SQLParser::Statement::Like.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_88(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_89(val, _values, result)
     result = SQLParser::Statement::Is.new(val[0], SQLParser::Statement::Null.new) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_90(val, _values, result)
     result = SQLParser::Statement::Exists.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_91(val, _values, result)
     result = SQLParser::Statement::Table.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 201)
  def _reduce_92(val, _values, result)
     result = Array(val[0]) + Array(val[2]) 
    result
  end
.,.,

# reduce 93 omitted

# reduce 94 omitted

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_95(val, _values, result)
     result = SQLParser::Statement::Or.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 96 omitted

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_97(val, _values, result)
     result = SQLParser::Statement::And.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_98(val, _values, result)
     result = SQLParser::Statement::Not.new(val[1]) 
    result
  end
.,.,

# reduce 99 omitted

# reduce 100 omitted

# reduce 101 omitted

module_eval(<<'.,.,', 'parser.racc', 222)
  def _reduce_102(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 103 omitted

# reduce 104 omitted

# reduce 105 omitted

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_109(val, _values, result)
     result = SQLParser::Statement::Equals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_110(val, _values, result)
     result = SQLParser::Statement::Not.new(SQLParser::Statement::Equals.new(val[0], val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_111(val, _values, result)
     result = SQLParser::Statement::Less.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 236)
  def _reduce_112(val, _values, result)
     result = SQLParser::Statement::Greater.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_113(val, _values, result)
     result = SQLParser::Statement::LessOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_114(val, _values, result)
     result = SQLParser::Statement::GreaterOrEquals.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

module_eval(<<'.,.,', 'parser.racc', 252)
  def _reduce_120(val, _values, result)
     result = SQLParser::Statement::Add.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 253)
  def _reduce_121(val, _values, result)
     result = SQLParser::Statement::Subtract.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 122 omitted

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_123(val, _values, result)
     result = SQLParser::Statement::Multiply.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_124(val, _values, result)
     result = SQLParser::Statement::Divide.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 125 omitted

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_126(val, _values, result)
     result = val[0].new(val[1]) 
    result
  end
.,.,

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.racc', 269)
  def _reduce_131(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

module_eval(<<'.,.,', 'parser.racc', 280)
  def _reduce_136(val, _values, result)
     result = SQLParser::Statement::CurrentUser.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_137(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_138(val, _values, result)
     result = SQLParser::Statement::QualifiedColumn.new(val[0], SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 139 omitted

# reduce 140 omitted

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_141(val, _values, result)
     result = SQLParser::Statement::Count.new(SQLParser::Statement::All.new) 
    result
  end
.,.,

# reduce 142 omitted

module_eval(<<'.,.,', 'parser.racc', 295)
  def _reduce_143(val, _values, result)
     result = SQLParser::Statement::Count.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_144(val, _values, result)
     result = SQLParser::Statement::Average.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_145(val, _values, result)
     result = SQLParser::Statement::Maximum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_146(val, _values, result)
     result = SQLParser::Statement::Minimum.new(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_147(val, _values, result)
     result = SQLParser::Statement::Sum.new(val[2]) 
    result
  end
.,.,

# reduce 148 omitted

# reduce 149 omitted

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_150(val, _values, result)
     result = SQLParser::Statement::Float.new("#{val[0]}.#{val[2]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 308)
  def _reduce_151(val, _values, result)
     result = SQLParser::Statement::Float.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_152(val, _values, result)
     result = SQLParser::Statement::Float.new("0.#{val[1]}".to_f) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_153(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_154(val, _values, result)
     result = SQLParser::Statement::ApproximateFloat.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 155 omitted

# reduce 156 omitted

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_157(val, _values, result)
     result = val[0].new(SQLParser::Statement::Integer.new(val[1])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_158(val, _values, result)
     result = SQLParser::Statement::Integer.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 326)
  def _reduce_159(val, _values, result)
     result = SQLParser::Statement::UnaryPlus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_160(val, _values, result)
     result = SQLParser::Statement::UnaryMinus 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 331)
  def _reduce_161(val, _values, result)
     result = SQLParser::Statement::Column.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 335)
  def _reduce_162(val, _values, result)
     result = SQLParser::Statement::String.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 336)
  def _reduce_163(val, _values, result)
     result = SQLParser::Statement::String.new('') 
    result
  end
.,.,

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

module_eval(<<'.,.,', 'parser.racc', 344)
  def _reduce_167(val, _values, result)
     result = SQLParser::Statement::Date.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 345)
  def _reduce_168(val, _values, result)
     result = SQLParser::Statement::Date.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 348)
  def _reduce_169(val, _values, result)
     result = SQLParser::Statement::Bool.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 349)
  def _reduce_170(val, _values, result)
     result = SQLParser::Statement::Bool.new(val[0]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SQLParser
