// Code generated by protoc-gen-grpc-gateway
// source: openflights.proto
// DO NOT EDIT!

package openflights

import (
	"encoding/json"
	"io"
	"net/http"

	"github.com/gengo/grpc-gateway/runtime"
	"github.com/gengo/grpc-gateway/utilities"
	"github.com/golang/glog"
	"github.com/golang/protobuf/proto"
	"go.pedge.io/pb/go/google/protobuf"
	"golang.org/x/net/context"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
)

var _ codes.Code
var _ io.Reader
var _ = runtime.String
var _ = json.Marshal
var _ = utilities.PascalFromSnake

func request_API_GetAllAirports_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (API_GetAllAirportsClient, error) {
	var protoReq google_protobuf.Empty

	return client.GetAllAirports(ctx, &protoReq)
}

func request_API_GetAllAirlines_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (API_GetAllAirlinesClient, error) {
	var protoReq google_protobuf.Empty

	return client.GetAllAirlines(ctx, &protoReq)
}

func request_API_GetAllRoutes_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (API_GetAllRoutesClient, error) {
	var protoReq google_protobuf.Empty

	return client.GetAllRoutes(ctx, &protoReq)
}

func request_API_GetAirport_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetAirportRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}

	protoReq.Id, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetAirport(ctx, &protoReq)
}

func request_API_GetAirline_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetAirlineRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "id")
	}

	protoReq.Id, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetAirline(ctx, &protoReq)
}

func request_API_GetRoutes_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetRoutesRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["airline_id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "airline_id")
	}

	protoReq.AirlineId, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	val, ok = pathParams["source_airport_id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "source_airport_id")
	}

	protoReq.SourceAirportId, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	val, ok = pathParams["destination_airport_id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "destination_airport_id")
	}

	protoReq.DestinationAirportId, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetRoutes(ctx, &protoReq)
}

func request_API_GetDistance_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetDistanceRequest

	var (
		val string
		ok  bool
		err error
		_   = err
	)

	val, ok = pathParams["source_airport_id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "source_airport_id")
	}

	protoReq.SourceAirportId, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	val, ok = pathParams["destination_airport_id"]
	if !ok {
		return nil, grpc.Errorf(codes.InvalidArgument, "missing parameter %s", "destination_airport_id")
	}

	protoReq.DestinationAirportId, err = runtime.String(val)

	if err != nil {
		return nil, err
	}

	return client.GetDistance(ctx, &protoReq)
}

func request_API_GetMiles_0(ctx context.Context, client APIClient, req *http.Request, pathParams map[string]string) (proto.Message, error) {
	var protoReq GetMilesRequest

	if err := json.NewDecoder(req.Body).Decode(&protoReq); err != nil {
		return nil, grpc.Errorf(codes.InvalidArgument, "%v", err)
	}

	return client.GetMiles(ctx, &protoReq)
}

// RegisterAPIHandlerFromEndpoint is same as RegisterAPIHandler but
// automatically dials to "endpoint" and closes the connection when "ctx" gets done.
func RegisterAPIHandlerFromEndpoint(ctx context.Context, mux *runtime.ServeMux, endpoint string) (err error) {
	conn, err := grpc.Dial(endpoint, grpc.WithInsecure())
	if err != nil {
		return err
	}
	defer func() {
		if err != nil {
			if cerr := conn.Close(); cerr != nil {
				glog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
			return
		}
		go func() {
			<-ctx.Done()
			if cerr := conn.Close(); cerr != nil {
				glog.Errorf("Failed to close conn to %s: %v", endpoint, cerr)
			}
		}()
	}()

	return RegisterAPIHandler(ctx, mux, conn)
}

// RegisterAPIHandler registers the http handlers for service API to "mux".
// The handlers forward requests to the grpc endpoint over "conn".
func RegisterAPIHandler(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	client := NewAPIClient(conn)

	mux.Handle("GET", pattern_API_GetAllAirports_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAllAirports_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, req, err)
			return
		}

		forward_API_GetAllAirports_0(ctx, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAllAirlines_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAllAirlines_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, req, err)
			return
		}

		forward_API_GetAllAirlines_0(ctx, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAllRoutes_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAllRoutes_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, req, err)
			return
		}

		forward_API_GetAllRoutes_0(ctx, w, req, func() (proto.Message, error) { return resp.Recv() }, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAirport_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAirport_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, req, err)
			return
		}

		forward_API_GetAirport_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetAirline_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetAirline_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, req, err)
			return
		}

		forward_API_GetAirline_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetRoutes_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetRoutes_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, req, err)
			return
		}

		forward_API_GetRoutes_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("GET", pattern_API_GetDistance_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetDistance_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, req, err)
			return
		}

		forward_API_GetDistance_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	mux.Handle("POST", pattern_API_GetMiles_0, func(w http.ResponseWriter, req *http.Request, pathParams map[string]string) {
		resp, err := request_API_GetMiles_0(runtime.AnnotateContext(ctx, req), client, req, pathParams)
		if err != nil {
			runtime.HTTPError(ctx, w, req, err)
			return
		}

		forward_API_GetMiles_0(ctx, w, req, resp, mux.GetForwardResponseOptions()...)

	})

	return nil
}

var (
	pattern_API_GetAllAirports_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"airports"}, ""))

	pattern_API_GetAllAirlines_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"airlines"}, ""))

	pattern_API_GetAllRoutes_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"routes"}, ""))

	pattern_API_GetAirport_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 1, 0, 4, 1, 5, 1}, []string{"airports", "id"}, ""))

	pattern_API_GetAirline_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 1, 0, 4, 1, 5, 1}, []string{"airlines", "id"}, ""))

	pattern_API_GetRoutes_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 1, 0, 4, 1, 5, 1, 1, 0, 4, 1, 5, 2, 1, 0, 4, 1, 5, 3}, []string{"routes", "airline_id", "source_airport_id", "destination_airport_id"}, ""))

	pattern_API_GetDistance_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0, 1, 0, 4, 1, 5, 1, 1, 0, 4, 1, 5, 2}, []string{"distance", "source_airport_id", "destination_airport_id"}, ""))

	pattern_API_GetMiles_0 = runtime.MustPattern(runtime.NewPattern(1, []int{2, 0}, []string{"miles"}, ""))
)

var (
	forward_API_GetAllAirports_0 = runtime.ForwardResponseStream

	forward_API_GetAllAirlines_0 = runtime.ForwardResponseStream

	forward_API_GetAllRoutes_0 = runtime.ForwardResponseStream

	forward_API_GetAirport_0 = runtime.ForwardResponseMessage

	forward_API_GetAirline_0 = runtime.ForwardResponseMessage

	forward_API_GetRoutes_0 = runtime.ForwardResponseMessage

	forward_API_GetDistance_0 = runtime.ForwardResponseMessage

	forward_API_GetMiles_0 = runtime.ForwardResponseMessage
)
