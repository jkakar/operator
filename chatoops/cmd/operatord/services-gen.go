// Code generated by protoc-gen-operatord
package main

import (
	"github.com/sr/operator/chatoops/services/buildkite"

	"github.com/sr/operator/chatoops/services/gcloud"

	"github.com/sr/operator/chatoops/services/papertrail"

	"github.com/sr/operator"
	"go.pedge.io/env"
	"google.golang.org/grpc"
)

func registerServices(
	server *grpc.Server,
	logger operator.Logger,
	instrumenter operator.Instrumenter,
	authorizer operator.Authorizer,
) {

	buildkiteConfig := &buildkite.Env{}
	if err := env.Populate(buildkiteConfig); err != nil {
		logError(logger, "buildkite", err)
	}
	buildkiteServer, err := buildkite.NewAPIServer(buildkiteConfig)
	if err != nil {
		logError(logger, "buildkite", err)
	}
	intercepted := &interceptedbuildkiteBuildkiteService{
		authorizer,
		instrumenter,
		buildkiteServer,
	}
	buildkite.RegisterBuildkiteServiceServer(server, intercepted)
	logger.Info(&operator.ServiceRegistered{&operator.Service{Name: "buildkite"}})

	gcloudConfig := &gcloud.Env{}
	if err := env.Populate(gcloudConfig); err != nil {
		logError(logger, "gcloud", err)
	}
	gcloudServer, err := gcloud.NewAPIServer(gcloudConfig)
	if err != nil {
		logError(logger, "gcloud", err)
	}
	intercepted := &interceptedgcloudGcloudService{
		authorizer,
		instrumenter,
		gcloudServer,
	}
	gcloud.RegisterGcloudServiceServer(server, intercepted)
	logger.Info(&operator.ServiceRegistered{&operator.Service{Name: "gcloud"}})

	papertrailConfig := &papertrail.Env{}
	if err := env.Populate(papertrailConfig); err != nil {
		logError(logger, "papertrail", err)
	}
	papertrailServer, err := papertrail.NewAPIServer(papertrailConfig)
	if err != nil {
		logError(logger, "papertrail", err)
	}
	intercepted := &interceptedpapertrailPapertrailService{
		authorizer,
		instrumenter,
		papertrailServer,
	}
	papertrail.RegisterPapertrailServiceServer(server, intercepted)
	logger.Info(&operator.ServiceRegistered{&operator.Service{Name: "papertrail"}})

}

func logError(logger operator.Logger, service string, err error) {
	logger.Error(&operator.ServiceStartupError{
		Service: &operator.Service{
			Name: service,
		},
		Message: err.Error(),
	})
}
